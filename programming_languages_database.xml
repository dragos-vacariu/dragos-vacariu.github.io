<?xml version="1.0" encoding="UTF-8"?>

<content>
	<programming_language>
		<name>C</name>
		<description>
			C is a general-purpose computer programming language.<br></br><br></br>
			It was created in the 1970s by Dennis Ritchie, and remains very widely used and 
			influential. <br></br><br></br>
			By design, C's features cleanly reflect the 
			capabilities of the targeted CPUs. It has found lasting use in operating 
			systems, device drivers, and protocol stacks, but its use in application 
			software has been decreasing. <br></br><br></br>
			C is commonly used on computer architectures that range from the largest 
			supercomputers to the smallest microcontrollers 
			and embedded systems.
		</description>
		<generic-programming>
			In C Language generic programming can be achieved using:<br></br><br></br>
			Variable argument lists;<br></br>
			Using <code>void *</code> and function pointers to write generic code;<br></br>
			Using libraries to reuse code without copying and recompiling;<br></br>
			Using plugins to get run-time overriding and more;
		</generic-programming>
		<variable-arguments-lists>
			C allows a function call to have a variable number of
			arguments with the variable argument list mechanism.<br></br>
			Use ellipsis <code>...</code> to denote a variable number of arguments to
			the compiler. the ellipsis can only occur at the end of an
			argument list.<br></br><br></br>
			Here are some standard function calls that use variable
			argument lists:<br></br><br></br>
			<code>int printf(const char *format, ...);</code><br></br>
			<code>int scanf(const char *format, ...);</code><br></br>
			<code>int execlp(const char *file, const char *arg, ...);</code><br></br>
		</variable-arguments-lists>
		<simple-data-types>
			<code>short int</code> - has value range <red>[-32,768 to 32,767]</red> - format specifier <code>%hd</code> - 
			occupies 2 bytes memory
			<br></br><br></br>
			<code>unsigned short int</code> - has value range <red>[-32,768 to 65,535]</red> - format specifier <code>%hu</code> - 
			occupies 2 bytes memory
			<br></br><br></br>
			<code>unsigned int</code> - has value range <red>[0 to 4,294,967,295]</red> - format specifier <code>%u</code> - 
			occupies 4 bytes memory
			<br></br><br></br>
			<code>int</code> - has value range <red>[-2,147,483,648 to 2,147,483,647]</red> - format specifier <code>%d</code> - 
			occupies 4 bytes memory
			<br></br><br></br>
			<code>long int</code> - has value range <red>[-2,147,483,648 to 2,147,483,647]</red> - 
			format specifier <code>%ld</code> - occupies 4 bytes memory
			<br></br><br></br>
			<code>unsigned long int</code> - has value range <red>[0 to 4,294,967,295 ]</red> - format specifier <code>%lu</code> -
			occupies 4 bytes memory
			<br></br><br></br>
			<code>long long int</code> - has value range <red>[-(2^63) to (2^63)-1]</red> - format specifier <code>%lld</code> - 
			occupies 8 bytes memory
			<br></br><br></br>
			<code>unsigned long long int</code> - has value range <red>[-(2^63) to 18,446,744,073,709,551,615 ]</red> - 
			format specifier <code>%llu</code>  - occupies 8 bytes memory
			<br></br><br></br>
			<code>signed char</code> - has value range <red>[-128 to 127]</red> - format specifier <code>%c</code> - occupies 1 
			byte memory
			<br></br><br></br>
			<code>unsigned char</code> - has value range <red>[0 to 255]</red> - format specifier <code>%c</code> - occupies 1 
			byte memory
			<br></br><br></br>
			<code>float</code> - has value range <red>[1.2E-38 to 3.4E+38]</red> - format specifier <code>%f</code> - occupies 
			4 byte memory
			<br></br><br></br>
			<code>double</code> - has value range <red>[1.7E-308 to 1.7E+308]</red> - format specifier <code>%lf</code> - 
			occupies 8 byte memory
			<br></br><br></br>
			<code>long double</code> - has value range <red>[3.4E-4932 to 1.1E+4932]</red> - format specifier <code>%Lf</code>  - 
			occupies 16 byte memory
		</simple-data-types>
		<complex-data-types>
			Data types that are derived from fundamental data types:<br></br><br></br>
			<code>bool type</code><br></br><br></br>
			<code>Enumerated type / Enums</code> - An enum is a special type that represents a group of constants (unchangeable values).<br></br><br></br>
			<code>Complex types</code> - The C programming language, as of C99, supports complex number math with the three built-in types 
			<code>double _Complex</code>, <code>float _Complex</code>, and <code>long double _Complex</code> . When the header <code>complex.h</code> is 
			included, the three complex number types are also accessible as double complex, 
			float complex, long double complex.<br></br><br></br>
			<code>Arrays</code>: A collection of elements of the same data type. Array in C can be defined as a method of 
			clubbing multiple entities of similar type into a larger group. These entities or elements 
			can be of int, float, char, or double data type or can be of user-defined data types too 
			like structures.<br></br><br></br>
			<code>Pointers</code>: A variable that stores the memory address of another variable. The size of a pointer in C 
			programming language varies depending on factors such as the operating system and CPU 
			architecture. Typically, on a 32-bit computer system, the size of pointer is 4 bytes, 
			while on a 64-bit computer system, it is 8 bytes.<br></br><br></br>
			<code>Structures</code>: A collection of variables of different data types grouped 
			together under a single name. <br></br><br></br>
			<code>Unions</code>: A special type of structure that can store only one value at a time.<br></br><br></br>
			<code>Typedefs</code>: A way to create a new name for an existing data type to improve code 
			readability and maintainability.<br></br><br></br>
			<code>void</code> - used to indicate an empty data type, usually used with pointers.<br></br>
		</complex-data-types>
		<loops>
			In computer programming, a loop is a sequence of instruction s that is 
			continually repeated until a certain condition is reached. 
			Typically, a certain process is done, such as getting an item of data 
			and changing it, and then some condition is checked such as whether a 
			counter has reached a prescribed number.<br></br><br></br>
			<br></br><br></br>
			For, while, do-while loops:<br></br><br></br>
			
			<red>While loop does not depend upon the number of iterations. In for loop the number 
			of iterations was previously known to us but in the While loop, the execution 
			is terminated on the basis of the test condition. If the test condition will 
			become false then it will break from the while loop else body will be executed.<br></br><br></br>
			<br></br><br></br></red>	
			
			<green>In for loop, a loop variable is used to control the loop. Firstly we initialize 
			the loop variable with some value, then check its test condition. If the 
			statement is true then control will move to the body and the body of for 
			loop will be executed. Steps will be repeated till the exit condition 
			becomes true. If the test condition will be false then it will stop.
			<br></br><br></br>
			
			Initialization Expression: In this expression, we assign a loop variable 
			or loop counter to some value. for example: <code>int i=1;</code>
			Test Expression: In this expression, test conditions are performed. 
			If the condition evaluates to true then the loop body will be executed and 
			then an update of the loop variable is done. If the test expression becomes 
			false then the control will exit from the loop. for example, <code>counter&lt;5;</code>
			<br></br><br></br>
			
			Update Expression: After execution of the loop body loop variable is updated 
			by some value it could be incremented, decremented, multiplied, or divided by 
			any value.<br></br><br></br></green>
			
			<blue><br></br><br></br>			
			The do-while loop is similar to a while loop but the only difference 
			lies in the do-while loop test condition which is tested at the end of 
			the body. In the do-while loop, the loop body will execute at least once 
			irrespective of the test condition.<br></br><br></br></blue>
<code>
/*While loop syntax: */
int counter = 0;
while(counter &lt; 5)
{
	/*code goes here*/
	 counter++;
}

/*For loop syntax: */
for(int counter = 0; counter &lt; 5; counter++)<br></br>
{
	/*code goes here*/
	 counter++;
}

/*Do while loop syntax: */
do
{
	/*code goes here*/
	 counter++;
}
while(counter &lt; 5)
</code>
		</loops>
		<collections>
			<code>Arrays</code>: Are collections of elements of the same data type with fixed size. 
			Once the array is defined its size cannot be changed.<br></br><br></br>
			
			The <code>linked list</code> is a complex data type, which consists of a structure with at least 2 elements: value and pointer
			to the next element. Memory will be allocated dynamically for each element added to the list. The main benefit of a linked-list
			consists in the possibility of adding a variable number of elements, being able to delete or add an element without making copies
			or exchanges, but only by changing the addresses of the assigned pointers for the next / previous element.
			<br></br><br></br>
			
<code>
/*Declaring arrays and initializing arrays*/

int arr[5];
int array_initialized[7] = [1,2,3,4,5,6,7];
float array_floats[3] = [2.0f, 3.0f, 2.11f];

/*---------------------------------------------*/

//Declaring and initializing a Linked List

//Linked list definition:
struct LinkedList{
	int value; // this will store the value
	struct LinkedList * previous; // this will store the address of the previous block of memory
	struct LinkedList * next; // this will store the address of the next block of memory
};

struct LinkedList* list = NULL; // creating a linked list

int counter = 0;
while(counter &lt; 10)
{
	if(list == NULL) // if this is the first element to be introduced on the linked list
	{
		list = (struct LinkedList* )malloc(sizeof(struct LinkedList)); // allocate memory.
		list->value = counter; // add value
		list->previous = NULL; // there is no previous element.
		list->next = NULL; // we don't know if there will be a next element.
	}

	else //enter here after the first element was added.
	{

		list->next = (struct LinkedList* ) malloc(sizeof(struct LinkedList)); // allocate space for the next element
		list->next->previous = list; // we're still on the previous element, so assign the link to the next element.previous
		list = list->next; // next element become current element
		list->value = counter; // add value
		list->next = NULL;  // we don't know if there will be a next element.
	}
}

//printing the linked list
while(list != NULL) // list is currently pointing to the last element. So we will display it from last to first.
{
	printf("%d ", list->value);
	list = list->previous; // go to the previous
}

</code>
		</collections>
		<collection-methods>There are no built in functions for working with collections.</collection-methods>
		<dynamic-memory-allocation>
		C malloc() method<br></br><br></br>
		The “malloc” or “memory allocation” method in C is used to dynamically allocate a single 
		large block of memory with the specified size. It returns a pointer of type void which 
		can be cast into a pointer of any form. It doesn’t Initialize memory at execution time 
		so that it has initialized each block with the default garbage value initially. <br></br><br></br>
<code>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;conio.h&gt;

int main()
{
	int *A;
	int i;

	A=(int *)malloc(20*sizeof(int)); // malloc return a void pointer that needs to be converted
	//into a pointer to however the type of the variable that uses it has. (int *) - is the type of pointer A
	//20 = the number of memory cells allocated;
	
	for (i=0;i&lt;20;i++)
		printf("A[%d]=%d\n", i, A[i]);
	free(A);
}
</code>
			The Malloc () and calloc() functions differ in how the functions are used when allocating 
			memory at runtime. The Malloc () function only returns the starting address, it doesn't 
			zero it. On the other hand, the calloc() function returns the starting address, zeroing it.
<code>

A=(int *)calloc(20, sizeof(int)); //calloc does the same as malloc while initializing all elements to 0:
	
for (i=0;i&lt;20;i++)
	printf("A[%d]=%d\n", i ,A[i]);
free(A);
	
</code>
		
		</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>C++</name>
		<description>
			C++ is a high-level, general-purpose programming language created by 
			Danish computer scientist Bjarne Stroustrup. <br></br><br></br>
			First released in 1985 as an extension of the C programming language, 
			it has since expanded significantly over time; as of 1997, C++ has object-oriented, 
			generic, and functional features, in addition to facilities for low-level memory 
			manipulation for making things like microcomputers or to make operating systems 
			like Linux or Windows. <br></br><br></br>
			
			It is almost always implemented as a compiled language, 
			and many vendors provide C++ compilers, including the Free Software Foundation, 
			LLVM, Microsoft, Intel, Embarcadero, Oracle, and IBM.
		</description>
		<oop>C++ OOP</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>C#</name>
		<description>
			C# is a general-purpose high-level programming language supporting multiple 
			paradigms. C# encompasses static typing, strong typing, lexically scoped, 
			imperative, declarative, functional, generic, object-oriented (class-based), 
			and component-oriented programming disciplines. <br></br><br></br>

			The C# programming language was designed by Anders Hejlsberg from Microsoft in 
			2000. <br></br><br></br>

			Microsoft introduced C# along with .NET Framework and Visual Studio, both of 
			which were closed-source. At the time, Microsoft had no open-source products. 
			<br></br><br></br>

			Four years later, in 2004, a free and open-source project called Mono began, 
			providing a cross-platform compiler and runtime environment for the C# 
			programming language. <br></br><br></br>

			A decade later, Microsoft released Visual Studio Code (code editor), 
			Roslyn (compiler), and the unified .NET platform (software framework), 
			all of which support C# and are free, open-source, and cross-platform. 
			Mono also joined Microsoft but was not merged into .NET.<br></br><br></br>
		</description>
		<oop>C# OOP</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>JavaScript</name>
		<description>
			JavaScript often abbreviated as JS, is a programming language and core 
			technology of the Web, alongside HTML and CSS. 99% of websites use JavaScript 
			on the client side for webpage behavior.<br></br><br></br>

			Web browsers have a dedicated JavaScript engine that executes the client code. 
			These engines are also utilized in some servers and a variety of apps. The most 
			popular runtime system for non-browser usage is Node.js.<br></br><br></br>

			JavaScript is a high-level, often just-in-time compiled language that conforms 
			to the ECMAScript standard. It has dynamic typing, prototype-based 
			object-orientation, and first-class functions. It is multi-paradigm, 
			supporting event-driven, functional, and imperative programming styles. 
			It has application programming interfaces (APIs) for working with text, dates, 
			regular expressions, standard data structures, and the Document Object Model (DOM).
		</description>
		<oop>
		</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>Java</name>
		<description>
			Java is a high-level, class-based, object-oriented programming language that is 
			designed to have as few implementation dependencies as possible.<br></br><br></br>
			It is a general-purpose programming language intended to let programmers write once, 
			run anywhere meaning that compiled Java code can run on all platforms that support 
			Java without the need to recompile. <br></br><br></br>
			
			Java applications are typically compiled to bytecode that can run on any 
			Java virtual machine (JVM) regardless of the 
			underlying computer architecture. The syntax of Java is similar to C and C++, 
			but has fewer low-level facilities than either of them. The Java runtime provides 
			dynamic capabilities (such as reflection and runtime code modification) that are 
			typically not available in traditional compiled languages.
		</description>
		<oop>Java OOP</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>Python</name>
		<description>
			Python is a high-level, general-purpose programming language. Its design 
			philosophy emphasizes code readability with the use of significant indentation.
			<br></br><br></br>

			Python is dynamically typed and garbage-collected. It supports multiple 
			programming paradigms, including structured (particularly procedural), 
			object-oriented and functional programming. It is often described as a 
			"batteries included" language due to its comprehensive standard library.
		
		</description>
		<oop>Python OOP</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
</content>
