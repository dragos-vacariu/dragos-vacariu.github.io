<?xml version="1.0" encoding="UTF-8"?>

<content>
	<programming_language>
		<name>C</name>
		<description>
			C is a general-purpose computer programming language.<br></br><br></br>
			It was created in the 1970s by Dennis Ritchie, and remains very widely used and 
			influential. <br></br><br></br>
			By design, C's features cleanly reflect the 
			capabilities of the targeted CPUs. It has found lasting use in operating 
			systems, device drivers, and protocol stacks, but its use in application 
			software has been decreasing. <br></br><br></br>
			C is commonly used on computer architectures that range from the largest 
			supercomputers to the smallest microcontrollers 
			and embedded systems.
		</description>
		<generic-programming>
			In C Language generic programming can be achieved using:<br></br><br></br>
			Variable argument lists;<br></br>
			Using <code>void *</code> and function pointers to write generic code;<br></br>
			Using libraries to reuse code without copying and recompiling;<br></br>
			Using plugins to get run-time overriding and more;
		</generic-programming>
		<variable-arguments-lists>
			C allows a function call to have a variable number of
			arguments with the variable argument list mechanism.<br></br>
			Use ellipsis <code>...</code> to denote a variable number of arguments to
			the compiler. the ellipsis can only occur at the end of an
			argument list.<br></br><br></br>
			Here are some standard function calls that use variable
			argument lists:<br></br><br></br>
			<code>int printf(const char *format, ...);</code><br></br>
			<code>int scanf(const char *format, ...);</code><br></br>
			<code>int execlp(const char *file, const char *arg, ...);</code><br></br>
		</variable-arguments-lists>
		<simple-data-types>
			<code>short int</code> - has value range <red>[-32,768 to 32,767]</red> - format specifier <code>%hd</code> - 
			occupies 2 bytes memory
			<br></br><br></br>
			<code>unsigned short int</code> - has value range <red>[-32,768 to 65,535]</red> - format specifier <code>%hu</code> - 
			occupies 2 bytes memory
			<br></br><br></br>
			<code>unsigned int</code> - has value range <red>[0 to 4,294,967,295]</red> - format specifier <code>%u</code> - 
			occupies 4 bytes memory
			<br></br><br></br>
			<code>int</code> - has value range <red>[-2,147,483,648 to 2,147,483,647]</red> - format specifier <code>%d</code> - 
			occupies 4 bytes memory
			<br></br><br></br>
			<code>long int</code> - has value range <red>[-2,147,483,648 to 2,147,483,647]</red> - 
			format specifier <code>%ld</code> - occupies 4 bytes memory
			<br></br><br></br>
			<code>unsigned long int</code> - has value range <red>[0 to 4,294,967,295 ]</red> - format specifier <code>%lu</code> -
			occupies 4 bytes memory
			<br></br><br></br>
			<code>long long int</code> - has value range <red>[-(2^63) to (2^63)-1]</red> - format specifier <code>%lld</code> - 
			occupies 8 bytes memory
			<br></br><br></br>
			<code>unsigned long long int</code> - has value range <red>[-(2^63) to 18,446,744,073,709,551,615 ]</red> - 
			format specifier <code>%llu</code>  - occupies 8 bytes memory
			<br></br><br></br>
			<code>signed char</code> - has value range <red>[-128 to 127]</red> - format specifier <code>%c</code> - occupies 1 
			byte memory
			<br></br><br></br>
			<code>unsigned char</code> - has value range <red>[0 to 255]</red> - format specifier <code>%c</code> - occupies 1 
			byte memory
			<br></br><br></br>
			<code>float</code> - has value range <red>[1.2E-38 to 3.4E+38]</red> - format specifier <code>%f</code> - occupies 
			4 byte memory
			<br></br><br></br>
			<code>double</code> - has value range <red>[1.7E-308 to 1.7E+308]</red> - format specifier <code>%lf</code> - 
			occupies 8 byte memory
			<br></br><br></br>
			<code>long double</code> - has value range <red>[3.4E-4932 to 1.1E+4932]</red> - format specifier <code>%Lf</code>  - 
			occupies 16 byte memory
		</simple-data-types>
		<complex-data-types>
			Derived Data Types<br></br><br></br>
			Data types that are derived from fundamental data types are derived types. For example: arrays, pointers, function types, structures, etc.
			<br></br><br></br>
			We will learn about these derived data types in later tutorials.
			<br></br><br></br>
			<code>bool type</code><br></br>
			<code>Enumerated type / Enums</code><br></br>
			<code>Complex types</code><br></br>
			<code>Arrays: A collection of elements of the same data type.</code><br></br>
			<code>Pointers: A variable that stores the memory address of another variable.</code><br></br>
			<code>Structures: A collection of variables of different data types grouped 
			together under a single name.</code><br></br>
			<code>Unions: A special type of structure that can store only one value at a time.</code><br></br>
			<code>Typedefs: A way to create a new name for an existing data type to improve code 
			readability and maintainability.</code><br></br>
			<code>void - used to indicate an empty data type, usually used with pointers</code><br></br>
		</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>C++</name>
		<description>
			C++ is a high-level, general-purpose programming language created by 
			Danish computer scientist Bjarne Stroustrup. <br></br><br></br>
			First released in 1985 as an extension of the C programming language, 
			it has since expanded significantly over time; as of 1997, C++ has object-oriented, 
			generic, and functional features, in addition to facilities for low-level memory 
			manipulation for making things like microcomputers or to make operating systems 
			like Linux or Windows. <br></br><br></br>
			
			It is almost always implemented as a compiled language, 
			and many vendors provide C++ compilers, including the Free Software Foundation, 
			LLVM, Microsoft, Intel, Embarcadero, Oracle, and IBM.
		</description>
		<oop>C++ OOP</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>C#</name>
		<description>
			C# is a general-purpose high-level programming language supporting multiple 
			paradigms. C# encompasses static typing, strong typing, lexically scoped, 
			imperative, declarative, functional, generic, object-oriented (class-based), 
			and component-oriented programming disciplines. <br></br><br></br>

			The C# programming language was designed by Anders Hejlsberg from Microsoft in 
			2000. <br></br><br></br>

			Microsoft introduced C# along with .NET Framework and Visual Studio, both of 
			which were closed-source. At the time, Microsoft had no open-source products. 
			<br></br><br></br>

			Four years later, in 2004, a free and open-source project called Mono began, 
			providing a cross-platform compiler and runtime environment for the C# 
			programming language. <br></br><br></br>

			A decade later, Microsoft released Visual Studio Code (code editor), 
			Roslyn (compiler), and the unified .NET platform (software framework), 
			all of which support C# and are free, open-source, and cross-platform. 
			Mono also joined Microsoft but was not merged into .NET.<br></br><br></br>
		</description>
		<oop>C# OOP</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>JavaScript</name>
		<description>
			JavaScript often abbreviated as JS, is a programming language and core 
			technology of the Web, alongside HTML and CSS. 99% of websites use JavaScript 
			on the client side for webpage behavior.<br></br><br></br>

			Web browsers have a dedicated JavaScript engine that executes the client code. 
			These engines are also utilized in some servers and a variety of apps. The most 
			popular runtime system for non-browser usage is Node.js.<br></br><br></br>

			JavaScript is a high-level, often just-in-time compiled language that conforms 
			to the ECMAScript standard. It has dynamic typing, prototype-based 
			object-orientation, and first-class functions. It is multi-paradigm, 
			supporting event-driven, functional, and imperative programming styles. 
			It has application programming interfaces (APIs) for working with text, dates, 
			regular expressions, standard data structures, and the Document Object Model (DOM).
		</description>
		<oop>
		</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>Java</name>
		<description>
			Java is a high-level, class-based, object-oriented programming language that is 
			designed to have as few implementation dependencies as possible.<br></br><br></br>
			It is a general-purpose programming language intended to let programmers write once, 
			run anywhere meaning that compiled Java code can run on all platforms that support 
			Java without the need to recompile. <br></br><br></br>
			
			Java applications are typically compiled to bytecode that can run on any 
			Java virtual machine (JVM) regardless of the 
			underlying computer architecture. The syntax of Java is similar to C and C++, 
			but has fewer low-level facilities than either of them. The Java runtime provides 
			dynamic capabilities (such as reflection and runtime code modification) that are 
			typically not available in traditional compiled languages.
		</description>
		<oop>Java OOP</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
	<programming_language>
		<name>Python</name>
		<description>
			Python is a high-level, general-purpose programming language. Its design 
			philosophy emphasizes code readability with the use of significant indentation.
			<br></br><br></br>

			Python is dynamically typed and garbage-collected. It supports multiple 
			programming paradigms, including structured (particularly procedural), 
			object-oriented and functional programming. It is often described as a 
			"batteries included" language due to its comprehensive standard library.
		
		</description>
		<oop>Python OOP</oop>
		<encapsulation>Not present</encapsulation>
		<polymorphism>Not present</polymorphism>
		<inheritance>Not present</inheritance>
		<abstraction>Not present</abstraction>
		<generic-programming>Not present</generic-programming>
		<variable-arguments-lists>Not present</variable-arguments-lists>
		<simple-data-types>Not present</simple-data-types>
		<complex-data-types>Not present</complex-data-types>
		<loops>Not present</loops>
		<collections>Not present</collections>
		<collection-methods>Not present</collection-methods>
		<dynamic-memory-allocation>Not present</dynamic-memory-allocation>
		<read-from-file>Not present</read-from-file>
		<write-to-file>Not present</write-to-file>
		<serialization>Not present</serialization>
		<deserialization>Not present</deserialization>
		<constructors>Not present</constructors>
		<instantiation>Not present</instantiation>
		<destructors>Not present</destructors>
		<function-overloading>Not present</function-overloading>
		<operator-overloading>Not present</operator-overloading>
		<enums>Not present</enums>
		<multi-threading>Not present</multi-threading>
		<namespaces>Not present</namespaces>
		<exception-handling>Not present</exception-handling>
		<bitwise-operators>Not present</bitwise-operators>
		<default-parameters>Not present</default-parameters>
		<interfaces>Not present</interfaces>
		<macros>Not present</macros>
		<defines>Not present</defines>
		<random-generators>Not present</random-generators>
		<command-line-arguments>Not present</command-line-arguments>
		<ternary-operator>Not present</ternary-operator>
		<modular-programming>Not present</modular-programming>
		<string-methods>Not present</string-methods>
		<datatype-conversions>Not present</datatype-conversions>
		<optional-parameters>Not present</optional-parameters>
		<partial-classes>Not present</partial-classes>
		<decorators>Not present</decorators>
		<operators>Not present</operators>
		<pre-post-incrementation>Not present</pre-post-incrementation>
		<datatypes-sizing>Not present</datatypes-sizing>
		<regular-expressions>Not present</regular-expressions>
	</programming_language>
	
</content>
