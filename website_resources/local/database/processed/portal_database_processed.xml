<?xml version="1.0" encoding="UTF-8"?>

<content>
    <manifest>
        <name>General-Programming-Knowledge</name>
        <oop><red>OOP</red> stands for <red>Object</red>-<red>Oriented</red> <red>Programming</red>.
            <br/><br/>
            <red>Procedural</red> <red>programming</red> is about <azure>writing</azure> <red>procedures</red> or <red>functions</red> 
            that perform <purple>operations</purple> on the <purple>data</purple>, 
            while <red>object</red>-<red>oriented</red> <red>programming</red> is about <azure>creating</azure> <red>objects</red> that contain both 
            <purple>data</purple> and <red>functions</red>.
            <br/><br/>
            <green>
            Object-oriented programming has several advantages over procedural programming:
            </green>
            <br/><br/>
            
            <red>OOP</red> is faster and easier to execute;<br/>
            <red>OOP</red> provides a clear <purple>structure</purple> for the programs;<br/>
            <red>OOP</red> helps to keep the <azure>code</azure> DRY "Don't Repeat Yourself", and makes the <azure>code</azure> 
            easier to <azure>maintain</azure>, modify and debug;<br/>
            <red>OOP</red> makes it possible to <azure>create</azure> full <azure>reusable</azure> applications with less <azure>code</azure> and 
            shorter development time;
            
            <br/><br/>
            
            Tip: The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition 
            of <azure>code</azure>. <br/>
            You should extract out the <azure>codes</azure> that are common for the application, 
            and place them at a single place and <azure>reuse</azure> them instead of repeating it.
            
            <br/><br/>
            <green>Terminology:</green>
            <br/><br/>
            <brown>Classes:</brown>
            <br/><br/>
            A <red>class</red> is a user-defined <red>prototype</red> for an <red>object</red> that defines a <purple>set</purple> 
            of <purple>attributes</purple> that 
            characterize any <red>object</red>/<red>instance</red> of the <red>class</red>.
            <br/><br/>
            <brown>Attributes:</brown>
            <br/><br/>
            The <purple>attributes</purple> are <purple>data</purple> <purple>members</purple> (<red>class</red> <purple>variables</purple> and 
            <red>instance</red> <purple>variables</purple>) and <red>methods</red>, accessed using the <code>.</code> <purple>operator</purple>.
            The <purple>attributes</purple> are also refered to as: <purple>fields</purple>/<purple>variables</purple> and <red>methods</red>/<purple>properties</purple>.
            <br/><br/>
            <brown>Class variables:</brown>
            <br/><br/>
            A <red>class</red> <purple>variable</purple> is a <purple>variable</purple> that is <azure>shared</azure> by all <red>instances</red> 
            of a <red>class</red>.
            <br/>
            <red>Class</red> <purple>variables</purple> are defined within a <red>class</red> but 
            outside any of any <red>class</red> <red>method</red>. 
            <br/>
            Typically in <red>OOP</red> <red>languages</red> <red>class</red> <purple>variables</purple> are 
            defined using the <purple>static</purple> keyword.
            <br/>
            <red>Class</red> <purple>variables</purple> are not used as frequently as <red>instance</red> <purple>variables</purple>.
            <br/><br/>
            <brown>Instance variables:</brown>
            <br/><br/>
            An <red>instance</red> <purple>variable</purple> is a non-<purple>static</purple> <purple>variable</purple> that is defined 
            inside a <red>class</red> and belongs only to the current <red>instance</red> of a 
            <red>class</red>. <red>Instance</red> <purple>variables</purple>
            can be refered to by using this keyword in <red>languages</red> such as: <red>C++</red>, <red>C#</red>, <red>Java</red>,
            <red>JavaScript</red> or by using self keyword in <red>Python</red>.
            <br/><br/>
            <brown>Data member:</brown>
            <br/><br/>
            A <purple>data</purple> <purple>member</purple> is a <red>class</red> <purple>variable</purple> or <red>instance</red> <purple>variable</purple> that 
            holds <purple>data</purple> associated 
            with a <red>class</red> and its <red>objects</red>.
            <br/><br/>
            <brown>Function overloading:</brown>
            <br/><br/>
            <red>Function</red> <red>overloading</red> is the assignment of more than one behavior to a 
            particular <red>function</red>.
            The <purple>operation</purple> performed varies by the <purple>types</purple> of <red>objects</red> or <red>arguments</red> involved.
            <br/><br/>
            <brown>Instance:</brown>
            <br/><br/>
            An <red>instance</red> is an individual <red>object</red> of a certain <red>class</red>. 
            An <red>instance</red> of an <red>object</red> is <azure>created</azure>
            by involking the <red>constructor</red> of the <red>object</red>. 
            The <azure>process</azure> of <azure>creating</azure> an <red>object</red> is 
            called
            instanciation or <red>instancing</red>.
            <br/><br/>
            <brown>Method:</brown>
            <br/><br/>
            A <red>method</red> is another name given to a <red>function</red> that is defined 
            within a <red>class</red> definition. <red>Methods</red>
            can also belong to the <red>class</red> or to the <red>instance</red>.
            <br/><br/>
            <brown>Object:</brown>
            <br/><br/>
            An <red>instance</red> of the <red>class</red> is also called as an <red>object</red>.
            An <red>object</red> is a <purple>data</purple> <purple>structure</purple> that's defined by its <red>class</red>.
            <br/>
            An <red>object</red> comprises from both <purple>data</purple> <purple>members</purple> (<red>class</red> <purple>variables</purple> 
            and <red>instance</red> <purple>variables</purple>) and <red>methods</red>.
            <br/><br/>
            <brown>Operator overloading:</brown>
            <br/><br/>
            The assignment of more than one <red>function</red> to a particular 
            <purple>operator</purple> is called <purple>operator</purple> 
            <red>overloading</red>. Via <purple>operator</purple> <red>overloading</red>, an <purple>operator</purple> can be customized
            so that it produces the desired behaviour on complex <purple>data</purple> <purple>types</purple> such as 
            <red>objects</red>.
            <br/><br/>
            <green>Class members vs. Instance members:</green>
            <br/><br/>
            A <purple>member</purple> is either a <purple>variable</purple> or a <red>method</red>. 
            A <red>method</red> belonging to the <red>class</red> is
            defined in most <red>OOP</red> <red>languages</red> by using the <purple>static</purple> keyword.
            <br/><br/>
            <red>Class</red> <red>methods</red> or <purple>variables</purple>
            cannot be refered to by using this or self keywords. 
            <br/><br/>
            <red>Class</red> <red>methods</red> and <purple>variables</purple> can be accessed without an 
            <red>instance</red>
            of the <red>class</red> by using the name of the <red>class</red> followed by the 
            . <purple>operator</purple>.
            <br/><br/>
            <red>Class</red> <purple>members</purple> cannot be combined with <red>instance</red> <purple>members</purple>. 
            Meaning we cannot have a <red>class</red> <red>method</red>
            that would access an <red>instance</red> <purple>member</purple>. 
            <br/><br/>
            <red>Class</red> <red>methods</red> cannot directly access <red>instance</red> <purple>variables</purple> 
            and <red>instance</red> <red>methods</red> but the reversed way is possible: 
            <red>instance</red> <red>methods</red> can access <red>class</red> <purple>variables</purple> and 
            <red>class</red> <red>methods</red> directly.
            <br/><br/>
            <green>OOP Concepts:</green>
            <br/><br/>
            Typically an <red>object</red>-<red>oriented</red> <red>programming</red> <red>language</red> 
            has 4 fundamental concepts:
            <br/><br/>
            
            1. <red>Inheritance</red><br/>
            2. <red>Polymorphism</red><br/>
            3. <red>Encapsulation</red><br/>
            4. <azure>Abstraction</azure><br/>
            
            <br/></oop>
        <encapsulation>The meaning of <red>Encapsulation</red>, is to make sure that "sensitive" <purple>data</purple> is hidden from 
            users.<br/><br/> 
            To achieve this, you must declare <red>class</red> <purple>variables</purple>/<purple>attributes</purple> as <code>private</code> 
            (cannot be accessed from outside the <red>class</red>). <br/><br/>
            If you want others to <azure>read</azure> or modify 
            the <purple>value</purple> of a <code>private</code> <purple>member</purple>, you can provide <code>public</code> get and 
            <purple>set</purple> <red>methods</red>.<br/>
            <br/>
            <green>
            Conventions:
            </green>
            <br/><br/>
            
            - good programmers use <purple>private</purple> <purple>fields</purple> for a <red>class</red>. 
            (A <purple>field</purple> is a <purple>variable</purple> declared in the <red>class</red>)
            <br/>
            - good programmers use at least a <red>constructor</red> for a <red>class</red>. 
            (And that <red>constructor</red> is used to initialize the
            <purple>fields</purple>.)
            <br/>
            - good programmers use <red>encapsulation</red> for controling the <purple>value</purple> 
            that get in or get out from the <purple>fields</purple>
            <br/>
            - a <red>method</red> inside a <red>class</red> is also called 
            <purple>property</purple> of the <red>class</red>, 
            there can be <purple>public</purple> or <purple>private</purple> <purple>properties</purple>
            
            <br/><br/>
            <red>Encapsulation</red> is one of the 4 <red>OOP</red> fundamental concepts.
            <br/></encapsulation>
        <polymorphism><red>Polymorphism</red> means "many forms", and it occurs when we have many 
            <red>classes</red> that are related to each other by <red>inheritance</red>.
            <br/><br/>
            <red>Polymorphism</red> is the act of <azure>creating</azure> a <purple>collection</purple> of different 
            <red>object</red> <purple>types</purple> which are <red>inherited</red> from the same 
            <red>base</red> <red>class</red>. 
            <br/><br/>
            A <red>polymorphic</red> <purple>type</purple> is one whose <purple>operations</purple> can also be 
            applied to <purple>values</purple> of some other <purple>type</purple>, or <purple>types</purple>. 
            When calling a <red>virtual</red> <red>function</red> from any 
            <azure>derived</azure> <red>class</red> the <red>overrided</red> <red>method</red> will be invoked not the 
            original one.
            <br/><br/>
            <green>There are several fundamentally different kinds of polymorphism:</green>
            <br/><br/>
            <red>Ad</red> <red>hoc</red> <red>polymorphism</red>: when a <red>function</red> has different <red>implementations</red> 
            depending on a limited range of individually specified <purple>types</purple> 
            and combinations. 
            <br/><br/>
            <red>Ad</red> <red>hoc</red> <red>polymorphism</red>: is supported in many <red>languages</red> using 
            <red>function</red> <red>overloading</red>.
            <br/><br/>
            <red>Parametric</red> <red>polymorphism</red>: when the <azure>code</azure> is written without 
            mention of any specific <purple>type</purple> and thus can be used transparently with any 
            number of new <purple>types</purple>. 
            In the <red>object</red>-<red>oriented</red> <red>programming</red> community, this is often known as 
            <red>generics</red> or <red>generic</red> <red>programming</red>.
            <br/>
            In the <red>functional</red> <red>programming</red> community, 
            this is often shortened to <red>polymorphism</red>. 
            <br/><br/>
            <purple>Subtyping</purple> (also called <purple>subtype</purple> <red>polymorphism</red> or 
            inclusion <red>polymorphism</red>): when a name denotes <red>instances</red> of 
            many different <red>classes</red> related by some common superclass.
            <br/><br/>
            <red>Polymorphism</red> is one of the 4 <red>OOP</red> fundamental concepts.
            <br/></polymorphism>
        <simple-data-types>In <red>programming</red>, <purple>data</purple> <purple>type</purple> refers to the <purple>type</purple> of <purple>value</purple> a <purple>variable</purple> 
            as and what <purple>type</purple> of <purple>mathematical</purple>, <purple>relational</purple> or <purple>logical</purple> <purple>operations</purple> can be applied 
            without causing an error.
            <br/><br/>
            A <purple>data</purple> <purple>type</purple> is an <purple>attribute</purple> associated with a piece of 
            <purple>data</purple> (<purple>variable</purple>) that tells a <red>computer</red> <red>system</red> how to interpret its <purple>value</purple>.
            <br/><br/>
            <green>Data-types in Programming:</green>
            <br/><br/>
            <code>short int</code><br/>
            - has <purple>value</purple> range <code>[-32,768 to 32,767]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%hd</code>;<br/>
            - occupies <code>2 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>unsigned short int</code><br/>
            - has <purple>value</purple> range <code>[-32,768 to 65,535]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%hu</code>;<br/>
            - occupies <code>2 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>unsigned int</code><br/>
            - has <purple>value</purple> range <code>[0 to 4,294,967,295]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%u</code>;<br/>
            - occupies <code>4 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>int</code><br/>
            - has <purple>value</purple> range <code>[-2,147,483,648 to 2,147,483,647]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%d</code>;<br/>
            - occupies <code>4 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>long int</code><br/> 
            - has <purple>value</purple> range <code>[-2,147,483,648 to 2,147,483,647]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%ld</code>;<br/>
            - occupies <code>4 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>unsigned long int</code><br/>
            - has <purple>value</purple> range <code>[0 to 4,294,967,295 ]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%lu</code>;<br/>
            - occupies <code>4 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>long long int</code><br/>
            - has <purple>value</purple> range <code>[-(2^63) to (2^63)-1]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%lld</code>;<br/>
            - occupies <code>8 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>unsigned long long int</code><br/>
            - has <purple>value</purple> range <code>[-(2^63) to 18,446,744,073,709,551,615 ]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%llu</code>;<br/>
            - occupies <code>8 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>signed char</code><br/>
            - has <purple>value</purple> range <code>[-128 to 127]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%c</code>;<br/>
            - occupies <code>1 byte</code> <azure>memory</azure>;
            <br/><br/>
            <code>unsigned char</code><br/>
            - has <purple>value</purple> range <code>[0 to 255]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%c</code><br/>
            - occupies <code>1 byte</code> <azure>memory</azure>;
            <br/><br/>
            <code>float</code><br/>
            - has <purple>value</purple> range <code>[1.2E-38 to 3.4E+38]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%f</code>;<br/>
            - occupies <code>4 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>double</code><br/>
            - has <purple>value</purple> range <code>[1.7E-308 to 1.7E+308]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%lf</code>;<br/>
            - occupies <code>8 bytes</code> <azure>memory</azure>;
            <br/><br/>
            <code>long double</code><br/>
            - has <purple>value</purple> range <code>[3.4E-4932 to 1.1E+4932]</code>;<br/>
            - <purple>format</purple> <purple>specifier</purple> <code>%Lf</code>;<br/>
            - occupies <code>16 bytes</code> <azure>memory</azure>;</simple-data-types>
        <complex-data-types>In <red>Programming</red>, a <purple>data</purple> <purple>type</purple> is an <purple>attribute</purple> associated with a 
            piece of <purple>data</purple> that tells a <red>computer</red> <red>system</red> how to 
            interpret its <purple>value</purple>. <br/>
            <br/>
            <green>
                Data types that are derived from fundamental data types:
            </green>
            <br/><br/>
            <code>bool type</code> - The <purple>bool</purple> <purple>type</purple> is a <purple>byte</purple>-<purple>sized</purple> <purple>type</purple> that can only hold the <purple>value</purple> <purple>true</purple> or <purple>false</purple>.<br/><br/>
            <code>Enumerated type / Enums</code> - An <code>enum</code> is a special <purple>type</purple> that represents a group of <purple>constants</purple> 
            (unchangeable <purple>values</purple>).
            <br/><br/>
            <code>Arrays</code> - A <purple>collection</purple> of elements of the same <purple>data</purple> <purple>type</purple>. <br/>
            These entities or elements can be of <code>int</code>, <code>float</code>, <code>char</code>, or <code>double</code> 
            <purple>data</purple> <purple>type</purple> or can be of <code>user-defined</code> <purple>data</purple> <purple>types</purple> such as    like <code>structures</code>.
            <br/><br/>
            
            The <purple>size</purple> of an <purple>array</purple> can be calculated by multiplying the <code>data-type * numberOfElements</code> within the <purple>array</purple>.
            
            <br/><br/>
            <code>Pointers</code> - A <purple>variable</purple> that <azure>stores</azure> the <azure>memory</azure> <purple>address</purple> of another <purple>variable</purple>. 
            <br/>
            The <purple>size</purple> of a <purple>pointer</purple> varies depending on factors such as the <purple>operating</purple> <red>system</red> and <azure>CPU</azure> 
            architecture.<br/><br/>
            
            Typically, on a <code>32-bit</code> <red>computer</red> <red>system</red>, the <purple>size</purple> of <purple>pointer</purple> is <code>4 bytes</code>,    
            while on a <code>64-bit</code> <red>computer</red> <red>system</red>, it is <code>8 bytes</code>.
            
            <br/><br/>
            <code>Structures</code> - A <purple>collection</purple> of <purple>variables</purple> of different <purple>data</purple> <purple>types</purple> grouped 
            together under a single name. 
            <br/><br/>
            
            The <purple>size</purple> of a <code>struct</code> can be calculated by summing up the <purple>size</purple> of all the element <purple>data</purple>-<purple>types</purple>.
            
            <br/><br/>
            <code>Unions</code> - A special <purple>type</purple> of <purple>structure</purple> that can <azure>store</azure> only one <purple>value</purple> at a time. <br/><br/>
            
            The <purple>size</purple> of the <code>union</code> is equal to the <purple>size</purple> of the largest element defined within the <purple>union</purple>.
            
            <br/><br/>
            <code>Typedefs</code> - A way to <azure>create</azure> a new name for an existing <purple>data</purple> <purple>type</purple> to improve <azure>code</azure> 
            <azure>readability</azure> and <azure>maintainability</azure>.<br/><br/>
            <code>void</code> - It's used to indicate an empty <purple>data</purple> <purple>type</purple>, usually used with <purple>pointers</purple>.<br/></complex-data-types>
        <loops>In <red>computer</red> <red>programming</red>, a <azure>loop</azure> is a <azure>sequence</azure> of instructions that is 
            continually repeated until a certain <azure>condition</azure> is reached. 
            <br/><br/>
            Typically, a certain <azure>process</azure> is done, such as getting an item of <purple>data</purple> 
            and changing it, and then some <azure>condition</azure> is checked such as whether a 
            <azure>counter</azure> has reached a prescribed number.
            <br/><br/>
            <green>
            For, while, do-while loops:
            </green>
            <br/><br/>
            <brown>While loop:</brown><br/><br/>
            <azure>While</azure> <azure>loop</azure> does not depend upon the number of <purple>iterations</purple>. 
            <br/>
            If the test <azure>condition</azure> will 
            become <purple>false</purple> then it will <purple>break</purple> from the <azure>while</azure> <azure>loop</azure> else body will be executed.
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*While loop syntax: */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int counter = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while(counter &lt; 5)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*code goes here*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     counter++;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <brown>For loop:</brown><br/><br/>
            <azure>For</azure> <azure>loop</azure> uses a <azure>loop</azure> <purple>variable</purple> to control the <azure>loop</azure>. 
            <br/><br/>
            Firstly the <azure>loop</azure> <purple>variable</purple> is initialized with some <purple>value</purple>.<br/>
            Then its test <azure>condition</azure> is checked. 
            <br/><br/>
            If the 
            <azure>statement</azure> is <purple>true</purple> then control will move to the body and the body of for 
            <azure>loop</azure> will be executed. 
            <br/>
            Steps will be repeated untill the test <azure>condition</azure> becomes <purple>false</purple>. 
            <br/>
            When the test <azure>condition</azure> will be <purple>false</purple> the <azure>loop</azure> will exit.
            <br/><br/>
            
            <red>Initialization</red> <red>Expression</red>: In this expression, we <purple>assign</purple> a <azure>loop</azure> <purple>variable</purple> 
            or <azure>loop</azure> <azure>counter</azure> to some <purple>value</purple>. <br/>
            Example: <code>int counter=1;</code>
            <br/><br/>
            
            <red>Test</red> <red>Expression</red>: In this expression, test <azure>conditions</azure> are performed.
            <br/>            
            If the <azure>condition</azure> evaluates to <purple>true</purple> then the <azure>loop</azure> body will be executed and 
            then an <azure>update</azure> of the <azure>loop</azure> <purple>variable</purple> is done. 
            <br/>
            If the <red>test</red> <red>expression</red> becomes 
            <purple>false</purple> then the control will exit from the <azure>loop</azure>. <br/>
            Example: <code>counter&lt;5;</code>
            <br/><br/>
            
            <red>Update</red> <red>Expression</red>: After execution of the <azure>loop</azure> body <azure>loop</azure> <purple>variable</purple> is <azure>updated</azure> 
            by some <purple>value</purple>. <br/>
            It could be <purple>incremented</purple>, <purple>decremented</purple>, multiplied, or divided by 
            any <purple>value</purple>. <br/>
            Example: <code>counter++;</code><br/><br/>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*For loop syntax: */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for(int counter = 0; counter &lt; 5; counter++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*code goes here*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>        
            <brown>Do-while loop:</brown><br/><br/>
            The <azure>do</azure>-<azure>while</azure> <azure>loop</azure> is similar to a <azure>while</azure> <azure>loop</azure> but the only difference 
            lies in the <azure>do</azure>-<azure>while</azure> <azure>loop</azure> test <azure>condition</azure> which is tested at the end of 
            the body. <br/>
            In the <azure>do</azure>-<azure>while</azure> <azure>loop</azure>, the <azure>loop</azure> body will execute at least once 
            irrespective of the test <azure>condition</azure>.<br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Do while loop syntax: */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">do</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*code goes here*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     counter++;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while(counter &lt; 5)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></loops>
        <dynamic-memory-allocation><azure>Dynamic</azure> <azure>memory</azure> is <azure>allocated</azure> from the <purple>heap</purple> using some standard <purple>library</purple> <red>functions</red>. 
            The two <azure>dynamic</azure> <azure>memory</azure> <purple>key</purple> <red>functions</red> are <code>malloc()</code> and <code>free()</code>. 
            <br/><br/>
            The <code>malloc()</code> <red>function</red> takes a single <red>parameter</red>, which is the <purple>size</purple> of the requested <azure>memory</azure> 
            area in <purple>bytes</purple>. <br/>
            It <purple>returns</purple> a <purple>pointer</purple> of <purple>type</purple> <purple>void</purple> which 
            can be <purple>cast</purple> into a <purple>pointer</purple> of any form. 
            <br/><br/>
            
            It doesn’t initialize the <azure>memory</azure> at execution time.<br/>
            So each <azure>block</azure> will initially have a <azure>default</azure> <purple>garbage</purple> <purple>value</purple>. 
            
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of dynamic memory allocation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdlib.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;conio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int *A;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int i;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    Prototype: void *malloc(size_t size);</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    A=(int *)malloc(20*sizeof(int)); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// malloc return a void pointer that needs to be converted</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//into a pointer to however the type of the variable that uses it has. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//(int *) - is the type of pointer A</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//20 = the number of memory cells allocated;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (i=0;i&lt;20;i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printf("A[%d]=%d\n", i, A[i]); <comment>//the value in each memory cell can be anything</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    free(A);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <red>Calloc</red> <red>function</red> <azure>allocates</azure> the requested <azure>memory</azure> and <purple>returns</purple> a <purple>pointer</purple> to it similarly to <red>malloc</red>. 
            <br/><br/>
            The <code>malloc()</code> and <code>calloc()</code> do differentiate in how the <red>functions</red> are used when <azure>allocating</azure> 
            <azure>memory</azure> at runtime. <br/><br/>
            The <code>malloc()</code> <red>function</red> only <purple>returns</purple> the <azure>starting</azure> <purple>address</purple>, it doesn't zero it.
            <br/>            
            On the other hand, the <code>calloc()</code> <red>function</red> <purple>returns</purple> the <azure>starting</azure> <purple>address</purple>, zeroing it.
            <br/>    
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Prototype void *calloc(size_t nitems, size_t size)*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">A=(int *)calloc(20, sizeof(int)); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//calloc does the same as malloc while initializing all elements to 0:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for (i=0;i&lt;20;i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("A[%d]=%d\n", i ,A[i]); <comment>//the value in each memory cell is 0</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">free(A); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//free is used to free the allocated memory. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//There is no delete() in C language.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></dynamic-memory-allocation>
        <serialization><azure>Serialization</azure> is the <azure>process</azure> of converting a <purple>data</purple> <red>object</red> (a combination of <azure>code</azure> and <purple>data</purple> 
            represented within a region of <purple>data</purple> storage) into a series of <purple>bytes</purple> that <azure>saves</azure> the state 
            of the <red>object</red> in an easily transmittable form.<br/><br/></serialization>
        <deserialization><azure>Deserialization</azure> is the <azure>process</azure> of reconstructing a <purple>data</purple> <purple>structure</purple> or <red>object</red> from a series 
            of <purple>bytes</purple> or a <purple>string</purple> in order to <red>instantiate</red> the <red>object</red> for consumption. 
            <br/><br/>
            This is the 
            reverse <azure>process</azure> of <azure>serialization</azure>, i.e., converting a <purple>data</purple> <purple>structure</purple> or <red>object</red> into a 
            series of <purple>bytes</purple> for storage or transmission across devices.<br/></deserialization>
        <enums><purple>Enumeration</purple> (or <code>enum</code>) is a user defined <purple>data</purple> <purple>type</purple>. <br/>
            It is mainly used to 
            <purple>assign</purple> names to integral <purple>constants</purple>, the names make a program easy to <azure>read</azure> and <azure>maintain</azure>.
            <br/><br/></enums>
        <concurrent-programming><red>Concurrent</red> <red>Programming</red> is a technique in which two or more 
            <azure>processes</azure> <azure>start</azure>, <azure>run</azure> in an interleaved fashion through context switching 
            and complete in an overlapping time period by managing access to 
            <azure>shared</azure> resources e.g. on a single <azure>core</azure> of <azure>CPU</azure>.
            <br/><br/>
            This doesn’t necessarily mean that multiple <azure>processes</azure> will be running 
            at the same instant – even if the results might make it seem like it.
            <br/><br/>
            <red>Concurrent</red> <red>Programming</red> can be clasified as <azure>asynchronous</azure> if it enables <purple>operations</purple> 
            to be executed without waiting for previous <azure>tasks</azure> to complete. For <red>instance</red>, if we have 2 <azure>processes</azure>, 
            one that
            <azure>retrieves</azure> some information from a <azure>server</azure> and the other one which <purple>sets</purple> up an environment where the <azure>retrieved</azure> 
            information should be displayed, it cannot be considered <azure>asynchronous</azure> as there is a scenario 
            in which the <azure>process</azure>
            of setting up the environment is faster than the <azure>process</azure> of <azure>retrieving</azure> the information from 
            the <azure>server</azure>, case in which
            one <azure>process</azure> has to wait for the other to finish and this would 
            classify it <azure>synchronous</azure>.
            <br/><br/>
            <azure>Blocking</azure> in <azure>asynchronous</azure> <red>programming</red> is when a website or browser is no longer able to 
            continue a <red>function</red> and can't perform any <azure>tasks</azure> until the <azure>processor</azure> regains control. 
            A frozen web page or application is a typical example of <azure>blocking</azure>. 
            <br/><br/>
            <red>Concurrent</red> <red>Programming</red> is an essential technique for design applications 
            that can execute <azure>tasks</azure> <azure>simultaneously</azure>, in order to increasing overall 
            <azure>efficiency</azure> and <azure>responsiveness</azure>.
            <br/><br/>
            <green>Asynchronous programming vs. synchronous programming</green>
            <br/><br/>
            Both <azure>asynchronous</azure> and <azure>synchronous</azure> <red>programming</red> involve similar concepts 
            within the broader <purple>field</purple> of <red>computer</red> <red>programming</red>. 
            <br/><br/>
            <azure>Synchronous</azure> or <azure>sequential</azure> <red>programming</red> is when <azure>tasks</azure> occur separately 
            or one after another. 
            The program pauses while the <red>system</red> performs the action and only responds once it receives 
            the result. It features a <azure>single</azure>-<azure>thread</azure> model, meaning that it only performs a 
            single action at a time.
            <br/><br/>
            <azure>Asynchronous</azure> <red>programming</red> differs in that it <azure>allows</azure> multiple <azure>tasks</azure> to <azure>run</azure> at the same time, 
            and the programmer can often manage these <azure>tasks</azure> directly. It <azure>allows</azure> programs to continue to <azure>run</azure> even after 
            you <azure>start</azure> a specific action.
            <br/><br/>
            <green>Concurency scenarios:</green>
            <br/><br/>
            <azure>Asynchrony</azure> - This means that your program performs non-<azure>blocking</azure> <purple>operations</purple>. 
            For example, it can initiate a request for a remote resource via HTTP and then go on to 
            do some other <azure>task</azure> while it waits for the response to be received. It’s a <purple>bit</purple> like when 
            you send an email and then go on with your life without waiting for a response.
            <br/><br/>
            <azure>Parallelism</azure> - This means that your program leverages the hardware of <azure>multi</azure>-<azure>core</azure> machines 
            to execute 
            <azure>tasks</azure> at the same time by <purple>breaking</purple> up work into <azure>tasks</azure>, each of which is executed on a separate <azure>core</azure>. 
            It’s a <purple>bit</purple> like singing in the shower: you’re actually doing two things at exactly the same time.
            <br/><br/>
            <azure>Multithreading</azure> - This is a software <red>implementation</red> <azure>allowing</azure> different <azure>threads</azure> to be executed 
            <red>concurrently</red>. A <azure>multithreaded</azure> program appears to be doing several things at the same time even 
            when it’s running on a <azure>single</azure>-<azure>core</azure> machine. This is a <purple>bit</purple> like chatting with different people 
            through various IM windows; although you’re actually switching back and forth, the net result 
            is that you’re having multiple conversations at the same time.
            <br/><br/>
            <green>Principles of concurrent Programming:</green>
            <br/><br/>
            The are some basic principles and concepts behind <red>concurrent</red> <red>programming</red>: 
            <br/><br/>
            <azure>Parallelism</azure>: <red>Concurrent</red> programs can <azure>run</azure> multiple <azure>processes</azure> or 
            <azure>threads</azure> <azure>simultaneously</azure>, 
            utilizing multiple <azure>processing</azure> units available in today's <red>computer</red> <red>systems</red>.
            <br/><br/>
            <azure>Non</azure>-<azure>determinism</azure>: Due to the unpredictable order of execution, 
            <red>concurrent</red> programs can 
            give different results on different <azure>runs</azure>, making debugging and testing more complex. 
            This concept arises from the uncertain order in which <azure>threads</azure> 
            or <azure>processes</azure> access <azure>shared</azure> resources and interact with each other.
            <br/><br/>
            <azure>Synchronization</azure>: <red>Concurrent</red> programs use <azure>synchronization</azure> mechanisms 
            to coordinate access to <azure>shared</azure> resources and ensure mutually exclusive 
            access or resource <purple>protection</purple> to prevent <purple>data</purple> inconsistency and 
            <azure>race</azure> <azure>conditions</azure>.
            <br/><br/>
            <green>Implementation Techniques:</green>
            <br/><br/>
            <red>Concurrent</red> <red>Programming</red> can be <red>implemented</red> through the use of 
            <azure>multithreading</azure> and <azure>multiprocessing</azure>.
            <br/><br/>
            A <azure>thread</azure> is a single <azure>sequence</azure> <azure>stream</azure> within a <azure>process</azure>.
            <br/><br/>
            A <azure>stream</azure> can be thought of as a path or channel, 
            through which the <purple>data</purple> is flowing in and out of the program.
            <br/><br/>
            Because <azure>threads</azure> have some of the <purple>properties</purple> of <azure>processes</azure>, 
            they are sometimes called lightweight <azure>processes</azure>.
            <br/><br/>
            <azure>Threads</azure> are not <azure>independent</azure> from each other unlike <azure>processes</azure>. 
            As a result, 
            <azure>threads</azure> <azure>share</azure> with other <azure>threads</azure> their <azure>code</azure> section, 
            <purple>data</purple> section and OS resources such as: <azure>opened</azure> <purple>files</purple> 
            and <azure>signals</azure>.
            <br/><br/>
            <azure>Signals</azure> are software generated interrupts that are sent to a <azure>process</azure> 
            when an event happens.
            <br/><br/>
            Similar to <azure>processes</azure>, a <azure>thread</azure> has its own program 
            <azure>counter</azure> (PC), a <purple>register</purple> <purple>set</purple>, and a <purple>stack</purple> <purple>space</purple>.
            <br/><br/>
            The program <azure>counter</azure> (also called "instruction <purple>pointer</purple>") is 
            part of the hardware; more specifically, it's a <azure>processor</azure> <purple>register</purple>. 
            The whole purpose of this <purple>register</purple> is 
            to <purple>point</purple> to the current instruction in the <azure>memory</azure> that is being executed by 
            the <azure>processor</azure>.
            <br/><br/>
            A <azure>process</azure> is the <red>instance</red> of a <red>computer</red> program that is being 
            executed by 
            one or many <azure>threads</azure>. By <azure>multiprocessing</azure> a program can be divided 
            into <azure>independent</azure> <azure>processes</azure>, which can <azure>run</azure> individually as 
            separate programs. This would <azure>allow</azure> the possibility to offload/distribute 
            these <azure>processes</azure> on separate <azure>cores</azure> which would increase performance.
            <br/><br/>
            <green>Understanding threading and processing:</green>
            <br/><br/>
            A <azure>CPU</azure> ( also called a central <azure>processing</azure> unit , main <azure>processor</azure>, 
            or just <azure>processor</azure>) is essentially the brain that <azure>processes</azure> and carries 
            out instructions. 
            <br/>
            <azure>CPUs</azure> come in many different varieties, such as 
            <azure>single</azure>-<azure>core</azure>, <azure>dual</azure>-<azure>core</azure>, 
            <azure>quad</azure>-<azure>core</azure>, and other <azure>multi</azure>-<azure>core</azure> <azure>processors</azure>.
            <br/><br/>
            <azure>Cores</azure> are physical <azure>processing</azure> units. The number of <azure>cores</azure> 
            in a <red>system</red> will determine how many programs and <azure>tasks</azure> it can 
            execute <azure>simultaneously</azure> (in <azure>parallel</azure>). 
            For <red>instance</red>, a <azure>single</azure>-<azure>core</azure> <azure>processor</azure> may be able to handle one <azure>task</azure> at a time. 
            By contrast, a <azure>quad</azure>-<azure>core</azure> <azure>processor</azure> could handle up to four 
            <azure>simultaneous</azure> <azure>tasks</azure>.
            <br/><br/>
            <azure>Threads</azure> are <red>virtual</red> <azure>sequences</azure> of instructions given to a <azure>CPU</azure>. 
            A <azure>thread</azure> is a <azure>sequence</azure> of instructions given to the <azure>CPU</azure> by a program 
            or application. The more <azure>threads</azure> a <azure>CPU</azure> can execute at once, the more 
            <azure>tasks</azure> 
            it can complete.
            <azure>Hyperthreading</azure> <azure>allows</azure> <azure>multi</azure>-<azure>core</azure> <azure>processors</azure> to execute two 
            <azure>thread</azure> <red>concurrently</red> on each <azure>core</azure>, meaning a 
            <azure>quad</azure>-<azure>core</azure> <azure>processor</azure> could execute up to 8 <azure>threads</azure> 
            (2 <azure>threads</azure> on each <azure>core</azure>).
            <br/><br/>
            A <azure>thread</azure> can be seen as a single-handed person performing one <azure>task</azure> at 
            a time. 
            Even with one <azure>thread</azure>
            we can <azure>run</azure> many programs <azure>simultaneous</azure> from our perspective, but from <azure>CPU's</azure> 
            perspective, these <azure>tasks</azure> are not <azure>simultaneous</azure>. The <azure>CPU</azure> has to switch the 
            <azure>thread</azure>
            between the <azure>tasks</azure> on every few microseconds, therefore
            moving its hand from doing one thing to doing the other thing so fast that a <red>real</red> person 
            would not be able to notice any difference. <br/>
            Example: the music doesn't stop playing when 
            <azure>writing</azure> the keyboard. 
            <br/><br/>
            By <azure>hyperthreading</azure>, the <azure>core</azure> gets a second hand available, 
            and can perform 
            2 <azure>simultaneous</azure> <azure>tasks</azure> but using the same the <azure>shared</azure> resources of the 
            <azure>core</azure>, 
            meaning it's slower than doing <azure>simultaneous</azure> <azure>tasks</azure> on different <azure>cores</azure>, 
            but faster than doing single <azure>tasks</azure> on one <azure>core</azure>. 
            <br/><br/>
            <azure>Multithreading</azure> refers to using multiple <azure>threads</azure> 
            (2 <azure>threads</azure>) 
            to one <azure>core</azure>.
            <azure>Multithreading</azure> <azure>allows</azure> for better utilization of available <red>system</red> resources by 
            dividing <azure>tasks</azure> into separate <azure>threads</azure> and running them in <azure>parallel</azure>.
            <azure>Hyperthreading</azure> further increases performance by <azure>allowing</azure> <azure>processors</azure> to 
            execute two 
            <azure>threads</azure> <red>concurrently</red>. 
            <br/><br/>
            <azure>Multiprocessing</azure> is the utilization of two or more central <azure>processing</azure> 
            units (<azure>CPUs</azure>) in achieving one <azure>task</azure>, meaning we can have 2 <azure>cores</azure> 
            running same program <azure>sharing</azure> among themselves <purple>data</purple>. 
            <br/>
            Similar to 2 workers working on 
            same <azure>task</azure>, passing around their tools from one to the other.
            <br/><br/>
            <green>Multithreading vs. multiprocessing:</green>
            <br/><br/>
            Both <azure>multithreading</azure> and <azure>multiprocessing</azure> give birth to few challenges 
            when it comes to <red>concurrent</red> <red>programming</red>.
            <br/><br/>
            <brown>The Race Condition:</brown>
            <br/><br/>
            A <azure>race</azure> <azure>condition</azure> occurs when two or more <azure>processes</azure>/<azure>threads</azure> 
            can access <azure>shared</azure> <purple>data</purple> and they try to change it at the same time. 
            As a result, the <purple>values</purple> of <purple>variables</purple> 
            may be unpredictable and vary depending on the timings of context switches 
            of the <azure>processes</azure>/<azure>threads</azure>.
            <br/><br/>
            <brown>Process/Thread Syncronization:</brown>
            <br/><br/>
            <azure>Process</azure> <azure>Synchronization</azure> and <azure>Thread</azure> <azure>Synchronization</azure> 
            are two mechanism defined for <red>concurrent</red> <red>programming</red> in order to ensure 
            that two or more <red>concurrent</red> <azure>processes</azure>/<azure>threads</azure> do not <azure>simultaneously</azure> execute 
            some particular program segment known as <azure>critical</azure> <azure>section</azure>.
            <br/><br/>
            A <azure>critical</azure> <azure>section</azure> refers to the parts of the 
            program where the <azure>shared</azure> resources are being accessed by different 
            <azure>threads</azure>/<azure>processes</azure>. So the 2 workers or the 2 hands 
            working on the same <azure>task</azure> collide to each other.
            <br/><br/>
            By using <azure>Process</azure> <azure>Synchronization</azure> and <azure>Thread</azure> <azure>Synchronization</azure> 
            the <azure>race</azure> <azure>condition</azure> can be avoided.
            <br/><br/>
            Both <azure>multithreading</azure> and <azure>multiprocessing</azure> can be used to 
            increase the <red>computing</red> power of a <red>system</red>, but there are some <purple>key</purple> differences between 
            these two approaches. 
            <br/><br/>
            <brown>
            Differences between Multithreading and Multiprocessing:
            </brown>
            <br/><br/>
            <azure>Multiprocessing</azure> uses two or more <azure>CPUs</azure> to increase <red>computing</red> power, 
            whereas 
            <azure>multithreading</azure> uses a single <azure>process</azure> with multiple 
            <azure>code</azure> segments to increase <red>computing</red> power.
            <br/><br/>
            <azure>Multithreading</azure> focuses on generating <red>computing</red> <azure>threads</azure> from a 
            single <azure>process</azure>, 
            whereas <azure>multiprocessing</azure> increases <red>computing</red> power by <azure>adding</azure> 
            <azure>CPUs</azure>. Meaning via <azure>multiprocessing</azure> we can distribute proccesses on 
            separate <azure>CPUs</azure>, whereas this is not possible with <azure>multithreading</azure>.
            <br/><br/>
            <azure>Multiprocessing</azure> is used to <azure>create</azure> a more reliable <red>system</red>, whereas 
            <azure>multithreading</azure> is used to <azure>create</azure> <azure>threads</azure> that <azure>run</azure> <azure>parallel</azure> to each other.
            <br/><br/>
            <azure>Multithreading</azure> is quick to <azure>create</azure> and requires few resources, 
            whereas <azure>multiprocessing</azure> 
            requires a significant amount of time and specific resources for its <azure>creation</azure>.
            <br/><br/>
            <azure>Multiprocessing</azure> executes many <azure>processes</azure> <azure>simultaneously</azure>, 
            whereas <azure>multithreading</azure> executes many <azure>threads</azure> <azure>simultaneously</azure>.
            <br/><br/>
            <azure>Multithreading</azure> uses a common <purple>address</purple> space for all 
            the <azure>threads</azure>, whereas 
            <azure>multiprocessing</azure> 
            <azure>creates</azure> a separate <purple>address</purple> space for each <azure>process</azure>.
            <br/><br/>
            In <azure>multiprocessing</azure> each <azure>process</azure> has its own <azure>memory</azure> 
            <purple>address</purple> space (<purple>stack</purple> <purple>memory</purple>). So when <purple>returning</purple> a <purple>value</purple>
            from a <azure>process</azure>, the <purple>value</purple> <purple>returned</purple> will not be 
            seen by the rest of the program unless it is <azure>saved</azure> in a <purple>file</purple>, in a 
            <azure>shared</azure> <azure>memory</azure> <purple>address</purple>, or in a message pipe, 
            whereas <azure>multithreading</azure> is able to <purple>return</purple> <purple>values</purple> which can be used 
            later in the main program.
            <br/>
            A pipe is a technique for passing information from one program <azure>process</azure> 
            to another.
            <br/><br/>
            A <azure>process</azure> is treated as an individual program, (it even <azure>creates</azure> a 
            <azure>process</azure> in the <azure>Task</azure> Manager).
            <azure>Processes</azure> can be sent through different <azure>cores</azure>, that would speed 
            up the program even more.
            <br/><br/>
            <azure>Creating</azure> multiple <azure>processes</azure> is costly <azure>compare</azure> to <azure>threads</azure>. 
            Since for each <azure>process</azure> there is <azure>allocated</azure> another <purple>stack</purple> <purple>memory</purple> 
            space.
            <br/><br/>
            <azure>Multithreading</azure> is recommended for IO (input/output) <purple>operations</purple> such as: 
            <purple>file</purple> inputting/outputting and http requests, whereas 
            <azure>multiprocessing</azure> is recommended for <azure>CPU</azure> intensive <purple>operations</purple> 
            such as: calculations.
            <br/><br/>
            <green>Advantages of multithreading:</green>
            <br/><br/>
            1. It requires less <azure>memory</azure> storage.<br/>
            2. Accessing <azure>memory</azure> is easier since <azure>threads</azure> <azure>share</azure> the same 
            <red>parent</red> <azure>process</azure>.<br/>
            3. Switching between <azure>threads</azure> is fast and <azure>efficient</azure>.<br/>
            4. It's faster to generate new <azure>threads</azure> within an existing <azure>process</azure> 
            than to <azure>create</azure> 
            an entirely new <azure>process</azure>.<br/>
            5. All <azure>threads</azure> <azure>share</azure> one <azure>process</azure> <azure>memory</azure> pool  and the same 
            <purple>address</purple> space.<br/>
            6. <azure>Threads</azure> are more lightweight and have lower <azure>overhead</azure>. 
            Any combination of excess or indirect <red>computation</red> time, <azure>memory</azure>, bandwidth, or other 
            resources that are required to perform a specific <azure>task</azure> is refered to as 
            <azure>overhead</azure>.
            <br/> 
            7. The cost of communication between <azure>threads</azure> is relatively low.
            Meaning that <azure>threads</azure> can communicate with each other more easily 
            than <azure>processes</azure> can.
            <br/>
            8. <azure>Creating</azure> <azure>responsive</azure> user interactions (<azure>UIs</azure>) is easy.
            <br/><br/>
            <green>Disadvantages of multithreading:</green>
            <br/><br/>
            1. A <azure>multithreading</azure> <red>system</red> cannot be interrupted/killed. Special attention has to
            be paid to <azure>memory</azure> <azure>leaks</azure>.
            A <azure>memory</azure> <azure>leak</azure> occurs when programmers allocate <azure>memory</azure> on 
            the <purple>heap</purple> and forget to deallocate it.<br/>
            2. The <azure>code</azure> can be more challenging to understand.<br/>
            3. The <azure>overhead</azure> associated with managing different 
            <azure>threads</azure> may be too costly for basic <azure>tasks</azure>.<br/>
            4. Increased potential for <azure>race</azure> <azure>conditions</azure>. 
            <br/>
            5. Debugging and troubleshooting issues may become more 
            challenging because the <azure>code</azure> can be complex.
            <br/><br/><br/>
            <green>Advantages of multiprocessing:</green>
            <br/><br/>
            1. It uses simple <azure>coding</azure> that's easy to understand.<br/>
            2. <red>Child</red> <azure>processes</azure> can be interrupted.<br/>
            3. It completes <azure>tasks</azure> faster and analyzes large amounts of <purple>data</purple>.<br/>
            4. It uses multiple <azure>CPUs</azure> to improve a <red>system's</red> overall <azure>processing</azure> power.<br/>
            5. It <purple>removes</purple> <azure>synchronization</azure> <azure>primitives</azure>.<br/>
            6. It's more cost-effective than single <azure>processor</azure> <red>systems</red>.
            <br/><br/>
            <green>Disadvantages of multiprocessing:</green>
            <br/><br/>
            1. It requires more <azure>memory</azure> storage and <azure>overhead</azure> than <azure>threads</azure> 
            in order to move <purple>data</purple> between the <azure>processes</azure>.<br/>
            2. Spawning <azure>processes</azure> take longer than spawning <azure>threads</azure>.<br/>
            3. An <purple>inter</purple>-<azure>process</azure> communication (IPC) model must be <red>implemented</red> to 
            <azure>share</azure> <red>objects</red> between the <azure>processes</azure>.<br/>
            4. The entire <azure>memory</azure> is copied into each subprocess, which can also <azure>create</azure> more 
            <azure>overhead</azure>.
            <br/><br/>
            <green>Choosing between multithreading and multiprocessing:</green>
            <br/><br/>
            1. <azure>Multithreading</azure> can proove optimal for make user interaction (<azure>UI</azure>) 
            programs <azure>responsive</azure>.
            <br/>
            These programs have to wait for the user to interact with them, so using <azure>threads</azure> 
            provides enough <red>computing</red> power. 
            <br/><br/>
            For <red>instance</red>: <azure>Multithreading</azure> can proove optimal for <azure>creating</azure> an 
            online <azure>writing</azure> 
            program in which one <azure>thread</azure> could track the user's keystrokes, 
            a second <azure>thread</azure> could display the text for the user to <azure>read</azure> and a third 
            <azure>thread</azure> could check the inputted text to identify spelling and grammar errors.
            <br/><br/>
            2. <azure>Multithreading</azure> can proove optimal for <azure>creating</azure> I/O-bound or network-bound 
            applications.
            <br/>
            <azure>Threads</azure> can provide all the <red>computing</red> power needed to access web <azure>servers</azure> 
            and download content from the internet. 
            <br/><br/>
            For <red>instance</red>: many <purple>data</purple> scientists use <azure>multithreading</azure> to <azure>create</azure> web 
            scraping applications.
            <br/><br/>
            3. <azure>Multiprocessing</azure> can proove optimal for <azure>creating</azure> <red>computation</red>-intensive 
            programs.
            <br/>
            <azure>Multiprocessing</azure> can help analyzing large volumes of <purple>data</purple> quickly.
            <br/><br/>
            4. <azure>Multiprocessing</azure> can proove optimal for develop programs that 
            are <azure>CPU</azure> intensive.
            <br/>
            <azure>Multiprocessing</azure> can help to speed up <azure>processes</azure> and provide 
            reliable solutions for programs that involve several <azure>CPU</azure> <azure>tasks</azure>.
            <br/><br/></concurrent-programming>
        <bitwise-operators>The <code>&amp;</code> (<purple>bitwise</purple> AND) in <red>C</red> takes two numbers as <purple>operands</purple> and does AND on every <purple>bit</purple> 
            of two numbers. <br/>
            The result of AND is 1 only if both <purple>bits</purple> are 1.  
            <br/><br/>
            The <code>|</code> (<purple>bitwise</purple> OR) in <red>C</red> takes two numbers as <purple>operands</purple> and does 
            OR on every <purple>bit</purple> 
            of two numbers. <br/>
            The result of OR is 1 if any of the two <purple>bits</purple> is 1. 
            <br/><br/>
            The <code>^</code> (<purple>bitwise</purple> XOR) takes two numbers as <purple>operands</purple> and does XOR on every 
            <purple>bit</purple> of two numbers.<br/> 
            The result of XOR is 1 if the two <purple>bits</purple> are different. 
            <br/><br/>
            The <code>&lt;&lt;</code> (<purple>left</purple>-<purple>shift</purple>) takes two numbers, <purple>left</purple>-<purple>shifts</purple> the <purple>bits</purple> of the 
            first <purple>operand</purple>, and the second <purple>operand</purple> decides the number of places to <purple>shift</purple>. 
            <br/><br/>
            The <code>&gt;&gt;</code> (<purple>right</purple>-<purple>shift</purple>) takes two numbers, <purple>right</purple>-<purple>shifts</purple> the <purple>bits</purple> of the 
            first <purple>operand</purple>, and the second <purple>operand</purple> decides the number of places to <purple>shift</purple>.
            <br/><br/>
            The <code>~</code> (<purple>bitwise</purple> NOT) takes one number and inverts all <purple>bits</purple> of it.
            <br/><br/>
            
            The <purple>left</purple>-<purple>shift</purple> and <purple>right</purple>-<purple>shift</purple> <purple>operators</purple> should not be used for 
            negative numbers.<br/>
            The <purple>left</purple>-<purple>shift</purple> and <purple>right</purple>-<purple>shift</purple> <purple>operators</purple> are equivalent to 
            multiplication and division by 
            2 respectively.<br/><br/>
            
            
            The <purple>bitwise</purple> OR of two numbers is just the sum of those two numbers if there is no carry 
            involved, otherwise, you just <azure>add</azure> their <purple>bitwise</purple> AND.
            <br/><br/>
            
            Let’s say, we have <code>a=5(101)</code> and <code>b=2(010)</code>, since there is no carry involved, 
            their sum is just <code>a|b</code>. <br/>
            Now, if we change 'a' to 6 which is 110 in <purple>binary</purple>, their sum would change 
            to <code>a|b + a&amp;b</code> since there is a carry involved.
            <br/><br/>
            The <purple>bitwise</purple> XOR <purple>operator</purple> is the most useful <purple>operator</purple> from a technical interview perspective.
            <br/><br/>
            It is used in many problems. <br/>
            <br/>
            
            The <code>&amp;</code> <purple>operator</purple> can be used to quickly check if a number is odd or even.<br/>

            The <purple>value</purple> of the expression <code>(x &amp; 1)</code> would be non-zero only if x is odd, otherwise, 
            the <purple>value</purple> would be zero. <br/><br/>
            
            The <code>~</code> <purple>operator</purple> should be used carefully.
            <br/><br/>
            The result of the <code>~</code> <purple>operator</purple> on a small number can be a big number if the result 
            is <azure>stored</azure> in an <purple>unsigned</purple> <purple>variable</purple>. <br/><br/>
            
            The result may be a negative number if the result 
            is <azure>stored</azure> in a <purple>signed</purple> <purple>variable</purple> (assuming that the negative numbers are <azure>stored</azure> into a
            complement form where the leftmost <purple>bit</purple> is the <purple>sign</purple> <purple>bit</purple>).<br/></bitwise-operators>
        <macros><red>Macros</red> are powerful tools that <azure>allow</azure> developers to define <azure>reusable</azure> <azure>code</azure> snippets. 
            <br/><br/>
            They are defined using <red>preprocessor</red> <red>directives</red> and primarily used for 
            <azure>code</azure> substitution and generation. 
            <br/><br/>
            <red>Macros</red> provide a convenient way to <azure>write</azure> concise and 
            <azure>efficient</azure> <azure>code</azure>, 
            improving the <azure>readability</azure> and <azure>maintainability</azure> of programs.
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Program to illustrate macros</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Macro definition</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#define AREA(l, b) (l * b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Given lengths l1 and l2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int l1 = 10, l2 = 5, area;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Find the area using macros</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    area = AREA(l1, l2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Print the area</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("Area of rectangle"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">           " is: %d",</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">           area);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>        
            <br/>
            <green>
            Object-Like Macros:
            </green>
            <br/><br/>
            An <red>object</red>-like <red>macro</red> is a simple <purple>identifier</purple> that will be 
            <azure>replaced</azure> by a <azure>code</azure> fragment. 
            <br/>
            It is called <red>object</red>-like because it looks like an <red>object</red> in <azure>code</azure> that uses it. 
            <br/><br/>
            <brown>
            It is popularly used to replace a symbolic name with a numerical/variable represented 
            as a constant.
            </brown>
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Chain Macros</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Macro definition</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#define INSTAGRAM FOLLOWERS</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#define FOLLOWERS 138 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Both macros INSTAGRAM and FOLLOWERS have same value - 138</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Multi-line macros</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Multi-line Macro definition</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#define ELE 1, \</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            2, \</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            3</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Array arr[] with elements</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// defined in macros</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int arr[] = { ELE };</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Print elements</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("Elements of Array are:\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (int i = 0; i &lt; 3; i++) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printf("%d  ", arr[i]);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></macros>
        <defines>In <red>programming</red>, <code>#define</code> is a <red>preprocessor</red> <red>directive</red> that is used to define <red>macros</red>. 
            <br/><br/>
            The <red>macros</red> are the <purple>identifiers</purple> which are <azure>replaced</azure> by their <purple>value</purple> before 
            <red>compilation</red>. <br/><br/>
            We can define <purple>constants</purple> and <red>functions</red> like <red>macros</red> using <code>#define</code>.</defines>
        <command-line-arguments><red>Command</red>-<red>line</red> <red>arguments</red> are passed to the main <red>function</red> 
            as (<code>argc</code>, <code>argv</code>), or (<code>args</code>). 
            <br/>
            <red>Command</red>-<red>line</red> <red>arguments</red> are used to control the program from 
            the outside.
            <br/><br/>
            <green>For C/C++:</green>
            <br/><br/>
            In <red>languages</red> such as <red>C</red> and <red>C++</red> both <code>argc</code> and <code>argv</code> are being 
            used for this purpose as follows:
            <br/><br/>
            The name of the program is 
            <azure>stored</azure> in <code>argv[0]</code>, the first <red>command</red>-<red>line</red> <red>parameter</red> in <code>argv[1]</code>, 
            and the    last <red>argument</red> in <code>argv[n]</code>.
            <br/><br/>
            <code>argc</code> - <red>argument</red> <azure>count</azure> is an <purple>integer</purple> <purple>variable</purple> that <azure>stores</azure>
            the number of <red>command</red>-<red>line</red> 
            <red>arguments</red> passed by the user including the name of the program. 
            So if we pass a 
            <purple>value</purple> to a program, the <purple>value</purple> of <code>argc</code> would be 2 
            (one for <red>argument</red> and one for 
            program name). 
            <br/><br/>
            The <purple>value</purple> of argc should be non-negative.
            
            <br/><br/>
            <code>argv</code> - <red>argument</red> <purple>vector</purple> is an <purple>array</purple> of <purple>character</purple> <purple>pointers</purple> 
            <purple>listing</purple> all the <red>arguments</red>.
            If <code>argc</code> is greater than zero, the <purple>array</purple> elements from <code>argv[0]</code> 
            to <code>argv[argc-1]</code> will 
            contain <purple>pointers</purple> to <purple>strings</purple>.<br/><br/>
            <code>argv[0]</code> is the name of the program. 
            <br/><br/>
            After that until <code>argv[argc-1]</code> every element 
            is a <red>command</red>-<red>line</red> <red>argument</red>.
            <br/><br/>
            <brown>Properties of command-line arguments in C/C++:</brown>
            <br/><br/>
            
            <code>argv[argc]</code> is a <purple>NULL</purple> <purple>pointer</purple>.<br/>
            <code>argv[0]</code> holds the name of the program.<br/>
            <code>argv[1]</code> <purple>points</purple> to the first <red>command</red>-<red>line</red> <red>argument</red> and <code>argv[argc-1]</code> <purple>points</purple> to 
                the last <red>argument</red>.
            
            <br/><br/>
            <green>For Java/C#:</green>
            <br/><br/>
            In <red>programming</red> <red>languages</red> such as: <red>C#</red> and <red>Java</red>, only one <purple>variable</purple> is used to 
            <azure>store</azure> the <red>command</red>-<red>line</red> <red>arguments</red>: <code>args</code>
            <br/><br/>
            In these <red>languages</red> <code>args</code> is declared as an <purple>array</purple> of 
            <purple>string</purple> 
            elements. The length of the <code>args</code> can be obtained by using the <red>OOP</red> 
            <purple>attributes</purple> of the <purple>string</purple>
            <red>class</red> defined in those <red>languages</red>: <code>args.length</code> (in <red>Java</red>) 
            or <code>args.Length</code> (in <red>C#</red>).
            <br/><br/>
            <green>Overall properties of Command-Line Arguments:</green>
            <br/><br/>
            
            They are passed to the <code>main()</code> <red>function</red>.<br/>
            They are <red>parameters</red>/<red>arguments</red> supplied to the program when it is invoked.<br/>
            They are used to control programs from outside instead of hard <azure>coding</azure> those <purple>values</purple> 
            inside the <azure>code</azure>.
            
            <br/><br/></command-line-arguments>
        <ternary-operator><purple>Ternary</purple> <purple>operator</purple> is used for decision making instead of placing longer <code>if</code> and <code>else</code>
            <azure>conditional</azure> <azure>statements</azure>.
            <br/><br/>
            Syntax:
            <code>condition ? value_if_true : value_if_false</code>
            <br/>
            The <azure>statement</azure> evaluates to <code>value_if_true</code> if <azure>condition</azure> is met, and <code>value_if_false</code> 
            otherwise.<br/><br/>
            
            <green>The ternary operator take three arguments:</green>
            <br/><br/>
            
            The first is a <azure>comparison</azure> <red>argument</red>;<br/>
            The second is the result upon a <code>true</code> <azure>comparison</azure>;<br/>
            The third is the result upon a <code>false</code> <azure>comparison</azure>;<br/><br/></ternary-operator>
        <modular-programming><red>Modular</red> <red>programming</red> consists of separating <red>implementation</red> from <red>interface</red> and 
            hiding information in the <red>implementation</red>.
            <br/><br/>
            <green>Advantages of modular programming:</green>
            <br/><br/>
            
            <indigo>Code is easier to read:</indigo><br/>
            Working on <red>modular</red> <red>programming</red> makes <azure>code</azure> easier 
            to <azure>read</azure> 
            because <red>functions</red> perform different <azure>tasks</azure> as <azure>compared</azure> to monolithic <azure>codes</azure>. 
            Sometimes <red>modular</red> <red>programming</red> can be a <purple>bit</purple> messy if we pass <red>arguments</red> and 
            <purple>variables</purple> in different <red>functions</red>. 
            The use of <red>modules</red> should be done in a 
            sensible manner so as to avoid any problem. <br/>
            <red>Functions</red> should be neat, clean, 
            and descriptive.<br/><br/>
            
            <indigo>Code is easier to test:</indigo><br/>
            In software, some <red>functions</red> perform fewer <azure>tasks</azure> than
            other <red>functions</red>. If the software is easily split 
            using <red>modules</red>, it becomes easier to test. <br/>
            We can also focus on the riskier 
            <red>functions</red> during testing and use more test cases to make it bug-free.<br/><br/>
            
            <indigo>Reusability:</indigo><br/>  
            There are times where a piece of <azure>code</azure> is <red>implemented</red> 
            everywhere in 
            our program. Instead of copying and pasting it, again and again, modularity 
            gives us the advantage of <azure>reusability</azure> so that we can pull our <azure>code</azure> from 
            anywhere using <red>interfaces</red> or <purple>libraries</purple>. <br/>
            The concept of <azure>reusability</azure> also 
            reduces the <purple>size</purple> of our program.<br/><br/>
            
            <indigo>Faster fixes:</indigo><br/>            
            Suppose there is an error in the payment options in any 
            application, and the bug needs to be <purple>removed</purple>. Modularity can be a great help 
            because we know that there will be a separate <red>function</red> that will contain the 
            <azure>code</azure> of payments, and only that <red>function</red> will only be rectified.<br/>
            Using <red>modules</red> to find and fix bugs becomes much more 
            smooth and <azure>maintainable</azure>.<br/><br/>
            
            <indigo>Low-risk update:</indigo><br/>
            In <red>modular</red> <red>programming</red>, a defined <purple>layer</purple> of <purple>APIs</purple> <purple>protects</purple> 
            things that 
            use it from making changes inside the <purple>library</purple>. Unless there is a change in the <purple>API</purple>, 
            there is a low risk for someone's <azure>code</azure>-<purple>breaking</purple>. <br/>
                        For example, if you didn't have 
            explicit <purple>APIs</purple> and someone changed a <red>function</red> they thought was only used within that 
            same <purple>library</purple> (but it was used elsewhere), they could accidentally <purple>break</purple> 
            something.<br/><br/>
            
            
            <indigo>Easy collaboration:</indigo><br/>
            
            Different developers work on a single piece of <azure>code</azure> in the team. 
            There are chances of conflicts when there's a <red>git</red> merge. 
            This conflict can be reduced 
            if the <azure>code</azure> is split between more <red>functions</red>, <purple>files</purple>, <azure>repos</azure>, 
            etc. <br/>
            We can also provide 
            ownership to specific <azure>code</azure> <red>modules</red>, where a team <purple>member</purple> can <purple>break</purple> them down into 
            smaller <azure>tasks</azure>.<br/><br/>
            
            <green>Disadvantages of modular programming:</green>
            <br/><br/>
            
            <indigo>Requires more resources:</indigo><br/>
            There is a need for extra time and 
            budget for a product in <red>modular</red> <red>programming</red>.
            <br/><br/>
            
            <indigo>Increases the risk and the difficulty:</indigo><br/>
            It is a challenging <azure>task</azure> to 
            combine and integrate all the <red>modules</red> into a single program.
            <br/><br/>
            
            <indigo>Additional efforts needed for the design:</indigo><br/> 
            The design should be carefully defined 
            so that the impact for the other program <red>modules</red> is minimum.
            <br/><br/>
            
            <indigo>The task repetition impacts the software performance:</indigo><br/>
            Some <red>modules</red> may partly 
            repeat the <azure>task</azure> 
            performed by other <red>modules</red>. Hence, <red>modular</red> programs may need more <azure>memory</azure>, 
            space and extra time for execution.
            <br/><br/>
            
            <indigo>The work efficiency might be impacted:</indigo><br/>
            It reduces the program's 
            <azure>efficiency</azure> because testing and debugging are 
            time-consuming, where each <red>function</red> contains a thousand <red>lines</red> of <azure>code</azure>.
            <br/><br/>
            
            <indigo>The code readability might be affected:</indigo><br/>
            Integrating various <red>modules</red> into a 
            single program might prove be a difficult <azure>task</azure> because 
            different people working on the design of different <red>modules</red> may not have the 
            same style.
            <br/><br/></modular-programming>
        <datatype-conversions><green>Generally there are two types of conversions:</green>
            <br/><br/>
            
            - <purple>implicit</purple> <purple>conversion</purple> (done automatically by the <red>compiler</red>)<br/>
            - <purple>explicit</purple> <purple>conversion</purple> (done manually by the developer)<br/>
            
            <br/>
            <purple>Implicit</purple> <purple>conversion</purple> is done automatically by the <red>compiler</red> when you <purple>assign</purple> a <purple>value</purple> 
            of one <purple>type</purple> to another.<br/><br/>
            <purple>Explicit</purple> <purple>conversion</purple> is done manually by placing the <purple>type</purple> in parentheses <code>()</code> in front 
            of the <purple>value</purple>. Also knows as <purple>typecasting</purple>. 
            <br/></datatype-conversions>
        <operators>An <purple>operator</purple> is a symbol that tells the <red>compiler</red> to perform specific <purple>mathematical</purple> or 
            <purple>logical</purple> <red>functions</red>. 
            <br/><br/>
            By definition, an <purple>operator</purple> performs a certain <purple>operation</purple> on 
            <purple>operands</purple>. 
            <br/>
            An <purple>operator</purple> needs one or more <purple>operands</purple> for the <purple>operation</purple> to be performed.<br/>
            <br/>
            Depending on how many <purple>operands</purple> are required to perform the <purple>operation</purple>, <purple>operands</purple> are called as 
            <purple>unary</purple>, <purple>binary</purple> or <purple>ternary</purple> <purple>operators</purple>.
            They need one, two or three <purple>operands</purple> respectively.<br/>
            <br/>
            <purple>Unary</purple> <purple>operators</purple> − <code>++</code> (<purple>increment</purple>), <code>--</code> (<purple>decrement</purple>), <code>!</code> (NOT), <code>~</code> (<azure>compliment</azure>), <code>&amp;</code> (<purple>address</purple> of), <code>*</code> (<purple>dereference</purple>)
            <br/><br/>
            <purple>Binary</purple> <purple>operators</purple> − <purple>arithmetic</purple>, <purple>logical</purple> and <purple>relational</purple> <purple>operators</purple> except <code>!</code>
            <br/><br/>
            <purple>Ternary</purple> <purple>operators</purple> − The <code>?</code> <purple>operator</purple>.
            <br/><br/>
            <green>Most programming languages are rich in built-in operators and provides the following types of operators:</green>
            <br/><br/>
            <brown>Assume <purple>variable</purple> <code>A = 10</code> and <purple>variable</purple> <code>B = 20 </code> then: 
            </brown><br/><br/>
            <br/>
            <green>Arithmetic Operators: <br/></green>
                <br/>
                <code>+</code> it <azure>adds</azure> two <purple>operands</purple>.<br/>
                <code>A + B = 30</code><br/>
                <br/>
                
                <code>−</code> it subtracts second <purple>operand</purple> from the first.<br/>
                <code>A − B = -10</code><br/>
                <br/>
                
                <code>*</code> it multiplies both <purple>operands</purple>.<br/>
                <code>A * B = 200</code><br/>
                <br/>
                
                <code>/</code> it divides numerator by de-numerator.<br/>
                <code>B / A = 2</code><br/>
                <br/>
                
                <code>%</code> is the Modulus <purple>Operator</purple>.<br/>
                It gives the remainder after an <purple>integer</purple> division.<br/>
                <code>B % A = 0</code><br/>
                <br/><br/>
                
                <code>++</code> is the <purple>Increment</purple> <purple>operator</purple>. <br/>
                It increases the <purple>integer</purple> <purple>value</purple> by one.<br/>
                <code>A++ = 11</code><br/>
                <br/>
                <code>--</code> is the <purple>Decrement</purple> <purple>operator</purple>.<br/>
                It decreases the <purple>integer</purple> <purple>value</purple> by one.<br/>
                <code>A-- = 9</code><br/>
                <br/>
                <green><br/>Relational Operators:<br/></green>
                <br/>
                
                <code>==</code> it checks if the <purple>values</purple> of two <purple>operands</purple> are equal or not. <br/>
                If yes, then the <azure>condition</azure> becomes <purple>true</purple>.<br/>
                <code>(A == B) is not true.</code><br/>
                <br/>

                <code>!=</code> it checks if the <purple>values</purple> of two <purple>operands</purple> are equal or not.<br/>
                If the <purple>values</purple> are not equal, then the <azure>condition</azure> becomes <purple>true</purple>.<br/>
                <code>(A != B) is true.</code><br/>
                <br/>

                <code>&gt;</code> it checks if the <purple>value</purple> of left <purple>operand</purple> is greater than the <purple>value</purple> of 
                right <purple>operand</purple>.<br/>
                If yes, then the <azure>condition</azure> becomes <purple>true</purple>.<br/>
                <code>(A &gt; B) is not true.</code><br/>
                <br/>

                <code>&lt;</code> it checks if the <purple>value</purple> of left <purple>operand</purple> is less than the <purple>value</purple> of 
                right <purple>operand</purple>.<br/>
                If yes, then the <azure>condition</azure> becomes <purple>true</purple>.<br/>
                <code>(A &lt; B) is true.</code><br/>
                <br/>

                <code>&gt;=</code> it checks if the <purple>value</purple> of left <purple>operand</purple> is greater than or equal to 
                the <purple>value</purple> of right <purple>operand</purple>.<br/>
                If yes, then the <azure>condition</azure> becomes <purple>true</purple>.<br/>
                <code>(A &gt;= B) is not true.</code><br/>
                <br/>

                <code>&lt;=</code> it checks if the <purple>value</purple> of left <purple>operand</purple> is less than or equal to the <purple>value</purple> 
                of right <purple>operand</purple>.<br/>
                If yes, then the <azure>condition</azure> becomes <purple>true</purple>.<br/>
                <code>(A &lt;= B) is true.</code><br/>
                <br/>
                
                <green><br/>Logical Operators:<br/></green>
                <br/>
    
                <code>&amp;&amp;</code> it's called <purple>Logical</purple> AND <purple>operator</purple>.<br/> 
                Results in <purple>TRUE</purple> if both the <purple>operands</purple> are non-zero, 
                then the <azure>condition</azure> becomes <purple>true</purple>.<br/>
                <code>(A &amp;&amp; B) is false.</code><br/>
                <br/>

                <code>||</code> it's called <purple>Logical</purple> OR <purple>Operator</purple>.<br/>  
                Results in <purple>TRUE</purple> if any of the two <purple>operands</purple> is non-zero, 
                then the <azure>condition</azure> becomes <purple>true</purple>.<br/>
                <code>(A || B) is true.</code><br/>
                <br/>

                <code>!</code> it's called <purple>Logical</purple> NOT <purple>Operator</purple>. <br/>
                It is used to reverse the <purple>logical</purple> state of 
                its <purple>operand</purple>. 
                If a <azure>condition</azure> is <purple>true</purple>, then <purple>Logical</purple> NOT <purple>operator</purple> will make it <purple>false</purple>.
                <br/>
                <code>!(A &amp;&amp; B) is true.</code><br/>
                <br/>
                
                <green><br/>Bitwise Operators:<br/></green>
                <br/>
                <code>&amp;</code> <purple>binary</purple> AND <purple>Operator</purple> copies a <purple>bit</purple> to the result if it exists in both <purple>operands</purple>.<br/>    
                <code>(A &amp; B) = 12, i.e., 0000 1100</code><br/>
                <br/>

                <code>|</code> <purple>binary</purple> OR <purple>Operator</purple>.<br/>
                It copies a <purple>bit</purple> if it exists in either <purple>operand</purple>.<br/>
                <code>(A | B) = 61, i.e., 0011 1101</code><br/>
                <br/>
                <code>^</code> <purple>binary</purple> XOR <purple>Operator</purple>.<br/>
                It copies the <purple>bit</purple> if it is <purple>set</purple> in one <purple>operand</purple> but not both.<br/>
                <code>(A ^ B) = 49, i.e., 0011 0001</code><br/>
                <br/>
                <code>~</code> <purple>binary</purple> One's Complement <purple>Operator</purple>.<br/>
                Is <purple>unary</purple> and has the effect of 'flipping' <purple>bits</purple>.<br/>
                <code>(~A ) = ~(60), i.e,. -0111101</code><br/>
                <br/>
                <code>&lt;&lt;</code> <purple>binary</purple> Left <purple>Shift</purple> <purple>Operator</purple>.<br/>
                The left <purple>operands</purple> <purple>value</purple> is moved left by the number of <purple>bits</purple> specified by the 
                right <purple>operand</purple>.<br/>
                <code>A &lt;&lt; 2 = 240 i.e., 1111 0000</code><br/>
                <br/>
                <code>&gt;&gt;</code> <purple>binary</purple> Right <purple>Shift</purple> <purple>Operator</purple>. <br/>
                The left <purple>operands</purple> <purple>value</purple> is moved right by the number of <purple>bits</purple> specified 
                by the right <purple>operand</purple>.<br/>
                <code>A &gt;&gt; 2 = 15 i.e., 0000 1111</code><br/>
                <br/>
                
                <green><br/>Assignment Operators:<br/></green>
                <br/>
                <code>=</code> is the assignment <purple>operator</purple>. <br/>
                <purple>Assigns</purple> <purple>values</purple> from right side <purple>operands</purple> to left side <purple>operand</purple>.<br/>
                <code>C = A + B will assign the value of A + B to C</code><br/>
                <br/>
                <code>+=</code> the <azure>add</azure> AND <purple>assign</purple> <purple>operator</purple>. <br/>
                It <azure>adds</azure> the right <purple>operand</purple> to the left <purple>operand</purple> and <purple>assign</purple> the result 
                to the left <purple>operand</purple>.<br/>
                <code>C += A is equivalent to C = C + A</code><br/>
                <br/>
                <code>-=</code> Subtract AND assignment <purple>operator</purple>. <br/>
                It subtracts the right <purple>operand</purple> from the left <purple>operand</purple> and <purple>assigns</purple> 
                the result to the left <purple>operand</purple>.<br/>
                <code>C -= A is equivalent to C = C - A</code><br/>
                <br/>
                <code>*=</code> Multiply AND assignment <purple>operator</purple>. <br/>
                It multiplies the right <purple>operand</purple> with the left <purple>operand</purple> and <purple>assigns</purple> 
                the result to the left <purple>operand</purple>.<br/>    
                <code>C *= A is equivalent to C = C * A</code><br/>
                <br/>
                <code>/=</code> the divide AND <purple>assign</purple> <purple>operator</purple>. <br/>
                It divides the left <purple>operand</purple> with the right <purple>operand</purple> and <purple>assigns</purple> the 
                result to the left <purple>operand</purple>.<br/>
                <code>C /= A is equivalent to C = C / A</code><br/>
                <br/>
                <code>%=</code> the modulus AND <purple>assign</purple> <purple>operator</purple>. <br/>
                It takes modulus using two <purple>operands</purple> and <purple>assigns</purple> the 
                result to the left <purple>operand</purple>.<br/>
                <code>C %= A is equivalent to C = C % A</code><br/>
                <br/>
                <code>&lt;&lt;=</code> the Left <purple>shift</purple> AND <purple>assign</purple> <purple>operator</purple>.<br/>
                It takes the <purple>value</purple> <azure>stored</azure> in <purple>variable</purple> <red>C</red> <purple>shifts</purple> it to the left by 
                the number of <purple>bits</purple> specified 
                after the equal <purple>sign</purple> and then <purple>assigns</purple> the result of the <purple>operation</purple> back to <red>C</red> <purple>variable</purple><br/>
                <code>C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</code><br/>
                <br/>
                <code>&gt;&gt;=</code> the Right <purple>shift</purple> AND <purple>assign</purple> <purple>operator</purple>.<br/>
                It takes the <purple>value</purple> <azure>stored</azure> in <purple>variable</purple> <red>C</red> <purple>shifts</purple> it to the right by the 
                number of <purple>bits</purple> specified after the equal <purple>sign</purple> and then <purple>assigns</purple> the result of the 
                <purple>operation</purple> back to <red>C</red> <purple>variable</purple>.<br/>
                <code>C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</code><br/>
                <br/>
                <code>&amp;=</code> the <purple>bitwise</purple> AND <purple>assign</purple> <purple>operator</purple>.<br/>
                It takes the <purple>value</purple> <azure>stored</azure> in <purple>variable</purple> <red>C</red> performs <purple>bitwise</purple> AND with 
                the <purple>value</purple> specified after the equal <purple>sign</purple> and then <purple>assigns</purple> the result of 
                the <purple>operation</purple> back to <red>C</red> <purple>variable</purple>.<br/>
                <code>C &amp;= 2 is same as C = C &amp; 2</code><br/>
                <br/>
                <code>^=</code> the <purple>bitwise</purple> exclusive OR and <purple>assign</purple> <purple>operator</purple>.<br/>
                It takes the <purple>value</purple> <azure>stored</azure> in <purple>variable</purple> <red>C</red> performs <purple>bitwise</purple> XOR with the <purple>value</purple> 
                specified after the equal <purple>sign</purple> and then <purple>assigns</purple> the result of the 
                <purple>operation</purple> back to <red>C</red> <purple>variable</purple>.<br/>
                <code>C ^= 2 is same as C = C ^ 2</code><br/>
                <br/>
                <code>|=</code> the <purple>bitwise</purple> inclusive OR and <purple>assign</purple> <purple>operator</purple>.<br/>
                It takes the <purple>value</purple> <azure>stored</azure> in <purple>variable</purple> <red>C</red> performs <purple>bitwise</purple> OR with the 
                <purple>value</purple> specified after the equal <purple>sign</purple> and then <purple>assign</purple> the result of the 
                <purple>operation</purple> back to <red>C</red> <purple>variable</purple>.<br/>
                <code>C |= 2 is same as C = C | 2</code><br/>
                <br/></operators>
        <pre-post-incrementation><purple>Increment</purple> <purple>operators</purple> are used to increase the <purple>value</purple> of a <purple>variable</purple> by 1.<br/>
            This <purple>operator</purple> is represented by the <code>++</code> symbol. <br/><br/>
            The <purple>increment</purple> <purple>operator</purple> can either
            increase the <purple>value</purple> of the <purple>variable</purple> by 1 before <purple>assigning</purple> it to the <purple>variable</purple> or 
            can increase the <purple>value</purple> of the <purple>variable</purple> by 1 after <purple>assigning</purple> the <purple>variable</purple>. 
            Thus it can be classified into two <purple>types</purple>
            <br/><br/>
            <green>Classification of the increment operator:</green>
            <br/><br/>
            
            <brown>Pre-Increment Operators:</brown><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">a = ++x; <comment>// first x will be incremented then value of x is assigned to a;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <brown>Post-Increment Operator:</brown><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">a = x++; <comment>// first x value is assigned to a, then the value of x gets incremented;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></pre-post-incrementation>
        <constructors>A <red>constructor</red> is a special <red>method</red> that is automatically called when an <red>object</red> 
            of a <code>class</code> is <azure>created</azure>.
            <br/><br/>
            <red>Constructors</red> can also take <red>parameters</red> (just like 
            regular <red>functions</red>), which can be useful for setting initial 
            <purple>values</purple> for <purple>attributes</purple>.<br/></constructors>
        <instantiation>In <red>object</red>-<red>oriented</red> <red>programming</red>, an <red>instance</red> is a <red>concrete</red> realization 
            of a <red>class</red>. 
            <br/><br/>
            When you define a <code>class</code>, you're essentially <azure>creating</azure> a blueprint. 
            <br/><br/>
            An <red>instance</red> is an <red>object</red> built from that blueprint. <br/>
            It has all the characteristics defined in the <code>class</code>, but with specific <purple>values</purple>.
            <br/></instantiation>
        <destructors><red>Destructor</red> is an <red>instance</red> <purple>member</purple> <red>function</red> that is invoked automatically whenever an <red>object</red> is 
            going to be destroyed. <br/><br/>
            The <red>destructor</red> is the last <red>function</red> that is going to be called before an 
            <red>object</red> is destroyed.
            <br/><br/>
            <green>About destructors:</green>
            <br/><br/>
            
            - A <red>destructor</red> is also a special <purple>member</purple> <red>function</red> like a <red>constructor</red>. <br/>
            - <red>Destructor</red> destroys the <red>class</red> <red>objects</red> <azure>created</azure> by the <red>constructor</red>. <br/>
            - <red>Destructor</red> has the same name as their <code>class</code> name preceded by a 
            tilde (<code>~</code>) symbol.<br/>
            - It is not possible to define more than one <red>destructor</red>. <br/>
            - The <red>destructor</red> is the only one way to destroy the <red>object</red> <azure>created</azure> by the <red>constructor</red>. 
            <br/>
            - The <red>destructor</red> can-not be <red>overloaded</red>.
            <br/>
            - <red>Destructor</red> neither requires any <red>argument</red> nor <purple>returns</purple> any <purple>value</purple>.<br/>
            - It is automatically called when an <red>object</red> goes out of <red>scope</red>. <br/>
            - <red>Destructor</red> release <azure>memory</azure> space occupied by the <red>objects</red> <azure>created</azure> by the <red>constructor</red>.<br/>
            - In <red>destructor</red>, <red>objects</red> are destroyed in the reverse of an <red>object</red> <azure>creation</azure>.<br/></destructors>
        <function-overloading><red>Function</red> <red>overloading</red> is a feature of <red>object</red>-<red>oriented</red> <red>programming</red> 
            where two or more 
            <red>functions</red> can have the same name but different <red>parameters</red>. <br/><br/>
            <red>Function</red> <red>overloading</red> can be considered as an example of a <red>polymorphism</red> 
            feature.
            <br/><br/>
            Multiple <red>functions</red> having same name but different <red>parameters</red> is 
            known as <red>function</red> <red>overloading</red>.<br/>
            If we have to perform one <purple>operation</purple> then having same name for the <red>functions</red> 
            doing it increases 
            the <azure>readability</azure> of the program.
            <br/><br/>
            <green>Function Overloading vs. Function Overriding:</green>
            <br/><br/>
            <red>Function</red>/<red>Method</red> <red>overloading</red> refers to defining multiple <red>functions</red>/<red>methods</red> 
            with the same name but different <red>parameters</red> within the same <red>class</red>, 
            while <red>function</red>/<red>method</red> <red>overriding</red> involves 
            <azure>creating</azure> a <red>function</red>/<red>method</red> in the <red>child</red> <red>class</red> that has the same name, 
            <red>parameters</red>, and 
            <purple>return</purple> <purple>type</purple> as a <red>function</red>/<red>method</red> in the <red>parent</red> <red>class</red>.
            <br/><br/>
            <brown>
            Overloaded functions can be defined both outside and inside classes.
            </brown><br/></function-overloading>
        <operator-overloading><purple>Operator</purple> <red>overloading</red> is a <red>compile</red>-time <red>polymorphism</red>. <br/><br/>
            It is an idea of giving special meaning to an existing <purple>operator</purple> 
            without changing its original meaning. <br/></operator-overloading>
        <namespaces>A <purple>namespace</purple> is a feature which can be defined as a
            declarative region that provides a <red>scope</red> to the 
            <purple>identifiers</purple> (names of <red>functions</red>, 
            <purple>variables</purple> or other user-defined <purple>data</purple> <purple>types</purple>) inside it. 
            <br/></namespaces>
        <exception-handling>In <red>computer</red> <red>programming</red> <red>exceptions</red> are runtime anomalies or abnormal <azure>conditions</azure> that a program 
            encounters during its execution. 
            <br/><br/>
            The <azure>process</azure> of handling these <red>exceptions</red> is 
            called <red>exception</red> <red>handling</red>. <br/>
            <br/>
            Using the <red>exception</red> <red>handling</red> mechanism, the control 
            from one part of the program where the <red>exception</red> occurred can be transferred 
            to another part of the <azure>code</azure>.
            <br/><br/>
            By using <red>exception</red> <red>handling</red> we can handle the anomalies so that our 
            program keeps running.<br/></exception-handling>
        <default-parameters>A <azure>default</azure> <red>parameter</red>/<red>argument</red> is a <purple>value</purple> provided in a <red>function</red> declaration that is 
            automatically <purple>assigned</purple> by the <red>compiler</red> if the calling <red>function</red> doesn’t provide 
            a <purple>value</purple> for the <red>argument</red>. <br/>
            <br/>
            In case any <purple>value</purple> is passed, the <azure>default</azure> <purple>value</purple> is 
            overridden. <br/></default-parameters>
        <interfaces>In <red>programming</red>: an <red>interface</red> describes the behavior or capabilities of a <red>class</red> without 
            committing to a particular <red>implementation</red> of that <red>class</red>.
            <br/><br/>
            The <red>interfaces</red> are <red>implemented</red> using <azure>abstract</azure> <red>classes</red> and these <azure>abstract</azure> <red>classes</red>
            should not be confused with <purple>data</purple> <azure>abstraction</azure> which is a concept of keeping 
            <red>implementation</red> details separate from associated <purple>data</purple>.<br/></interfaces>
        <abstract-classes>The purpose of an <azure>abstract</azure> <red>class</red> (often referred to as an ABC) is to provide an 
            appropriate <red>base</red> <red>class</red> from which other <red>classes</red> can <red>inherit</red>. <br/>
            <br/>
            <azure>Abstract</azure> <red>classes</red> cannot be used to <red>instantiate</red> <red>objects</red> and serves only as an 
            <red>interface</red>. <br/>
            Attempting to <red>instantiate</red> an <red>object</red> of an <azure>abstract</azure> <red>class</red> causes a 
            <red>compilation</red> error. <br/>
            <br/>
            If a <red>subclass</red> of an ABC needs to be <red>instantiated</red>, it has to <red>implement</red> each of 
            the <red>virtual</red>/<azure>abstract</azure> <red>functions</red>, which means that it supports the 
            <red>interface</red> declared by the 
            ABC. <br/><br/>
            Failing to <red>override</red> a <red>pure</red> <red>virtual</red>/<azure>abstract</azure> <red>function</red> in a 
            <azure>derived</azure> <red>class</red>, 
            then attempting to <red>instantiate</red> <red>objects</red> of that <code>class</code>, is a <red>compilation</red> error.
            <br/><br/>
            An <red>object</red>-<red>oriented</red> <red>system</red> might use an <azure>abstract</azure> <red>base</red> <red>class</red> to provide a common and 
            standardized <red>interface</red> appropriate for all the external applications. <br/>
            Through <red>inheritance</red> from the <azure>abstract</azure> <red>base</red> <red>class</red>, <azure>derived</azure> <red>classes</red> are 
            formed that <purple>operate</purple> similarly.
            <br/><br/>
            The capabilities (i.e., the <purple>public</purple> <red>functions</red>) offered by the external applications 
            are provided as <red>pure</red> <red>virtual</red>/<azure>abstract</azure> <red>functions</red> in the <azure>abstract</azure> <red>base</red> <red>class</red>. 
            <br/><br/>
            The <red>implementations</red> of these <red>pure</red> <red>virtual</red>/<azure>abstract</azure> <red>functions</red> are provided in 
            the <azure>derived</azure> 
            <red>classes</red> that correspond to the specific <purple>types</purple> of the application.<br/></abstract-classes>
        <optional-parameters>A <red>parameter</red> with a <azure>default</azure> <purple>value</purple>, is often known as an "optional <red>parameter</red>".
            <br/><br/> 
            For more information see the <azure>default</azure>-<red>parameters</red> section.</optional-parameters>
        <decorators><purple>Decorator</purple> is a <purple>structural</purple> pattern that <azure>allows</azure> <azure>adding</azure> new behaviors to <red>objects</red> 
            <azure>dynamically</azure> by placing them inside special wrapper <red>objects</red> , called <purple>decorators</purple>. 
            <br/><br/>
            Using <purple>decorators</purple> you can wrap <red>objects</red>  countless number of times since both target 
            <red>objects</red>  and <purple>decorators</purple> follow the same <red>interface</red>.<br/></decorators>
        <generic-programming><red>Generic</red> <red>programming</red> is a style of <red>computer</red> <red>programming</red> in which 
            algorithms are 
            written in terms of <purple>data</purple> <purple>types</purple> to-be-specified-later that are then <red>instantiated</red> 
            when needed for specific <purple>types</purple> provided as <red>parameters</red>.
            <br/><br/>            
            The <red>functions</red> and <red>classes</red> which are <purple>data</purple> <purple>type</purple> <azure>independent</azure> 
            are called <red>generics</red>, 
            and this concept is called <red>generic</red> <red>programming</red>. 
            <br/><br/>
            <brown>
            Generic Programming provides efficiency by reducing code 
            repetition and in-demand compilation.
            </brown>
            <br/></generic-programming>
        <abstraction><azure>Abstraction</azure> means displaying only essential information and hiding the 
            details. <br/><br/>
            <azure>Abstraction</azure> is a powerful technique that <azure>allows</azure> for a separation of 
            concerns between the 
            <red>interface</red> and <red>implementation</red> of a <code>class</code>. 
            <br/><br/>
            It helps to reduce complexity and improve 
            <azure>maintainability</azure> by <azure>allowing</azure> changes to be made to the 
            <red>implementation</red> without affecting 
            the overall behavior of the <code>class</code>.
            <br/><br/>
            Can be used to <azure>create</azure> a <red>base</red> <red>implementation</red> or contract for the 
            actual <red>implementation</red> from <red>base</red> <red>classes</red>.
            <br/><br/>
            <green>Types of Abstraction in OOP:</green>
            <br/><br/>
            <brown>Data abstraction:</brown>
            <br/><br/>
            <purple>Data</purple> <azure>abstraction</azure> is one of the most essential and important features of 
            <red>object</red>-<red>oriented</red> <red>programming</red>. 
            <br/><br/>
            <purple>Data</purple> <azure>abstraction</azure> refers to providing only essential information 
            about the <purple>data</purple> to the outside world, hiding the background details or <red>implementation</red>. 
            <br/><br/>
            Using <purple>data</purple> <azure>abstraction</azure>, we are <azure>not</azure> <azure>allowed</azure> to access the <purple>variables</purple> directly, however, 
            one can call the <red>setter</red> <red>function</red> to <purple>set</purple> the <purple>values</purple> or the 
            <red>getter</red> <red>function</red> to get the <purple>values</purple>.
            <br/><br/>
            
            Advantages of <purple>Data</purple> <azure>Abstraction</azure>:
            <br/><br/>
            
            Helps the user to avoid <azure>writing</azure> the <azure>low</azure>-<azure>level</azure> <azure>code</azure>;<br/>
            Avoids <azure>code</azure> duplication and increases <azure>reusability</azure>.<br/>
            Can change the internal <red>implementation</red> of the <code>class</code> <azure>independently</azure> 
            without affecting the user.
            <br/>
            Helps to increase the security of an application or program as only important 
            details are provided to the user.<br/>
            It reduces the complexity as well as the redundancy of the <azure>code</azure>, therefore 
            increasing the <azure>readability</azure>.
            
            <br/><br/>
            <brown>Process Abstraction:</brown>
            <br/><br/>
            <azure>Process</azure> <azure>abstraction</azure> focuses on <azure>abstracting</azure> the behavior or 
            <azure>processes</azure> of an <red>object</red>. 
            <br/>
            It <azure>allows</azure> developers to define the <red>methods</red> an <red>object</red> that can perform without 
            specifying how these <red>methods</red> are <red>implemented</red>. 
            <br/><br/>
            <azure>Process</azure> <azure>abstraction</azure> is achieved through <red>interfaces</red>. 
            <br/>
            <red>Interfaces</red> define a <purple>set</purple> of <red>method</red> signatures without providing the <red>method</red> 
            <red>implementations</red>, enabling multiple <red>classes</red> to <red>implement</red> the same 
            <red>interface</red> in different ways.
            <br/><br/>
            <brown>Abstraction vs. Concrete Implementation:</brown>
            <br/><br/>
            <azure>Abstraction</azure> provides a clear distinction between the <red>interface</red> 
            of an <red>object</red> and its internal <red>implementation</red>. 
            This separation enables developers to focus on 
            <azure>high</azure>-<azure>level</azure> design and promotes <azure>code</azure> <azure>reusability</azure>.
            <br/><br/>
            <red>Concrete</red> <red>implementation</red>, 
            on the other hand, involves the actual <azure>coding</azure> and realization of the <azure>abstract</azure> 
            concepts. Striking a balance between <azure>abstraction</azure> and <red>concrete</red> 
            <red>implementation</red> is 
            essential in <azure>creating</azure> <azure>maintainable</azure>, scalable, and 
            <azure>efficient</azure> software <red>systems</red>.
            <br/><br/>
            <azure>Abstraction</azure> is one of the 4 <red>OOP</red> fundamental concepts, 
            and it is regarded to <azure>abstract</azure> <red>objects</red>, which are the <red>objects</red> 
            that contain <purple>fields</purple> and <red>methods</red> to be <red>inherited</red> by their <red>children</red>. 
            <br/><br/>
            An <azure>abstract</azure> <red>object</red> is like a dead <red>parent</red>
            which has to <azure>allow</azure> <red>inheritance</red> to their <red>children</red> and nothing more.
            <br/><br/>
            <azure>Abstraction</azure> is the quality of dealing with ideas rather than events.
            <br/><br/>
            For example, when you consider the case of e-mail, complex details such as what happens 
            as soon as you send an e-mail, the protocol your e-mail, <azure>server</azure> uses, are hidden from 
            the user. 
            <br/><br/>
            Therefore, to send an e-mail you just need to <purple>type</purple> the content, mention the 
            <purple>address</purple> of the receiver, and click send.
            <br/><br/>
            Similarly, in <red>object</red>-<red>oriented</red> <red>programming</red>, <azure>abstraction</azure> is a <azure>process</azure> of 
            hiding the <red>implementation</red> details from the user, only the functionality will be 
            provided to the user. 
            <br/><br/>
            In other words, the user will have the information on what the <red>object</red> does 
            instead of how it does it.
            <br/></abstraction>
        <variable-arguments-lists>In <red>programming</red>: A <red>function</red> that takes a <purple>variable</purple> number of <red>arguments</red> 
            is called a 
            <red>variadic</red> <red>function</red>. 
            <br/><br/>
            A <red>variadic</red> <red>function</red> must specify at least one fixed <red>argument</red> 
            with an explicitly declared <purple>data</purple> <purple>type</purple>. 
            <br/><br/>
            Additional <red>arguments</red> can follow, and can vary in 
            both <azure>quantity</azure> and <purple>data</purple> <purple>type</purple>.
            <br/><br/>
            The <purple>variable</purple> number of <red>arguments</red> permits a <red>function</red> to 
            accept any number of <red>arguments</red>.
            <br/></variable-arguments-lists>
        <random-generators>A <red>random</red> number generator forms the backbone of <azure>creating</azure> <red>pseudo</red>-<red>random</red> numbers.
            <br/><br/>
            The idea behind <red>pseudo</red>-<red>random</red> numbers is that a <red>computer</red> does not have a thinking 
            <azure>process</azure> to select a <red>random</red> number. <br/><br/>
            So even though an output number produced may seem <red>random</red>, the <purple>values</purple> are 
            <purple>mathematically</purple> <red>computed</red>.</random-generators>
        <preprocessor-directives><red>Preprocessor</red> <red>directives</red> are <red>lines</red> of the <azure>source</azure> <purple>file</purple> where the first non-whitespace 
            <purple>character</purple> is <code>#</code> , which distinguishes them from other <red>lines</red> of text. 
            <br/><br/>
            The effect of each <red>preprocessor</red> <red>directives</red> is a change to the text and the 
            result is a 
            transformation of the text that does not contain the <red>directives</red> nor <azure>comments</azure>.
            <br/><br/>
            <green>The #define preprocessor as example:</green>
            <br/><br/>
            The <code>#define</code> <red>preprocessor</red> <red>directive</red> <azure>creates</azure> symbolic <purple>constant</purple>. 
            <br/>
            <br/>
            The symbolic <purple>constant</purple> is called a <red>macro</red> and the general form of the 
            <red>directive</red> is:<br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#define macro-name replacement-text</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/></preprocessor-directives>
        <collections>In <red>computer</red> <red>programming</red>: A <purple>collection</purple> is an <red>object</red> that groups 
            multiple elements into a single unit.
            <br/><br/> 
            <purple>Collections</purple> are used to <azure>store</azure>, <azure>retrieve</azure>, <azure>manipulate</azure>, and communicate 
            aggregate <purple>data</purple>.
            <br/></collections>
        <read-from-file><purple>File</purple> <purple>handling</purple> is the <azure>process</azure> in which we <azure>create</azure>, <azure>open</azure>, 
            <azure>read</azure>, <azure>write</azure>, and <azure>close</azure> <purple>operations</purple> on a <purple>file</purple>.
            <br/> <br/> 
            A <purple>file</purple> is a <purple>collection</purple> of <purple>data</purple> <azure>stored</azure> in the secondary <azure>memory</azure>. 
            <br/><br/> 
            The <purple>data</purple> is entered into the programs through the keyboard. 
            <br/><br/> 
            <purple>Files</purple> are used for <azure>storing</azure> information that can be <azure>processed</azure> 
            by the programs. 
            <br/><br/> 
            <purple>Files</purple> are not only used for <azure>storing</azure> the <purple>data</purple>, programs are also 
            <azure>stored</azure> in <purple>files</purple>.
            <br/><br/>
            <green>Features of file handling:</green>
            <br/><br/>
            <indigo>Reusability:</indigo><br/>
            The <purple>data</purple> <azure>stored</azure> in the <purple>file</purple> can be accessed, 
            <azure>updated</azure>, and <azure>deleted</azure> anywhere and anytime providing  
            high <azure>reusability</azure>.
            <br/><br/>
            <indigo>Portability:</indigo><br/>
            Without losing any <purple>data</purple>, <purple>files</purple> can be transferred to 
            another in the <red>computer</red> <red>system</red>. The risk of flawed <azure>coding</azure> is 
            minimized with this feature.
            <br/><br/>
            <indigo>Efficiency:</indigo><br/>
            A large amount of input may be required for some programs. 
            <purple>File</purple> <purple>handling</purple> <azure>allows</azure> you to easily access a part of a <purple>file</purple> using few 
            instructions which <azure>saves</azure> a lot of time and reduces the <red>chance</red> of errors.
            <br/><br/>
            <indigo>Storage Capacity:</indigo><br/>
            <purple>Files</purple> <azure>allow</azure> you to <azure>store</azure> a large amount of <purple>data</purple> 
            without having to worry about <azure>storing</azure> everything <azure>simultaneously</azure> in a program.
            <br/><br/></read-from-file>
        <write-to-file>When a program is terminated, the entire <purple>data</purple> is lost.
            <br/><br/>  
            <azure>Storing</azure> in a <purple>file</purple> will preserve your <purple>data</purple> even if the 
            program terminates.
            <br/><br/>  
            A <purple>file</purple> is a container in <red>computer</red> storage devices used for <azure>storing</azure> 
            <purple>data</purple>.
            <br/></write-to-file>
        <inheritance><red>Inheritance</red> <azure>allows</azure> programmers to <azure>create</azure> <red>classes</red> that are built 
            upon existing 
            <red>classes</red>, to specify a new <red>implementation</red>  while <azure>maintaining</azure> the 
            same behaviors
            (realizing an <red>interface</red>), to <azure>reuse</azure> <azure>code</azure> and to <azure>independently</azure> extend 
            original software via <code>public classes</code> and <code>interfaces</code>.
            <br/><br/>
            <red>Inheritance</red> consist in <red>classes</red> that can <red>inherit</red> other <red>classes</red> 
            behaviour and functionality. 
            <br/>
            Example: A <red>class</red> that <red>inherits</red> from another <red>class</red> 
            can have access to its <purple>variables</purple> and <red>methods</red> as if it were its own.
            <br/><br/>
            <red>Inheritance</red> is one of the 4 <red>OOP</red> fundamental concepts.
            <br/></inheritance>
        <recursion><red>Recursion</red> is a <red>programming</red> concept available to all <red>programming</red> <red>languages</red>.
            <br/> <br/> 
            <red>Recursion</red> is achieved by using <red>recursive</red> <red>functions</red>.
            <br/> <br/> 
            A <red>recursive</red> <red>function</red> is a <red>function</red> that calls itself.
            <br/> <br/> 
            <red>Recursion</red> is a concept where the solution to a problem depends on 
            solutions to smaller <red>instances</red> of the same problem (as opposed to <purple>iteration</purple>).
            <br/> 
            
            Example: <code>5! = (4!*5) = (3! * 4 * 5) = (2! *3 *4 *5)</code> etc.
            
            <br/> <br/> 
            A <red>recursive</red> <red>function</red> needs to have a <azure>condition</azure> or 
            exit <azure>statement</azure> in order to stop the <red>recursion</red> and to avoid infinite <azure>looping</azure> 
            and <purple>stack</purple> <azure>overflow</azure>.
            <br/> <br/> 
            <green>Stack overflow:</green>
            <br/> <br/> 
            <purple>Stack</purple> <azure>overflow</azure> is a <purple>type</purple> of buffer <azure>overflow</azure> error 
            which occurs when the <purple>stack</purple> <purple>memory</purple> gets exhausted and the <red>computer</red> program 
            still tries to use more <azure>memory</azure> space. 
            <br/> <br/> 
            All local <purple>variables</purple> are <azure>stored</azure> in the <purple>stack</purple> <purple>memory</purple>. 
            Every <red>function</red> has it's own <purple>stack</purple>, once the <red>function</red> ends 
            the <purple>stack</purple> is empties and everything <azure>stored</azure> is lost 
            (local <purple>variables</purple> die).
            <br/> <br/> 
            The overall <purple>stack</purple> <purple>memory</purple> <azure>allocated</azure> by the program is only few megabytes. 
            That's why in some <red>programming</red> <red>languages</red> we need to make use of 
            <azure>dynamic</azure> <azure>memory</azure> <azure>allocation</azure>. 
            <br/> <br/> 
            <azure>Dynamic</azure> <azure>memory</azure> <azure>allocation</azure> <azure>allows</azure> using the rest of the <azure>RAM</azure> <azure>memory</azure>, 
            and enables 
            using <purple>global</purple> <purple>variables</purple>, or <purple>variables</purple> <azure>stored</azure> in <purple>heap</purple> 
            (<purple>variables</purple> that don't die).
            These <purple>variables</purple> live through the lifetime of the program or can be 
            deallocated
            when no longer needed. 
            <br/><br/>
            <green>
                Recursion vs Loops:
            </green>
            <br/><br/>
            Using the <azure>loop</azure>: the <azure>code</azure> is easier to <azure>read</azure> and understand 
            (<azure>reading</azure> <azure>code</azure> is always a lot harder than <azure>writing</azure> it), and <azure>loops</azure> are 
            generally faster.
            <br/><br/>
            <red>Recursion</red> is useful when it is the natural way of viewing the problem, 
            but you must be sure that there is a manageable number of <purple>stack</purple> <red>frames</red> 
            involved. 
            <br/><br/>
            A <purple>stack</purple> <red>frame</red> is a <azure>block</azure> of <azure>memory</azure> <purple>assigned</purple> to the <purple>stack</purple> 
            when a <red>function</red> is called, if the <purple>stack</purple> <red>frames</red> exceeds the 
            <purple>stack</purple> <purple>memory</purple> capacity, the <purple>stack</purple> <azure>overflow</azure> error will occur 
            and will terminate the program.
            <br/></recursion>
        <string-methods>A <purple>string</purple> is a <purple>variable</purple> that holds a <azure>sequence</azure> of 
            one or more alphanumeric <purple>characters</purple>.
            <br/><br/> 
            It is usually possible to <azure>manipulate</azure> a <purple>string</purple> to provide information or 
            to alter the contents of a <purple>string</purple> using <red>methods</red>.
            <br/></string-methods>
        <reflection><red>Reflective</red> <red>programming</red> or <red>reflection</red> is a mechanism that 
            enables a <azure>process</azure> perform 
            introspective <purple>operations</purple>, examine and modify its 
            own <purple>structure</purple> and behavior.
            <br/>
            The <red>reflection</red> <purple>APIs</purple> built into <red>programming</red> <red>languages</red> <azure>allows</azure>
            developers to inspect <azure>code</azure> at runtime.
            <br/><br/>
            <red>Reflection</red> is used to obtain information about the software <red>implementation</red> 
            (the <purple>metadata</purple>), while it is in runtime. 
            <br/><br/>
            Also <red>reflection</red> is the ability of inspecting the <azure>code's</azure> <purple>metadata</purple> 
            in runtime.
            The <purple>metadata</purple> is related to the <red>implementation</red>, contains the 
            information about the <purple>fields</purple>, <red>methods</red>, <purple>properties</purple>, 
            <purple>variable</purple>, etc. used inside the software.</reflection>
        <functions>In <red>computer</red> <red>programming</red>: a <red>function</red> is a <azure>block</azure> of organized, <azure>reusable</azure> <azure>code</azure> that 
            is used to perform a single, related action.
            <red>Functions</red> provide better modularity for your application and a high degree 
            of <azure>code</azure> <azure>reusing</azure>.
            <red>Functions</red> can be defined with <red>parameters</red>, these are local <purple>variables</purple> whose <red>scope</red>
            is on <red>function</red> level. Once the <red>function</red> ends, the <purple>variables</purple> die, and all the <purple>data</purple>
            <azure>stored</azure> in them is lost, so if everything should be kept alive, it has to be <purple>returned</purple>
            back to the caller <red>function</red> and <azure>stored</azure>.
            <br/>
            <green>Default Parameters/Arguments in Python:</green>
            <br/><br/>
            All <red>parameters</red>/<red>arguments</red> in the <red>Python</red> are passed by <purple>reference</purple>. 
            <br/></functions>
    </manifest>
    
    <manifest>
        <name>C</name>
        <description><red>C</red> is a general-purpose <red>computer</red> <red>programming</red> <red>language</red>.<br/><br/>
            It was <azure>created</azure> in the 1970s by Dennis Ritchie, and remains very widely used and 
            influential. <br/><br/>
            By design, <red>C's</red> features cleanly <red>reflect</red> the 
            capabilities of the targeted <azure>CPUs</azure>. It has found lasting use in <purple>operating</purple> 
            <red>systems</red>, device drivers, and protocol <purple>stacks</purple>, but its use in application 
            software has been decreasing. <br/><br/>
            <red>C</red> is commonly used on <red>computer</red> architectures that range from the largest 
            supercomputers to the smallest microcontrollers 
            and embedded <red>systems</red>.</description>
        <generic-programming>*General-Programming-Knowledge*
            <br/>
            <green>
            In C Language generic programming can be achieved using:
            </green>
            <br/><br/>
            
            <purple>Variable</purple> <red>argument</red> <purple>lists</purple>;<br/>
            Using <code>void *</code> and <red>function</red> <purple>pointers</purple> to <azure>write</azure> <red>generic</red> <azure>code</azure>;<br/>
            Using <purple>libraries</purple> to <azure>reuse</azure> <azure>code</azure> without copying and recompiling;<br/>
            Using <azure>plugins</azure> to get <azure>run</azure>-time <red>overriding</red>;<br/>
            Using <red>macros</red>;
            
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generic programming in C using function-like macros:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#define incr(x) (++(*x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int i=5;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    float f=5.6f;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    char c='a';</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    incr(&amp;i);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    incr(&amp;f);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    incr(&amp;c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("i=%d; f=%f; c=%c\n", i,f,c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></generic-programming>
        <variable-arguments-lists>*General-Programming-Knowledge*
            <br/>
            <red>C</red> <red>language</red> <azure>allows</azure> a <red>function</red> call to have a <purple>variable</purple> number of
            <red>arguments</red> with the <purple>variable</purple> <red>argument</red> <purple>list</purple> mechanism.<br/>
            Use ellipsis <code>...</code> to denote a <purple>variable</purple> number of <red>arguments</red> to
            the <red>compiler</red>. 
            <br/><br/>
            The ellipsis can only occur at the end of an
            <red>argument</red> <purple>list</purple>.<br/><br/>
            <green>
            Here are some standard function calls that use variable
            argument lists:
            </green>
            <br/><br/>
            <code>int printf(const char *format, ...);</code><br/>
            <code>int scanf(const char *format, ...);</code><br/>
            <code>int execlp(const char *file, const char *arg, ...);</code><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of variadic functions in C:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdarg.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int AddNumbers(int n, ...)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Variadic function to add numbers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int Sum = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Declaring pointer to the argument list</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//va_list type comes from stdarg.h</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    va_list ptr;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Initializing argument to the list pointer</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//va_start function comes from stdarg.h</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    va_start(ptr, n);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (int i = 0; i &lt; n; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Accessing current variable and </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//pointing to next one</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Sum += va_arg(ptr, int);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//va_arg function comes from stdarg.h</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Ending argument list traversal</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    va_end(ptr);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//va_end function comes from stdarg.h</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return Sum;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></variable-arguments-lists>
        <simple-data-types>*General-Programming-Knowledge*</simple-data-types>
        <complex-data-types>*General-Programming-Knowledge*
            <br/><br/>
            <green>
            The C programming language, as of C99, supports complex number math with the three 
            built-in complex types:
            </green>
            <br/><br/>
            <code>double _Complex</code><br/>
            <code>float _Complex</code><br/>
            <code>long double _Complex</code><br/>
            <br/>
            When the <azure>header</azure> <code>complex.h</code> is 
            included, the three complex number <purple>types</purple> are also accessible as <code>double complex</code>, 
            <code>float complex</code>, <code>long double complex</code>.<br/><br/></complex-data-types>
        <preprocessor-directives>*General-Programming-Knowledge*</preprocessor-directives>
        <loops>*General-Programming-Knowledge*</loops>
        <collections>*General-Programming-Knowledge*
            <br/>
            <code>Arrays</code> are <purple>collections</purple> of elements of the same <purple>data</purple> <purple>type</purple> with fixed <purple>size</purple>. 
            <br/>
            Once the <purple>array</purple> is defined, its <purple>size</purple> cannot be changed.
            <br/><br/>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Declaring arrays and initializing arrays*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int arr[5];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int array_initialized[7] = [1,2,3,4,5,6,7];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">float array_floats[3] = [2.0f, 3.0f, 2.11f];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            The <code>linked list</code> is a complex <purple>data</purple> <purple>type</purple>, which consists of a <purple>structure</purple> with 
            at least 2 elements: <purple>value</purple> and <purple>pointer</purple>
            to the next element. <br/>
            The <azure>memory</azure> can be <azure>allocated</azure> <azure>dynamically</azure> for each element <azure>added</azure> to the <purple>list</purple>. 
            <br/><br/>

            The main benefit of a <code>linked list</code>
            consists in the possibility of <azure>adding</azure> a <purple>variable</purple> number of elements, being able to 
            <azure>delete</azure> or <azure>add</azure> an element 
            without making copies
            or exchanges, but only by changing the <purple>addresses</purple> of the <purple>assigned</purple> <purple>pointers</purple> for 
            the next / previous element.
            <br/><br/>
            
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Declaring and initializing a Linked List</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void createAddElementsOnLinkedList()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Linked list definition:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    struct LinkedList{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int value; <comment>// this will store the value</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// this will store the address of the previous block of memory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        struct LinkedList * previous;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// this will store the address of the next block of memory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        struct LinkedList * next; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    };</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    struct LinkedList* list = NULL; <comment>// creating a linked list</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int counter = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    while(counter &lt; 10)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// if this is the first element to be introduced on the linked list</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        if(list == NULL)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// allocate memory.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            list = (struct LinkedList* )malloc(sizeof(struct LinkedList));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// add value</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            list-&gt;value = counter;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// there is no previous element.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            list-&gt;previous = NULL;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// we don't know if there will be a next element.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            list-&gt;next = NULL; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        else <comment>//enter here after the first element was added.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// allocate space for the next element</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            list-&gt;next = (struct LinkedList* ) malloc(sizeof(struct LinkedList)); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// we're still on the previous element, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//so assign the link to the next element.previous</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            list-&gt;next-&gt;previous = list;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// next element become current element</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            list = list-&gt;next;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// add value</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            list-&gt;value = counter;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// we don't know if there will be a next element.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            list-&gt;next = NULL;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        counter++;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//printing the linked list</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// list is currently pointing to the last element. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//So we will display it from last to first.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    while(list != NULL) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printf("%d ", list-&gt;value);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        list = list-&gt;previous; <comment>// go to the previous</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></collections>
        <collection-methods>There are no built-in <red>functions</red> for working with <purple>collections</purple> in <red>C</red> <red>language</red>.</collection-methods>
        <dynamic-memory-allocation>*General-Programming-Knowledge*</dynamic-memory-allocation>
        <read-from-file>*General-Programming-Knowledge*
            <green>File handling in C:</green>
            <br/><br/>
            <red>C</red> <red>programming</red> <red>language</red> supports four <red>pre</red>-<red>defined</red> <red>functions</red> to 
            <azure>read</azure> contents from a <purple>file</purple>, defined in <code>stdio.h</code> <azure>header</azure> <purple>file</purple>:
            <br/><br/>
            <code>fgetc()</code><br/>
            This <red>function</red> is used to <azure>read</azure> a single <purple>character</purple> from the <purple>file</purple>.<br/><br/>
            <code>fgets()</code><br/>
            This <red>function</red> is used to <azure>read</azure> <purple>strings</purple> from <purple>files</purple>.
            <br/><br/>
            <code>fscanf()</code><br/>
            This <red>function</red> is used to <azure>read</azure> formatted input from a <purple>file</purple>.<br/><br/>
            <code>fread()</code><br/>
            This <red>function</red> is used to <azure>read</azure> the <azure>block</azure> of raw <purple>bytes</purple> from <purple>files</purple>. This is used 
            to <azure>read</azure> <purple>binary</purple> <purple>files</purple>.
            <br/><br/>
            <green>
            Opening a file:
            </green>
            <br/><br/>
            To <azure>open</azure> a <purple>file</purple> use: <code>fopen(filename, mode)</code>;
            <br/><br/>
            Where:<br/><br/>
            <code>filename</code><br/>    
            The name of the actual <purple>file</purple> you want to <azure>open</azure> (or <azure>create</azure>), like filename.txt.
            <br/><br/>
            <code>mode</code><br/>    
            A single <purple>character</purple>, which represents what you want to do with the <purple>file</purple> 
            (<azure>read</azure>, <azure>write</azure> or <azure>append</azure>):<br/><br/>
            <code>w</code> - <azure>Writes</azure> to a <purple>file</purple>;<br/>
            <code>a</code> - <azure>Appends</azure> new <purple>data</purple> to a <purple>file</purple>;<br/>
            <code>r</code> - <azure>Reads</azure> from a <purple>file</purple>;<br/>
    
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Read file char by char*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE is basically a data type, and we need to </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//create a pointer variable to work with it </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">FILE* ptr; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char ch;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Opening file in reading mode</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">ptr = fopen("test.txt", "r");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if (NULL == ptr) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("file can't be opened \n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("content of this file are \n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Printing what is written in file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// character by character using loop.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">do {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ch = fgetc(ptr);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("%c", ch);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Checking if character is not EOF.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// If it is EOF stop reading.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} while (ch != EOF); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Alternatively feof function can be used:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>feof() function takes file pointer as argument </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>and returns true if pointer reaches the end of the file. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while (!feof(ptr)) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ch = fgetc(ptr);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("%c", ch);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Reading whole content of the file as string:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//fgets() reads one string at a time from the file. fgets() returns </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//a string if it is successfully read by function or returns NULL</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//if it cannot read. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Prototype: char * fgets(char *str, int size, FILE * ptr);</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while (fgets(str, 50, ptr) != NULL) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("%s", str);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>fscanf() reads formatted input from a stream.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Approach:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>fscanf reads formatted data from the files and stores it in variables.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>The data in the buffer is printed on the console till the end of the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>file is reached.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char buf[100];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while (fscanf(ptr, "%*s %*s %s ", buf) == 1)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("%s\n", buf);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></read-from-file>
        <write-to-file>*General-Programming-Knowledge*
            <br/>
            To <azure>create</azure> a <purple>file</purple>, or <azure>write</azure> to a <purple>file</purple> you can use the <code>w</code> mode inside the <code>fopen()</code> <red>function</red>.
            <br/><br/>
            <green>
            Opening a file:
            </green>
            <br/><br/>
            <red>Function</red> <red>Prototype</red>: <code>fopen(filename, mode)</code>;
            <br/><br/>
            Where:<br/><br/>
            <code>filename</code><br/>    
            The name of the actual <purple>file</purple> you want to <azure>open</azure> (or <azure>create</azure>), like filename.txt.
            <br/><br/>
            <code>mode</code><br/>    
            A single <purple>character</purple>, which represents what you want to do with the <purple>file</purple> 
            (<azure>read</azure>, <azure>write</azure> or <azure>append</azure>):<br/><br/>
            <code>w</code> - <azure>Writes</azure> to a <purple>file</purple>;<br/>
            <code>a</code> - <azure>Appends</azure> new <purple>data</purple> to a <purple>file</purple>;<br/>
            <code>r</code> - <azure>Reads</azure> from a <purple>file</purple>;<br/>
            <br/>
            The <code>w</code> mode means that the <purple>file</purple> is <azure>opened</azure> for <azure>writing</azure>. 
            <br/>
            To <azure>insert</azure> content to it, you can 
            use the <code>fprintf()</code> <red>function</red> and <azure>add</azure> the <purple>pointer</purple> <purple>variable</purple> (fptr in our example) and some text:
            <br/><br/>
            If you <azure>write</azure> to a <purple>file</purple> that already exists, the old content is <azure>deleted</azure>, and the new content 
            is <azure>inserted</azure>. 
            <br/>
            This is important to know, as you might accidentally erase existing content.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of writing to file in C</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE is basically a data type, and we need to </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//create a pointer variable to work with it </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">FILE *fptr; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Open a file in writing mode</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">fptr = fopen("filename.txt", "w");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Write some text to the file using fprintf</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">fprintf(fptr, "Some text");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Write some other text to the file fputs</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">fputs("Line wrote with fputs.", fp); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Close the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">fclose(fptr); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// this will close the file.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>    
        <br/>
        <green>
        Closing the file:
        </green>
        <br/><br/>
        It is considered as good practice, because it makes sure that:
        <br/><br/>
        
        Changes are <azure>saved</azure> properly. <br/>
        Other programs can use the <purple>file</purple> (if you want). <br/>
        Clean up unnecessary <azure>memory</azure> space. <br/><br/>
        
        If you want to <azure>add</azure> content to a <purple>file</purple> without <azure>deleting</azure> the old content, 
        you can use the <code>a</code> mode. <br/>
        The <code>a</code> mode <azure>appends</azure> content at the end of the <purple>file</purple>:<br/>
        
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">FILE *fptr;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Open a file in append mode</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">fptr = fopen("filename.txt", "a"); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Just like with the w mode; if the file does not exist, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>the a mode will create a new file with the "appended" content.*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Append some text to the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">fprintf(fptr, "\nHi everybody!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Close the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">fclose(fptr);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></write-to-file>
        <serialization>*General-Programming-Knowledge*
            <red>C</red> and <red>C++</red> do not provide <azure>serialization</azure> as any sort of <azure>high</azure>-<azure>level</azure> <red>construct</red>, 
            but both <red>languages</red> support <azure>writing</azure> any of the built-in <purple>data</purple> <purple>types</purple>, as well as 
            plain old <purple>data</purple> <purple>structs</purple>, as <purple>binary</purple> <purple>data</purple>. 
            <br/><br/>
            As such, it is usually trivial to <azure>write</azure> custom <azure>serialization</azure> <red>functions</red>.
            <br/></serialization>
        <deserialization>*General-Programming-Knowledge*
            <br/>
            <red>C</red> and <red>C++</red> do not provide <azure>serialization</azure> as any sort of <azure>high</azure>-<azure>level</azure> <red>construct</red>, 
            but both <red>languages</red> support <azure>writing</azure> any of the built-in <purple>data</purple> <purple>types</purple>, as well as 
            plain old <purple>data</purple> <purple>structs</purple>, as <purple>binary</purple> <purple>data</purple>. 
            <br/><br/>
            As such, it is usually trivial to <azure>write</azure> custom <azure>serialization</azure> <red>functions</red>.
            <br/></deserialization>
        <enums>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Syntax: enum flag{constant1, constant2, constant3, ....... };</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// An example program to demonstrate working</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// of enum in C</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">enum week{Mon, Tue, Wed, Thur, Fri, Sat, Sun};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    enum week day;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    day = Wed;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("%d",day);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></enums>
        <concurrent-programming>*General-Programming-Knowledge*
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of using multi-threading in C Language*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdlib.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;unistd.h&gt; <comment>//Header file for sleep().</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;pthread.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// A normal C function that is executed as a thread  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// when its name is specified in pthread_create() </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void *myThreadFun(void *vargp) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{ </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    sleep(1); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("Printing GeeksQuiz from Thread \n"); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return NULL; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{ </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    pthread_t thread_id; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("Before Thread\n"); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    pthread_create(&amp;thread_id, NULL, myThreadFun, NULL); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    pthread_join(thread_id, NULL); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("After Thread\n"); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    exit(0); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        In <red>C</red>/<red>C++</red>: one of the main workhorse <red>functions</red> that makes <azure>multiprocessing</azure> 
        possible is <code>fork()</code>.
        <br/><br/>
        <code>fork()</code> is a <red>function</red> that clone a <azure>process</azure>, spawning an identical 
        copy of it.
        <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of multi-processing in C/C++:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;unistd.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdlib.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;sys/wait.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main(int argc, char **argv)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    pid_t pid = fork ();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (pid != 0) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        waitpid (pid, NULL, 0);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf ("Hello, World!\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></concurrent-programming>
        <exception-handling><red>C</red> does not provide direct support to 
            <red>error</red> <red>handling</red> (or <red>exception</red> <red>handling</red>).</exception-handling>
        <bitwise-operators>*General-Programming-Knowledge*
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example on how to use the bitwise operators:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// a = 5(00000101), b = 9(00001001)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    unsigned char a = 5, b = 9;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// The result is 00000001</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("a = %d, b = %d\n", a, b);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("a &amp; b = %d\n", a &amp; b);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// The result is 00001101</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("a|b = %d\n", a | b);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// The result is 00001100</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("a^b = %d\n", a ^ b);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// The result is 11111010</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("~a = %d\n", a = ~a);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// The result is 00010010</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("b&lt;&lt;1 = %d\n", b &lt;&lt; 1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// The result is 00000100</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("b&gt;&gt;1 = %d\n", b &gt;&gt; 1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        a = 5, b = 9</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        a&amp;b = 1</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        a|b = 13</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        a^b = 12</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        ~a = 250</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        b&lt;&lt;1 = 18</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        b&gt;&gt;1 = 4</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></bitwise-operators>
        <default-parameters>*General-Programming-Knowledge*
            <br/>
            There are no <azure>default</azure> <red>parameters</red> in <red>C</red>. <br/><br/>
            But one way to achieve this is by passing <purple>NULL</purple> <purple>pointers</purple> and 
            then <purple>set</purple> the <purple>values</purple> to the <azure>default</azure> if <purple>NULL</purple> is passed.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of function with default parameters in C:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void OpenFile(char *path)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    FILE *outHandle;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (path==NULL)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        outHandle=fopen("DummyFile", "w");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        outHandle=fopen(path, "w");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    char* filePath;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    OpenFile(filePath);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></default-parameters>
        <interfaces>*General-Programming-Knowledge*
            <br/>
            In <red>C</red> - an <red>interface</red> can be <red>implemented</red> as a <purple>set</purple> of <red>function</red> declarations without 
            any <red>implementation</red> details. <br/><br/>
            <brown>
            It defines a contract that concrete implementations must adhere to by providing 
            definitions for all the functions declared in the interface.
            </brown>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Declare an interface for a shape</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">struct shape_interface </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  <comment>// Function pointers for the interface functions</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  double (*area)(void*);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  double (*perimeter)(void*);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>In OOP there are classes that store to both the variables and </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>the methods of an object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>In C we can have structs that store variables and function  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>pointers initialized with references of functions defined </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>outside the struct to hold the implementation for defined </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>behaviours.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>This is somehow similar to OOP.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></interfaces>
        <macros>*General-Programming-Knowledge*</macros>
        <defines>*General-Programming-Knowledge*</defines>
        <random-generators>The <code>rand()</code> <red>function</red> <purple>returns</purple> the <red>random</red> <purple>integers</purple> whose range from <code>0</code> to 
            <code>RAND_MAX</code>. <br/><br/>
            The <code>RAND_MAX</code> is a symbolic <purple>constant</purple> that defines in <code>stdlib.h</code> <azure>header</azure> <purple>file</purple>, whose <purple>value</purple> 
            is greater but less than 32767 depending on the <red>C</red> <purple>libraries</purple>.<br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using rand() to generate random numbers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;conio.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdlib.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void main()  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// use rand() function to generate the number  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf (" The random number is: %d", rand());  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf ("\n The random number is: %d", rand());  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf (" \n The random number is: %d", rand());  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf ("\n The random number is: %d", rand());  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    getch();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}          </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            The <code>srand()</code> <red>function</red> is a <red>C</red> <purple>library</purple> <red>function</red> that determines the initial 
            <purple>point</purple> to generate 
            different series of <red>pseudo</red>-<red>random</red> numbers. 
            <br/><br/>
            A <code>srand()</code> <red>function</red> cannot be used without 
            using a <code>rand()</code> <red>function</red>. 
            <br/><br/>
            The <code>srand()</code> <red>function</red> is required to <purple>set</purple> the <purple>value</purple> of the seed 
            only once in a program to generate the different results of <red>random</red> <purple>integers</purple> before 
            calling the <code>rand()</code> <red>function</red>. <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using srand() to generate pseudo-random numbers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdlib.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;time.h&gt;  <comment>// use time.h header file to use time  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int num, i;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    time_t t1; <comment>// declare time variable  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf(" Enter a number to set the limit for a random number \n");  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    scanf (" %d", &amp;num);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/* define the random number generator */</comment>  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    srand ( (unsigned) time (&amp;t1)); <comment>// pass the srand() parameter  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("\n"); <comment>// print the space</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/* generate random number between 0 to 50 */</comment>  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></random-generators>
        <command-line-arguments>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of command line arguments in C:*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main(int argc, char *argv[]) { <comment>/* ... */</comment> }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//OR</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main(int argc, char **argv) { <comment>/* ... */</comment> }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></command-line-arguments>
        <ternary-operator>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Using IF ELSE statements:*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int a = 10, b = 20, c;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if (a &lt; b) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    c = a;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    c = b;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("%d", c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Using TERNARY operator:*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int a = 10, b = 20, c;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c = (a &lt; b) ? a : b;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("%d", c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*The output of both samples of code from above will result in: c = 3*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></ternary-operator>
        <modular-programming>*General-Programming-Knowledge*
            <br/>
            In <red>C</red> <red>language</red> this is achieved by placing 
            the <red>interface</red> definition in a <azure>header</azure> <purple>file</purple> and the <red>implementation</red> in a <azure>source</azure> 
            <purple>file</purple>. <br/>
            The disciplined use of <code>static</code> keyword is practiced in order to hide <red>implementation</red> details.
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*FILE module.h*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> extern unsigned int Calculate_NoOfChars_In_string(char* str);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*FILE module.c*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">unsigned int Calculate_NoOfChars_In_string(char* str)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    unsigned int counter = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    while(str[counter]!="\0")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        counter++;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return counter;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*FILE main.c*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;module.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    char strA[10] = "Some text.";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    unsigned int length = Calculate_NoOfChars_In_string(strA);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("String length is: %d\n", length);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></modular-programming>
        <string-methods>*General-Programming-Knowledge*
            <br/>
            <red>C</red> has many useful <purple>string</purple> <red>functions</red>, which can be used to perform certain <purple>operations</purple> 
            on <purple>strings</purple>.<br/><br/>
            To use them, you must include the <code>&lt;string.h&gt;</code> <azure>header</azure> <purple>file</purple> in your program.
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* GET THE SIZE (IN CHARACTERS) OF STRINGS */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("%d", strlen(alphabet));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* Note that sizeof and strlen behaves differently, as sizeof also </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>includes the \0 character when counting.*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* CONCATENATE STRINGS */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char str1[20] = "Hello ";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char str2[] = "World!";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Concatenate str2 to str1 (result is stored in str1)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">strcat(str1, str2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Print str1</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("%s", str1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* COPY STRINGS */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char str1[20] = "Hello World!";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char str2[20];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Copy str1 to str2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">strcpy(str2, str1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Print str2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("%s", str2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* COMPARE STRINGS */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char str1[] = "Hello";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char str2[] = "Hello";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">char str3[] = "Hi";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Compare str1 and str2, and print the result</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("%d\n", strcmp(str1, str2));  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Returns 0 (the strings are equal)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Compare str1 and str3, and print the result</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("%d\n", strcmp(str1, str3));  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Returns -4 (the strings are not equal)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></string-methods>
        <datatype-conversions>*General-Programming-Knowledge*
            <br/>
            It is one of the important concepts introduced in 'C' 
            <red>programming</red>.<br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Automatic conversion: int to float</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">float myFloat = 9;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("%f", myFloat); <comment>// 9.000000</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//the compiler automatically converts the int value </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//9 to a float value of 9.000000.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Automatic conversion: float to int</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int myInt = 9.99;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("%d", myInt); <comment>// 9</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//the compiler automatically converts the float value of </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//9.99 to int value 9.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Calculate the percentage of a user's score in relation to </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//the maximum score in a game:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Set the maximum possible score in the game to 500</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int maxScore = 500;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//The actual score of the user</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int userScore = 420;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Calculate the percentage of the user's score in relation to the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>maximum available score.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Convert userScore to float to make sure that the division is accurate.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">float percentage = (float) userScore / maxScore * 100.0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Print the percentage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">printf("User's percentage is %.2f", percentage);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></datatype-conversions>
        <optional-parameters>*General-Programming-Knowledge*</optional-parameters>
        <operators>*General-Programming-Knowledge*
            <green><br/>Misc Operators:<br/></green>
                <br/> 
                <code>sizeof()</code><br/> 
                It <purple>returns</purple> the <purple>size</purple> of a <purple>variable</purple>. <br/>
                <code>sizeof(a)</code>, 
                where <code>a</code> is <purple>integer</purple>, will <purple>return</purple> 4.
                <br/><br/>
                <code>&amp;</code><br/>
                It <purple>returns</purple> the <purple>address</purple> of a <purple>variable</purple>.<br/> 
                <code>&amp;a;</code> <purple>returns</purple> the actual 
                <purple>address</purple> of the <purple>variable</purple>.
                <br/><br/>
                <code>*</code><br/>
                <purple>Pointer</purple> to a <purple>variable</purple>.<br/>
                <code>*a;</code> also known as deferefering the <purple>pointer</purple> <code>a</code>
                <br/><br/>
                <code>? :</code><br/>
                <azure>Conditional</azure> Expression. <br/>
                If <azure>Condition</azure> is <code>true</code> ? 
                then <purple>value</purple> X : otherwise <purple>value</purple> Y; 
                <br/></operators>
        <pre-post-incrementation>*General-Programming-Knowledge*
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//pre increment operator</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int x = 10, a;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    a = ++x; <comment>// x will be incremented to 11 then value of x is assigned to a;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("a = %d\n", a);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("x = %d\n", x);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        a = 11</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        x = 11</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//post increment operator</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int x = 10, a;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    a = x++; <comment>// x value is assigned to a, then x value gets incremented to 11;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("a = %d\n", a);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("x = %d\n", x);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        a = 10</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        x = 11</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></pre-post-incrementation>
        <recursion>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of recursion in C:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int fact (int);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int n, f;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("Enter the number whose factorial you want to calculate?");  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    scanf("%d", &amp;n);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Calling the recursive function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    f = fact(n);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Printing the result:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printf("factorial = %d",f);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int fact(int n)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Recursive function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (n==0)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return 0;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else if ( n == 1)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return 1;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return n*fact(n-1);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></recursion>
        <polymorphism>*General-Programming-Knowledge*
            <br/>
            <green>Polymorphism in C:</green>
            <br/><br/>
            Even though <red>C</red> does not support <red>OOP</red>. A <purple>type</purple> of <red>polymorphism</red> can still 
            be achieved
            by using the <red>generic</red> <purple>pointer</purple>.
            <br/><br/>
            The <purple>type</purple> <code>void *</code> is used as a <red>generic</red> <purple>pointer</purple> in 
            <red>C</red> (similar in concept to <red>Object</red> <purple>type</purple> in <red>OOP</red>). 
            <br/><br/>
            <purple>Pointers</purple> to any <purple>type</purple> can be <purple>assigned</purple> to a
            <purple>variable</purple> of <purple>type</purple> <code>void *</code>, which <azure>allows</azure> <red>parametric</red> <red>polymorphism</red>.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of parametric polymorphism in C:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void swap(void v[], int i, int j)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//interchange values between index i and j</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    void *tmp = v[i]; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    v[i] = v[j]; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    v[j] = tmp;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void qsort(void v[], int left, int right, int (*compare)(void *, void *))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//sort to increasing order elements between index</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//left and right from array v[]</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int i, last;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/* do nothing if array contains */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/* less than two elements */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (left &gt;= right) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    swap(v, left, (left + right)/2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    last = left;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (i = left+1; i&lt;= right; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        if ((*compare)(v[i], v[left]) &lt; 0)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            swap(v, ++last, i);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    swap(v, left, last);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Recursion</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    qsort(v, left, last-1, compare);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    qsort(v, last+1, right, compare);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></polymorphism>
    </manifest>
    
    <manifest>
        <name>C++</name>
        <description><red>C++</red> is a <azure>high</azure>-<azure>level</azure>, general-purpose <red>programming</red> <red>language</red> 
            <azure>created</azure> by Danish <red>computer</red> scientist Bjarne Stroustrup. <br/><br/>
            First released in 1985 as an extension of the <red>C</red> <red>programming</red> <red>language</red>, 
            it has since expanded significantly over time; as of 1997, <red>C++</red> has <red>object</red>-<red>oriented</red>, 
            <red>generic</red>, and <red>functional</red> features. <br/>
            In addition to facilities for <azure>low</azure>-<azure>level</azure> <azure>memory</azure> 
            <azure>manipulation</azure> for making things like microcomputers or to make <purple>operating</purple> <red>systems</red> 
            like Linux or Windows. <br/><br/>
            
            It is almost always <red>implemented</red> as a <red>compiled</red> <red>language</red>, 
            and many vendors provide <red>C++</red> compilers, including the Free Software Foundation, 
            LLVM, Microsoft, Intel, Embarcadero, Oracle, and IBM.</description>
        <oop>*General-Programming-Knowledge*</oop>
        <encapsulation>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of encapsulation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Employee </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  private:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Private attribute</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int salary;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Setter</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    void setSalary(int s) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      salary = s;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Getter</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int getSalary() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      return salary;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Employee myObj;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    myObj.setSalary(50000);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; myObj.getSalary();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></encapsulation>
        <polymorphism>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of polymorphism</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>The word polymorphism means having many forms. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Typically, polymorphism occurs when there is a hierarchy of classes </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>and they are related by inheritance.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>C++ polymorphism means that a call to a member function will cause a </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>different function to be executed depending on the type of object </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>that invokes the function. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Example: if a parent class function is set to be overridable, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>then a parent class pointer can have functionality of the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>child class object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>A pure virtual function is a function that is declared in </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>the parent class and it should be defined in every child classes.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Syntax: virtual void DisplayFunction () = 0;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Shape</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//By default a member without access-specifier is set to private.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    protected:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int length;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int height;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Each child class has to provide its own definition of this method.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        virtual void DisplayInfo() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; "This is the parent class." &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Square: public Shape</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int area;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void CalcArea()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            area=length*height;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Square (int len, int hg)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            length=len;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            height=hg;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            CalcArea();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        };</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void DisplayArea()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; "Area: " &lt;&lt; area &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//This function overrides the parent class function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void DisplayInfo()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; "This is the child class." &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Circle: public Shape</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int radius;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Circle(int len)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            radius=len/2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void DisplayRadius()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; "Radius: " &lt;&lt; radius &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>87  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>88  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>89  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>90  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>91  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Shape *p;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>92  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Circle circle_object(22);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>93  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Square square_object(4,3);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>94  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>95  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>96  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    The pointer of type Shape can reference any of the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>97  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    Shape class children, but having only </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>98  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    the functionality of Shape Class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>99  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>100 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>101 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p=&amp;circle_object;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>102 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p-&gt;DisplayInfo();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>103 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p=&amp;square_object;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>104 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p-&gt;DisplayInfo();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>105 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>106 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int a;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>107 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cin &gt;&gt; a;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>108 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>109 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>110 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>111 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    Using same variable we accessed different behaviour for </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>112 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    each child class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>113 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>114 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>115 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></polymorphism>
        <inheritance>*General-Programming-Knowledge*
            <br/>
            In <red>C++</red>, it is possible to <red>inherit</red> <purple>attributes</purple> and <red>methods</red> from one <code>class</code> 
            to another. <br/><br/>
            <green>
            We group the "inheritance concept" into two categories:
            </green>
            <br/><br/>
            
            - <azure>derived</azure> <red>class</red> (<red>child</red>) - the <red>class</red> that <red>inherits</red> from another <red>class</red>;<br/>
            - <red>base</red> <red>class</red> (<red>parent</red>) - the <red>class</red> being <red>inherited</red> from;<br/><br/>
            
            To <red>inherit</red> from a <code>class</code>, use the : symbol.<br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;conio.h&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//BASE CLASS</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Shape{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    protected: </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//protected variables are visible into this class and the other classes </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//that are inherited from this.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    string name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Shape(string newname)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        name=newname;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    string getName() const</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//CHILD CLASS ONE</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Circle : public Shape </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//making Circle class derive from the Shape class (setting the inheritance).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//inheritance is a way to make 2 classes share the same variables between each other</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    double radius; <comment>//this variable can be private, or protected or public (anything).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Circle(string inheritedName, double newradius) : Shape (inheritedName)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//this will call the Shape constructor which will set a value into it's string </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//variable called 'name', in this way, a variable will be used in 2 classes.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            radius=newradius;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        double getCircleRadius() const</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return radius;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//CHILD CLASS TWO</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Rectangle : public Shape </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// making the Rectangle class derive from Shape Class, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//let the Rectangle Class, use the protected variables of the Shape Class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    double length, width;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Rectangle (string inheritedName2, double newlength, double newwidth): Shape (inheritedName2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            length=newlength;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            width=newwidth;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        double getRectangleLength() const</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return length;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        double getRectangleWidth () const</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return width;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Shape object("Shape Class String"); <comment>//create object</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; object.getName() &lt;&lt; endl; <comment>//calling a function from the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; endl &lt;&lt; "CHILD ONE CLASS: " &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Circle objectchild ("Circle (stored in Shape Class String)", 3.0); <comment>//create object</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//calling a function from Shape Class using the object from Circle Class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; objectchild.getName() &lt;&lt; endl; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; objectchild.getCircleRadius() &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; endl &lt;&lt; "CHILD TWO CLASS: " &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Rectangle objectchild2("Rectangle (stored in Shape Class String)", 20.0, 65.0); <comment>//create object</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>87  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>88  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//calling a function from Shape Class using the object from Rectangle Class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>89  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; objectchild2.getName() &lt;&lt; endl; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>90  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; objectchild2.getRectangleLength() &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>91  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; objectchild2.getRectangleWidth() &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>92  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>93  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    getch();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>94  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>95  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>96  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></inheritance>
        <abstraction>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example of Data Abstraction in C++</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class implementAbstraction </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int a, b;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// method to set values of private members</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void set(int x, int y)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            a = x;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            b = y;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void display()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    implementAbstraction obj;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    obj.set(10, 20);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    obj.display();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        a = 10</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        b = 20</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstraction>
        <generic-programming>*General-Programming-Knowledge*
            <br/>    
            In <red>C++</red> the <red>templates</red> generalize the algorithm to make it <purple>data</purple> <purple>type</purple>-<azure>independent</azure>.
            <br/><br/>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generic programming in C++</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Template Function with a Type T</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// During instantiation, this T will be replaced by the data type of argument.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">template &lt;class T&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">T maxNum (T a, T b) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> return (a &gt;   b ? a : b); <comment>//ternary operator</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int x = 5, y = 2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    float a = 4.5, b = 1.3;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    std::cout &lt;&lt; maxNum&lt;int&gt;(x, y) &lt;&lt; "\n";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    std::cout &lt;&lt; maxNum&lt;float&gt;(a, b);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></generic-programming>
        <variable-arguments-lists>*General-Programming-Knowledge*
            <br/>
            <red>Functions</red> with a <purple>variable</purple> number of <red>arguments</red> in <red>C++</red> can be easily <red>implemented</red> using 
            a <purple>vector</purple> or an <purple>array</purple> if all the <red>arguments</red> are the same <purple>type</purple>.
            <br/><br/>
            If all <red>arguments</red> are of different <purple>types</purple>, then we need to use the <code>cstdarg</code> <azure>header</azure> <purple>file</purple> 
            to <red>implement</red> <red>variadic</red> <red>functions</red>.
            <br/><br/>
            <red>Variadic</red> <red>functions</red> do not put restrictions on the <purple>types</purple> of <red>arguments</red>. <br/>
            They also do not perform <purple>integer</purple> and <purple>floating</purple>-<purple>point</purple> enhancements.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Implementation of variable arguments using vector.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;vector&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Using vector of string as a parameter to store a variable number of strings.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void printNames(vector&lt;string&gt;  nameVector) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (string &amp;name : nameVector) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; name &lt;&lt; " ";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; '\n';</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printNames({"Scaler", "Topics"});</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printNames({"Technopedia", "for", "your", "mastermind!"});</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Implementation of variable arguments using cstdarg variadic functons.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;cstdarg&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void printDeveloperData(const char* fmt...) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    va_list args;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    va_start(args, fmt);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    while (*fmt != '\0') </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        if (*fmt == 'd') </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int version = va_arg(args, int);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            std::cout &lt;&lt; "C++ Version: " &lt;&lt; version;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        else if (*fmt == 'c') </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int name = va_arg(args, int);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            std::cout &lt;&lt; "Name: " &lt;&lt; static_cast&lt;char&gt; (name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        else if (*fmt == 'f') </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            double stability_percentage = va_arg(args, double);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            std::cout &lt;&lt; "Stability Percentage: " &lt;&lt; stability_percentage &lt;&lt; "%";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        ++fmt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; '\n';</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    va_end(args);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printDeveloperData("cdf", 'B', 20, 94.7);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Implementation of variable arguments using variadic templates.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">template &lt;typename T&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void printDeveloperData(T t) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; t &lt;&lt; '\n' ;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">template&lt;typename T, typename... Args&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void printDeveloperData(T t, Args... args) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; t &lt;&lt; '\n';</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printDeveloperData(args...) ;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printDeveloperData("Bjarne", 20, 94.7);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></variable-arguments-lists>
        <simple-data-types>All <purple>variables</purple> use <purple>data</purple> <purple>type</purple> during declaration to restrict the <purple>type</purple> of <purple>data</purple> to 
            be <azure>stored</azure>. <br/>
            Therefore, we can say that <purple>data</purple> <purple>types</purple> are used to tell the <purple>variables</purple> 
            the <purple>type</purple> of <purple>data</purple> they can <azure>store</azure>. <br/><br/>
            Whenever a <purple>variable</purple> is defined in <red>C++</red>, 
            the <red>compiler</red> <azure>allocates</azure> some <azure>memory</azure> for that <purple>variable</purple> <red>based</red> on the <purple>data</purple> <purple>type</purple> 
            with which it is declared. <br/><br/>
            Every <purple>data</purple> <purple>type</purple> requires a different amount of <azure>memory</azure>.
            <br/><br/>
            <green>The datatypes presented on C Language are still available in C++:</green>
            <br/><br/>
            *General-Programming-Knowledge*
            <br/><br/>
            <green>Primitive Datatypes:</green><br/><br/>
            
            <purple>Integer</purple><br/>
            <purple>Character</purple><br/>
            <purple>Boolean</purple><br/>
            <purple>Floating</purple> <purple>Point</purple><br/>
            <purple>Double</purple> <purple>Floating</purple> <purple>Point</purple><br/>
            <purple>Valueless</purple> or <purple>Void</purple><br/>
            <purple>Wide</purple> <purple>Character</purple><br/>
            
            <br/></simple-data-types>
        <complex-data-types>*General-Programming-Knowledge*
            <br/>
            <brown>Aditional to the C Language, C++ introduced classes as a user-defined datatype. </brown>
            <br/><br/>
            <green>Derived Datatypes:</green><br/>
            
            <red>Function</red><br/>
            <purple>Array</purple><br/>
            <purple>Pointer</purple><br/>
            <purple>Reference</purple><br/>
            
            <br/>
            <green>User-defined Datatypes:</green><br/>
            
            <red>Class</red><br/>
            <purple>Structure</purple><br/>
            <purple>Union</purple><br/>
            <purple>Enumeration</purple><br/>
            <purple>Typedef</purple> defined Datatype<br/></complex-data-types>
        <preprocessor-directives>*General-Programming-Knowledge*</preprocessor-directives>
        <loops>*General-Programming-Knowledge*
            <br/>
            <green>
            Additional to the C language: 
            </green>
            <br/><br/>
            Additional to the <azure>loops</azure> presented in <red>C</red> <red>language</red>, there is also a "<azure>for</azure>-<azure>each</azure> <azure>loop</azure>" 
            (introduced in <red>C++</red> version 11 (2011), which is used exclusively to <azure>loop</azure> through 
            elements in an <purple>array</purple> (or other <purple>data</purple> <purple>sets</purple>):
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of foreach loop in C++*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int myNumbers[5] = {10, 20, 30, 40, 50};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for (int i : myNumbers) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  cout &lt;&lt;  i &lt;&lt;  "\n";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></loops>
        <collections>*General-Programming-Knowledge*
            <br/>
            Additional to <red>C</red> <red>Language</red>: <red>C++</red> introduced several new <purple>collection</purple> <red>classes</red> datatypes:
            <br/><br/>
            <green>
                Vector: 
            </green>
            <br/><br/>
            The <red>C++</red> Standard <purple>Library</purple> <purple>vector</purple> <red>class</red> is a <red>class</red> <red>template</red> for <azure>sequence</azure> containers.<br/>
            <br/>
            
            <purple>Vector</purple> is a <purple>type</purple> of <azure>dynamic</azure> <purple>array</purple> which has the ability to resize 
            automatically after <azure>insertion</azure> or <azure>deletion</azure> of elements. <br/>
            The elements in <code>vector</code> 
            are placed in contiguous storage so that they can be accessed and traversed using 
            iterators. <br/>
            Element is <azure>inserted</azure> at the end of the <code>vector</code>.<br/><br/>
            
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;vector&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Create a vector containing integers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    std::vector&lt;int&gt;  v = {8, 4, 5, 9};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Add two more integers to vector</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    v.push_back(6);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    v.push_back(9);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Overwrite element at position 2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    v[2] = -1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Print out the vector</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (int n : v)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        std::cout &lt;&lt; n &lt;&lt; ' ';</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    std::cout &lt;&lt; '\n';</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>    
        <green>
        List: 
        </green>
        <br/><br/>
        
        <purple>List</purple> is a <purple>double</purple> linked <azure>sequence</azure> that supports both forward and backward 
        traversal. <br/>
        The time taken in the <azure>insertion</azure> and <azure>deletion</azure> in the beginning, end 
        and middle is <purple>constant</purple>.<br/> 
        It has the non-contiguous <azure>memory</azure> and there is no 
        pre-<azure>allocated</azure> <azure>memory</azure>.<br/>
        
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// C++ program to demonstrate the use of list containers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;list&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// defining list</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    list&lt;int&gt;  gqlist{12,45,8,6};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (auto i : gqlist) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; i &lt;&lt; ' ';</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></collections>
        <collection-methods>Some of the <red>methods</red> available in <red>C++</red> for the <purple>Collection</purple> <purple>Type</purple> <red>Classes</red>: 
            <purple>Vector</purple> or <purple>List</purple> are:
            <br/><br/>
            <green>Capacity:</green><br/><br/>
            <code>size()    </code><br/><purple>Return</purple> <purple>size</purple><br/><br/>
            <code>max_size()</code><br/><purple>Return</purple> maximum <purple>size</purple><br/><br/>
            <code>resize()    </code><br/>Change <purple>size</purple><br/><br/>
            <code>capacity()</code><br/><purple>Return</purple> <purple>size</purple> of <azure>allocated</azure> storage capacity<br/><br/>
            <code>empty()    </code><br/>Test whether <purple>vector</purple> is empty<br/><br/>
            <code>reserve()    </code><br/>Request a change in capacity<br/><br/>
            <code>shrink_to_fit()</code><br/>Shrink to fit<br/><br/>
            <br/>
            <green>Element access:</green><br/><br/>
            <code>operator[]</code><br/>Access element<br/><br/>
            <code>at()</code><br/>Access element<br/><br/>
            <code>front()</code><br/>Access first element<br/><br/>
            <code>back()</code><br/>Access last element<br/><br/>
            <code>data()</code><br/>Access <purple>data</purple><br/><br/>
            <br/>
            <green>Modifiers:</green><br/><br/>
            <code>assign()</code><br/><purple>Assign</purple> <purple>vector</purple> content<br/><br/>
            <code>push_back()</code><br/><azure>Add</azure> element at the end<br/><br/>
            <code>pop_back()</code><br/><azure>Delete</azure> last element<br/><br/>
            <code>insert()</code><br/><azure>Insert</azure> elements<br/><br/>
            <code>erase()</code><br/>Erase elements<br/><br/>
            <code>swap()</code><br/>Swap content<br/><br/>
            <code>clear()</code><br/>Clear content<br/><br/>
            <code>emplace()</code><br/><red>Construct</red> and <azure>insert</azure> element<br/><br/>
            <code>emplace_back()</code><br/><red>Construct</red> and <azure>insert</azure> element at the end<br/><br/></collection-methods>
        <dynamic-memory-allocation>*General-Programming-Knowledge*
            <br/>
            <green>
            Additional to the C language: 
            </green>
            <br/><br/>
            <red>C++</red> integrates the <purple>operators</purple> <code>new</code> and <code>delete</code> for <azure>allocating</azure> <azure>dynamic</azure> <azure>memory</azure>.
            <br/><br/>
            <purple>Operators</purple> <code>new</code> and <code>new[]</code>: 
            <br/><br/>
            <azure>Dynamic</azure> <azure>memory</azure> is <azure>allocated</azure> using <purple>operator</purple> <code>new</code>. <br/>
            <code>new</code> is followed by a <purple>data</purple> 
            <purple>type</purple> specifier and, if a <azure>sequence</azure> of more than one element is required, 
            the number of these within brackets <code>[]</code>. <br/>
            It <purple>returns</purple> a <purple>pointer</purple> to the beginning of the new <azure>block</azure> of <azure>memory</azure> <azure>allocated</azure>. <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int * foo;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">foo = new int [5];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        In this case, the <red>system</red> <azure>dynamically</azure> <azure>allocates</azure> space for five elements of <purple>type</purple> <code>int</code> 
        and <purple>returns</purple> a <purple>pointer</purple> to the first element of the <azure>sequence</azure>, which is <purple>assigned</purple> to 
        <code>foo</code> (a <purple>pointer</purple>). <br/><br/>
        Therefore, <code>foo</code> now <purple>points</purple> to a valid <azure>block</azure> of <azure>memory</azure> with space 
        for five elements of <purple>type</purple> <code>int</code>.<br/>
        <br/>
        <purple>Operators</purple> <code>delete</code> and <code>delete[]</code>: 
        <br/><br/>
        In most cases, <azure>memory</azure> <azure>allocated</azure> <azure>dynamically</azure> is only needed during specific periods 
        of time within a program; once it is no longer needed, it can be freed so that 
        the <azure>memory</azure> becomes available again for other requests of <azure>dynamic</azure> <azure>memory</azure>. <br/>
        <br/>
        This is the purpose of <purple>operator</purple> <code>delete</code>, whose syntax is: <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example of dynamic allocation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// and deallocation of memory using new and delete</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Pointer initialization to null</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int* p = NULL;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Request memory for the variable</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// using new operator</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p = new (nothrow) int;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (!p)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "allocation of memory failed\n";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Store value at allocated address</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        *p = 29;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "Value of p: " &lt;&lt; *p &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Request block of memory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// using new operator</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    float* r = new float(75.25);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; "Value of r: " &lt;&lt; *r &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Request block of memory of size n</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int n = 5;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int* q = new (nothrow) int[n];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (!q)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "allocation of memory failed\n";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (int i = 0; i &lt; n; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            q[i] = i + 1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "Value store in block of memory: ";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (int i = 0; i &lt; n; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; q[i] &lt;&lt; " ";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// freed the allocated memory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    delete p;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    delete r;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// freed the block of allocated memory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    delete[] q;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Value of p: 29</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Value of r: 75.25</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Value store in block of memory: 1 2 3 4 5 </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></dynamic-memory-allocation>
        <read-from-file>*General-Programming-Knowledge*
            The <code>fstream</code> <purple>library</purple> can be used in <red>C++</red> to work with <purple>files</purple>.
            <br/><br/>
            There are three <red>classes</red> included in the <code>fstream</code> <purple>library</purple>, 
            which are used to <azure>create</azure>, <azure>write</azure> or <azure>read</azure> <purple>files</purple>:
            <br/><br/>
            <green>Class description:</green><br/><br/>
            <code>ofstream</code> - <azure>Creates</azure> and <azure>writes</azure> to <purple>files</purple>.<br/>
            <code>ifstream</code> - <azure>Reads</azure> from <purple>files</purple>.<br/>
            <code>fstream</code>  - A combination of <code>ofstream</code> and <code>ifstream</code>: 
            <azure>creates</azure>, <azure>reads</azure>, and <azure>writes</azure> to <purple>files</purple>.
            <br/><br/>
            To <azure>read</azure> from a <purple>file</purple>, use either the <code>ifstream</code> or <code>fstream class</code>, and the name of the <purple>file</purple>.
            <br/><br/>
            Note: we also use a <code>while</code> <azure>loop</azure> together with the <code>getline()</code> <red>function</red> 
            (which belongs to the <code>ifstream</code> <red>class</red>) to <azure>read</azure> the <purple>file</purple> line by line, and to print 
            the content of the <purple>file</purple>:
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Create a text string, which is used to output the text file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;fstream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    string myText;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Read from the text file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifstream MyReadFile("filename.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Use a while loop together with the getline() </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//to read the file line by line</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    while (getline (MyReadFile, myText)) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      <comment>// Output the text from the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      cout &lt;&lt; myText;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Close the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    MyReadFile.close(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//It is considered good practice to close the file, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//and it can clean up unnecessary memory space.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></read-from-file>
        <write-to-file>The <code>fstream</code> <purple>library</purple> can be used in <red>C++</red> to work with <purple>files</purple>.
            <br/><br/>
            There are three <red>classes</red> included in the <code>fstream</code> <purple>library</purple>, which are used to 
            <azure>create</azure>, 
            <azure>write</azure> or <azure>read</azure> <purple>files</purple>:
            <br/><br/>
            <green>Class description:</green><br/><br/>
            <code>ofstream</code> - <azure>Creates</azure> and <azure>writes</azure> to <purple>files</purple>.<br/>
            <code>ifstream</code> - <azure>Reads</azure> from <purple>files</purple>.<br/>
            <code>fstream</code> - A combination of <code>ofstream</code> and <code>ifstream</code>: 
            <azure>creates</azure>, <azure>reads</azure>, and <azure>writes</azure> to <purple>files</purple>.
            <br/><br/>
            <azure>Create</azure> and <azure>Write</azure> To a <purple>File</purple>:
            <br/><br/>
            To <azure>create</azure> a <purple>file</purple>, use either the <code>ofstream</code> or <code>fstream class</code>, and specify 
            the name of the <purple>file</purple>.
            <br/><br/>
            To <azure>write</azure> to the <purple>file</purple>, use the <azure>insertion</azure> <purple>operator</purple> (<code>&lt;&lt;</code>).<br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of writing to file using fstream in C++</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;fstream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Create and open a text file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofstream MyFile("filename.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Write to the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    MyFile &lt;&lt; "Files can be tricky, but it is fun enough!";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Close the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    MyFile.close(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//It is considered good practice to close the file, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//and it can clean up unnecessary memory space.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></write-to-file>
        <serialization>*General-Programming-Knowledge*
            <br/>
            <azure>Storing</azure> the state of an <red>object</red> to a <purple>file</purple>:<br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of C++ object.field serialization and deserialization*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;fstream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Student </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    string name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int rollno;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    string branch;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Student () <comment>// default constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Student (string n, int r, string b) <comment>// overloading constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        name = n;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        rollno = r;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        branch = b;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//override the insertion operator for object.field serialization</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    friend ofstream &amp; operator &lt;&lt; (ofstream &amp; ofs, Student s);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//now we can write individually every class field member to the file.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Example: ofs &lt;&lt; s1.name; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//override the extraction for object.field deserialization</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    friend ifstream &amp; operator &gt;&gt; (ifstream &amp; ifs, Student &amp; s);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//now we can read individually every class field member from the file. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Example: ifs &gt;&gt; s1.name; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Student s1 ("James", 28, "IT");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Open the output stream</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofstream ofs ("Student.txt", ios::trunc);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//writing to the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofs &lt;&lt; s1.name &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofs &lt;&lt; s1.rollno &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofs &lt;&lt; s1.branch &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofs.close();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Student s2; <comment>//empty object</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Open the input stream</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifstream ifs("Student.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//reading from the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifs &gt;&gt; s2.name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifs &gt;&gt; s2.rollno;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifs &gt;&gt; s2.branch;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifs.close();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; s2.name &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; s2.rollno &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; s2.branch &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        James </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        28 </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        IT</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></serialization>
        <deserialization>*General-Programming-Knowledge*
            <br/>
            <azure>Deserialization</azure> is the reverse <azure>process</azure> of <azure>Serialization</azure>, 
            where the <purple>byte</purple> <azure>stream</azure> is used to reconstruct the original <red>object</red>.<br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of C++ whole-object serialization and deserialization*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;fstream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Student</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    string name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int rollno;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    string branch;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Student () <comment>// default constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Student (string n, int r, string b) <comment>// overloading constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        name = n;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        rollno = r;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        branch = b;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//override the insertion operator for object.field serialization</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    friend ofstream &amp; operator &lt;&lt; (ofstream &amp; ofs, Student s);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//now we can write individually every class field member to the file. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Example: ofs &lt;&lt; s1.name; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//override the extraction for object.field deserialization</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    friend ifstream &amp; operator &gt;&gt; (ifstream &amp; ifs, Student &amp; s);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//now we can read individually every class field member from the file. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Example: ifs &gt;&gt; s1.name; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Overriding the operators for whole-object serialization and deserialization</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">ofstream &amp;  operator &lt;&lt; (ofstream &amp; ofs, Student s)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofs &lt;&lt; s.name &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofs &lt;&lt; s.rollno &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofs &lt;&lt; s.branch &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return ofs;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">ifstream &amp; operator &gt;&gt; (ifstream &amp; ifs, Student &amp; s)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifs &gt;&gt; s.name &gt;&gt; s.rollno &gt;&gt; s.branch;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return ifs;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>now we can read/write the whole object to and from the file. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Example: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>ofs &lt;&lt; s1; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>ifs &gt;&gt; s2; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Student s1("James", 28, "IT");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Open the output stream</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofstream ofs("Student.txt", ios::trunc);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofs &lt;&lt;  s1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ofs.close();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Student s2; <comment>// empty object</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Open the input stream</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifstream ifs("Student.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifs &gt;&gt; s2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ifs.close();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; s2.name &lt;&lt; " " &lt;&lt; s2.rollno &lt;&lt; " " &lt;&lt; s2.branch &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        James 28 IT</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></deserialization>
        <constructors>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of constructor in C++*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class MyClass   <comment>// The class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:           <comment>// Access specifier</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        MyClass()     <comment>// Constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            The constructor has the same name as the class, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            it is always public, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            and it does not have any return value.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">              cout &lt;&lt; "Hello World!";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      MyClass myObj; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      <comment>// Create an object of MyClass (this will call the constructor)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></constructors>
        <instantiation>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of instantiation*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class MyClass{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    MyClass(){}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    void PrintMessage()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printf("Message from class member.\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Instantiating the class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    MyClass obj; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    obj.PrintMessage();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></instantiation>
        <destructors>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Test {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// User-Defined Constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Test() { cout &lt;&lt; "\n Constructor executed"; }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// User-Defined Destructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    ~Test() { cout &lt;&lt; "\n Destructor executed"; }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></destructors>
        <function-overloading>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of function overloading*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void add(int a, int b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  cout &lt;&lt; "sum = " &lt;&lt; (a + b);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void add(double a, double b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; endl &lt;&lt; "sum = " &lt;&lt; (a + b);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    add(10, 2); <comment>//calling function with ints</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    add(5.3, 6.2); <comment>//calling function with floats</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></function-overloading>
        <operator-overloading>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example of Operator Overloading</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Complex </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int real, imag;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Complex(int r = 0, int i = 0)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            real = r;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            imag = i;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// This is automatically called when '+' is used with</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// between two Complex objects</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Complex operator+(Complex const    &amp; obj)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Complex res;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            res.real = real + obj.real;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            res.imag = imag + obj.imag;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return res;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void print() { cout &lt;&lt; real &lt;&lt; " + i" &lt;&lt; imag &lt;&lt; '\n'; }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Complex c1(10, 5), c2(2, 4);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Complex c3 = c1 + c2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    c3.print();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        12 + i9</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></operator-overloading>
        <enums>*General-Programming-Knowledge*
            <green>Comparison to C Language: </green>
            <br/><br/>
            In <red>C</red>, an <purple>enum</purple> is basically a way to alias names to <purple>integers</purple>. 
            This does not lead to 
            improved <red>type</red> <red>checking</red>. <br/>
            In <red>C++</red>, an <purple>enum</purple> defines an actual <purple>type</purple>, which results in 
            strong <red>type</red> <red>checking</red>.<br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;conio.h&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>While processing a game loop, there are lots of statements to be checked, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>so in order to use those statements, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>variables that will hold a certain value will be created. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>int GamePlay =1;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>int PauseGame = 2;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>int ExitGame = 3;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>So in this way the statements can be checked, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>to see when the game should be paused, should run, or should exit. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>As you see above, the variables that are used needs to have different values.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>An enum is a way to enclose a bunch of constants, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>An enum guarantees that every variable inside it, will have different values.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Example: an enum with the variables above, can be created as follows:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>enum GameStates {GamePlay, PauseGame, ExitGame};</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>So the synthax is:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>enum &lt;name&gt; {states/members};</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a GLOBAL enum:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">enum GameStates {GamePlay, PauseGame, ExitGame}; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//the elements will take as constant value the position inside the enum;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//In this case: GamePlay = 0; PauseGame=1; ExitGame=2;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>enum members cannot be initialized with values: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Example GamePlay = 5, this will give compilation error.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Instead the enum can be initialized only as follows:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>GameStates=ExitGame;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>In this case the active value of the enum will be ExitGame;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>The syntax is : &lt;enum name&gt; = &lt;enum member&gt;;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>An enum class is an enum that will use the scope resolution and </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>an object of the enum class for assignments as above.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>GameStates gameStates=GameStates::ExitGame;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>An enum class will make possible that you can have multiple </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>enums with the same members. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>So we could have for example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>enum class GameState {Exit, MainMenu};</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>enum class SoftwareState (Exit, MainMenu);</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Without using an enum class this could not be possible because, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>the 2 members will conflict to each other</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>(compilation error).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Syntax to create an enum class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>enum class &lt;name&gt; { member1, member2...}</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>An enum cannot be forward declared, unless it's an enum class. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>So only enum classes can be forward declared.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>To change the default value of an ENUM Member which consist in it's position </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>on the enum, you can do as follows:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>enum GameState {MainMenu=5, GamePlay=7, GameExit, GamePaused}; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment><comment>//the two uninitialized members follow gets the value of the</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>previous member+1; so GameExit will be 8, GamePause will be 9;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; "GamePlay value: " &lt;&lt; GamePlay &lt;&lt; endl; <comment>// this is 0;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; "PauseGame value: " &lt;&lt; PauseGame &lt;&lt; endl; <comment>// this is 1;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; "ExitGame value: " &lt;&lt; ExitGame &lt;&lt; endl; <comment>// this is 2;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    getch();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></enums>
        <concurrent-programming>*General-Programming-Knowledge*
            <br/>
            <red>C++</red> <azure>multithreading</azure> involves <azure>creating</azure> and using <azure>thread</azure> <red>objects</red>, seen as <code>std::thread</code> 
            in <azure>code</azure>, to carry out delegated sub-<azure>tasks</azure> <azure>independently</azure>. <br/>
            New <azure>threads</azure> are passed a 
            <red>function</red> to complete, and optionally some <red>parameters</red> for that <red>function</red>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;cstdlib&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;pthread.h&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#define NUM_THREADS 5</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void *PrintHello(void *threadid) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   long tid;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   tid = (long)threadid;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   cout &lt;&lt; "Hello World! Thread ID, " &lt;&lt; tid &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   pthread_exit(NULL);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main () </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   pthread_t threads[NUM_THREADS];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   int rc;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   int i;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   for( i = 0; i &lt; NUM_THREADS; i++ ) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      cout &lt;&lt; "main() : creating thread, " &lt;&lt; i &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      rc = pthread_create(&amp;threads[i], NULL, PrintHello, (void *)i);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      if (rc) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         cout &lt;&lt; "Error:unable to create thread," &lt;&lt; rc &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         exit(-1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   pthread_exit(NULL);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        In <red>C</red>/<red>C++</red>: one of the main workhorse <red>functions</red> that makes <azure>multiprocessing</azure> 
        possible is <code>fork()</code>.
        <br/><br/>
        <code>fork()</code> is a <red>function</red> that clone a <azure>process</azure>, spawning an identical 
        copy of it.
        <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of multi-processing in C/C++:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;unistd.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdlib.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;sys/wait.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main(int argc, char ** argv)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    pid_t pid = fork();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (pid == 0) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//we are in the child process</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printf("Hello from the child process!\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        exit (0); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//terminates the child process</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//now in the parent process</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        waitpid(pid, NULL, 0);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printf("The child process has exited. Hello from the parent!\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></concurrent-programming>
        <namespaces>*General-Programming-Knowledge*
            <br/>
            <brown>
            In C++ multiple namespace blocks 
            with the same name are allowed.
            </brown><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace Data</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class ObjectManager</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void DoSomething() {}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    };</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    void Func(ObjectManager) {}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></namespaces>
        <exception-handling>*General-Programming-Knowledge*
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// C++ example on how to use of try,catch and throw</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// for exception handling.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdexcept&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// try block</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    try </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int numerator = 10;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int denominator = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int res;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// check if denominator is 0 then throw runtime</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// error.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        if (denominator == 0) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            throw runtime_error(</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                "Division by zero not allowed!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// calculate result if no exception occurs</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        res = numerator / denominator;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//[printing result after division</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "Result after division: " &lt;&lt; res &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// catch block to catch the thrown exception</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    catch (const exception&amp; e) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// print the exception</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "Exception " &lt;&lt; e.what() &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></exception-handling>
        <bitwise-operators>*General-Programming-Knowledge*
            <br/>
            <purple>Bitwise</purple> <purple>operators</purple> in <red>C</red>/<red>C++</red> are 
            tools for working with individual <purple>bits</purple> in <purple>data</purple>. <br/>
            <br/>
            They might not be as famous as other 
            <purple>operators</purple>, but they’re essential for <azure>tasks</azure> like making <azure>code</azure> more <azure>efficient</azure> or 
            controlling hardware.</bitwise-operators>
        <default-parameters>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example of Default Parameters/Arguments in C++.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// A function with default arguments,</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// it can be called with</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// 2 arguments or 3 arguments or 4 arguments.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//assigning default values to z,w as 0</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int sum(int x, int y, int z = 0, int w = 0) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return (x + y + z + w);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Statement 1</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; sum(10, 15) &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Statement 2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; sum(10, 15, 25) &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Statement 3</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; sum(10, 15, 25, 30) &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></default-parameters>
        <interfaces>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of an interface implementation*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Box </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// pure virtual function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        virtual double getVolume() = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   private:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Length of a box</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        double length;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Breadth of a box</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        double breadth;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Height of a box</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        double height; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></interfaces>
        <abstract-classes>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of abstract class*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Base class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Shape {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      <comment>// pure virtual function providing interface framework.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      virtual int getArea() = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      void setWidth(int w) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         width = w;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      void setHeight(int h) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         height = h;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   protected:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      int width;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      int height;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Derived classes</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Rectangle: public Shape {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      int getArea() { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         return (width * height); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Triangle: public Shape {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      int getArea() { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         return (width * height)/2; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main(void) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   Rectangle Rect;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   Triangle  Tri;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   Rect.setWidth(5);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   Rect.setHeight(7);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   <comment>// Print the area of the object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   cout &lt;&lt; "Total Rectangle area: " &lt;&lt; Rect.getArea() &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   Tri.setWidth(5);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   Tri.setHeight(7);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   <comment>// Print the area of the object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   cout &lt;&lt; "Total Triangle area: " &lt;&lt; Tri.getArea() &lt;&lt; endl; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstract-classes>
        <macros>*General-Programming-Knowledge*
            <green>Similar to C Language:</green> 
            <br/><br/>
            A <red>C++</red> <red>macro</red> is defined as a section of <azure>code</azure> that that particular <red>macro</red> <purple>value</purple> can 
            <azure>replace</azure>. <br/><br/>
            We can define the <red>macro</red> by using a <code>#define</code> <red>directive</red>.<br/> 
            When the <red>compiler</red> goes to the <red>macros</red> while program <red>compilation</red>, 
            the <red>macro's</red> name is <azure>replaced</azure> by the definition of the <red>macro</red>. 
            <br/><br/>
            The termination of the <red>C++</red> <red>Macros</red> does not need a 
            semi-colon (;).
            <br/><br/>
            <green>Additionally to the C Language:</green><br/>
            The <azure>header</azure> <purple>file</purple>: <code>&lt;limits.h&gt;</code> 
            is defined to help finding 
            the range of fundamental <purple>data</purple>-<purple>types</purple>. <br/>
             <br/>
            <purple>Unsigned</purple> modifiers have minimum <purple>value</purple> is zero. 
            So, no <purple>macro</purple> <purple>constants</purple> are defined for the <purple>unsigned</purple> minimum <purple>value</purple>.
            <br/><br/>
            <green>
            Macro Constants:
            </green>
            <br/><br/>
            <code>CHAR_MIN</code>  - The minimum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <red>char</red>; <br/><br/>    
            <code>CHAR_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <red>char</red>; <br/><br/>        
            <code>SCHAR_MIN</code>  - The minimum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>Signed</purple> <red>char</red>; <br/><br/>    
            <code>SCHAR_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>Signed</purple> <red>char</red>; <br/><br/>        
            <code>UCHAR_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>Unsigned</purple> <red>char</red>; <br/><br/>        
            <code>CHAR_BIT</code>  - Number of <purple>bits</purple> in a <red>char</red> <red>object</red>; <br/><br/>        
            <code>MB_LEN_MAX</code>  - Maximum number of <purple>bytes</purple> in a multi-<purple>byte</purple> <purple>character</purple>; <br/><br/>        
            <code>SHRT_MIN</code>  - The minimum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>short</purple> <purple>int</purple>; <br/><br/>        
            <code>SHRT_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>short</purple> <purple>int</purple>; <br/><br/>        
            <code>USHRT_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>Unsigned</purple> <purple>short</purple> <purple>int</purple>; <br/><br/>        
            <code>INT_MIN</code>  - The minimum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>int</purple>; <br/><br/>        
            <code>INT_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>int</purple>; <br/><br/>        
            <code>UINT_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>Unsigned</purple> <purple>int</purple>; <br/><br/>    
            <code>LONG_MIN</code>  - The minimum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>long</purple> <purple>int</purple>; <br/><br/>        
            <code>LONG_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>long</purple> <purple>int</purple>; <br/><br/>        
            <code>ULONG_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>Unsigned</purple> <purple>long</purple> <purple>int</purple>; <br/><br/>        
            <code>LLONG_MIN</code>  - The minimum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>long</purple> <purple>long</purple> <purple>int</purple>; <br/><br/>        
            <code>LLONG_MAX</code>  - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>long</purple> <purple>long</purple> <purple>int</purple>; <br/><br/>    
            <code>ULLONG_MAX</code> - Maximum <purple>value</purple> for an <red>object</red> of <purple>type</purple> <purple>Unsigned</purple> <purple>long</purple> <purple>long</purple> <purple>int</purple>;<br/>            
            
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*An example of defining a C++ macro:*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Here is the definition of macro.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#define AREA(l, b) (l * b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// The given lengths are l1 and l2.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int l1 = 20, l2 = 2, area;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Here, finding the area using macro.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    area = AREA(l1, l2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></macros>
        <defines>*General-Programming-Knowledge*</defines>
        <random-generators>*General-Programming-Knowledge*
            <br/><br/>
            <green>For C++:</green>
            <br/><br/>
            <code>rand()</code> <red>function</red> is an inbuilt <red>function</red> in <red>C++</red> Standard <purple>Library</purple>, which is defined in 
            <azure>header</azure> <purple>file</purple> <code>&lt;cstdlib&gt;</code>. <br/><br/>

            The <code>rand()</code> <red>function</red> is 
            used in <red>C++</red> to generate <red>random</red> numbers in the range <code>[0, RAND_MAX)</code>.
            <br/><br/>
            The <red>random</red> number is generated by using an algorithm that gives a series of 
            non-related numbers whenever this <red>function</red> is called.
            <br/><br/>
            <brown>Syntax of rand():</brown><br/>
            <code>int rand(void);</code><br/><br/>
            <brown>Parameters of rand():</brown><br/>
            This <red>function</red> does not take any <red>parameters</red>.<br/><br/>
            <brown>Return Value of rand():</brown><br/>
            <code>rand()</code> <purple>returns</purple> a <red>pseudo</red>-<red>random</red> number in the range of <code>[0, RAND_MAX)</code>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// C++ program to demonstrate </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//  the use of rand() </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;cstdlib&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{ </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// This program will create some sequence of </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// random numbers on every program run </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (int i = 0; i &lt; 5; i++) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; rand() &lt;&lt; " "; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <code>srand()</code> <red>function</red> is also available in <red>C++</red>.<br/>
            This <red>function</red> <purple>sets</purple> the
            seed which is used by rand to generate "<red>random</red>" numbers.</random-generators>
        <command-line-arguments>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of command line arguments in C++:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main(int argc, char *argv[])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     <comment>// Suitable Code</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></command-line-arguments>
        <ternary-operator>*General-Programming-Knowledge*</ternary-operator>
        <modular-programming>*General-Programming-Knowledge*
            <br/>
            <green>Example of modular programming in C++:</green>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: vectors_of_objects_mainfile.cpp</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//In this file we put everything together</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include "vectors_of_objects_class.h" </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//by this inclusion we get access to: vectors_of_objects_class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Function prototyping or declaration</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void createObjects(vector &lt;vectors_of_objects_class&gt;&amp;);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void printObjectsInfo(const vector &lt;vectors_of_objects_class&gt;&amp;); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//The main function is the entry point of the program</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//creating a vector of objects;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    vector &lt;vectors_of_objects_class&gt; ObjectVector; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Calling the function that populates the vector of objects.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    createObjects(ObjectVector);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Calling the function that prints out the vector of objects.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    printObjectsInfo(ObjectVector);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Function definition</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void createObjects(vector &lt;vectors_of_objects_class&gt;&amp; newObjVec)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    string name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; "How many people do you wish to add? ";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int people;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cin &gt;&gt; people;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for(int i=0;i&lt;people;i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "People_" &lt;&lt; i &lt;&lt; " Name: ";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cin &gt;&gt; name; <comment>//get the name from the keyboard</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "People_" &lt;&lt; i &lt;&lt; " Age: ";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cin &gt;&gt; age; <comment>//get the age from the keyboard</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         <comment>//creating the object with self made constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        vectors_of_objects_class ObjectInVector(name, age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         <comment>//calling the class functions</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        ObjectInVector.setAge(age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        ObjectInVector.setName(name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        newObjVec.push_back(ObjectInVector);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    cout &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//defining the function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void printObjectsInfo(const vector &lt;vectors_of_objects_class&gt;&amp; newObjVec) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    unsigned int sizeOfVector=newObjVec.size();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for(int i=0;i&lt;sizeOfVector; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "People_" &lt;&lt; i &lt;&lt; " Name: " &lt;&lt; newObjVec[i].getName() &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        cout &lt;&lt; "People_" &lt;&lt; i &lt;&lt; " Age: " &lt;&lt; newObjVec[i].getAge() &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: vectors_of_objects_class.cpp</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//In this file we implement the vectors_of_objects_class interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include "vectors_of_objects_class.h"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Implementing the custom vector class interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Adding a default constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">vectors_of_objects_class::vectors_of_objects_class() <comment>//default constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Adding an overloading constructor that takes 2 arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">vectors_of_objects_class::vectors_of_objects_class(string name, int age) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//initializing the variables;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    newage=0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Adding a default destructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">vectors_of_objects_class::~vectors_of_objects_class()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//destructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Adding methods</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//getter defined to access the private variable of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">string vectors_of_objects_class::getName() const </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return newname;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//getter defined to access the private variables of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int vectors_of_objects_class::getAge() const </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return newage;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//setter defined to set the private variables of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void vectors_of_objects_class::setName(string name) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    newname=name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//setter defined to set the private variables of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void vectors_of_objects_class::setAge(int age) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    newage=age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: vectors_of_objects_class.h</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//In this file we declare an interface called: vectors_of_objects_class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//this will ensure that the header file is only included once</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#ifndef VECTORS_OF_OBJECTS_CLASS_H </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#define VECTORS_OF_OBJECTS_CLASS_H</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;vector&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a custom vector class interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class vectors_of_objects_class</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//default constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        vectors_of_objects_class(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//self made constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        vectors_of_objects_class(string, int); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Accessor functions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        string getName () const;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int getAge () const;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Mutator functions;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void setName(string);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void setAge(int);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        virtual ~vectors_of_objects_class();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    protected:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private: <comment>//private variables;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        string newname; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int newage;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#endif <comment>// VECTORS_OF_OBJECTS_CLASS_H</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></modular-programming>
        <string-methods>*General-Programming-Knowledge*
            <br/>
            The <code>std::string</code> is a <code>class</code> in <red>C++</red> since C++98. 
            <br/>
            This <code>class</code> is the standard 
            representation for a text <code>string</code>. 
            <br/>
            It includes some typical <code>string</code> <purple>operations</purple> 
            like find, <azure>replace</azure>, <azure>concatenate</azure>, <azure>compare</azure> etc.
            <br/>
            It is present in <code>&lt;string&gt;</code> 
            <azure>header</azure> <purple>file</purple>. <br/><br/>
            <green>
            Commonly Used String Functions in C++:<br/>
            </green>
            <br/>
            <code>length()</code> or <code>size()</code><br/>
            It will <purple>return</purple> the length of the <purple>string</purple>.<br/>
            <br/>
            <code>array[index]</code><br/>
            To access individual <purple>characters</purple> using <purple>array</purple> indexing.<br/>
            <br/>
            <code>at()</code><br/>
            Used to access a <purple>character</purple> at a specified index.<br/>
            <br/>
            <code>+</code> <purple>Operator</purple><br/>
            <code>+</code> <purple>operator</purple> is used to <azure>concatenate</azure> two <purple>strings</purple>.<br/>
            <br/>
            <code>append()</code><br/>
            The <code>append()</code> <red>function</red> <azure>adds</azure> one <purple>string</purple> to the end of another.<br/>
            <br/>
            <code>==</code> <purple>Operator</purple><br/>
            You can <azure>compare</azure> <purple>strings</purple> using the <code>==</code> <purple>operator</purple>.<br/>
            <br/>
            <code>compare()</code><br/>
            The <code>compare()</code> <red>function</red> <purple>returns</purple> an <purple>integer</purple> <purple>value</purple> indicating the 
            <azure>comparison</azure> result.<br/>
            <br/>
            <code>substr()</code><br/>
            Use the <code>substr()</code> <red>function</red> to extract a substring from a <purple>string</purple>.<br/>
            <br/>
            <code>find()</code><br/>
            The <code>find()</code> <red>function</red> <purple>returns</purple> the position of the first occurrence of a substring.<br/>
            <br/>
            <code>replace()</code><br/>
            Use the <code>replace()</code> <red>function</red> to modify a part of the <purple>string</purple>.<br/>
            <br/>
            <code>insert()</code><br/>
            The <code>insert()</code> <red>function</red> <azure>adds</azure> a substring at a specified position.<br/>
            <br/>
            <code>erase()</code><br/>
            Use the <code>erase()</code> <red>function</red> to <purple>remove</purple> a part of the <purple>string</purple>.<br/>
            <br/>
            <code>c_str()</code><br/>
            To obtain a <red>C</red>-style <purple>string</purple> from a <code>std::string</code>, you can use the 
            <code>c_str()</code> <red>function</red>.<br/></string-methods>
        <datatype-conversions>*General-Programming-Knowledge*</datatype-conversions>
        <optional-parameters>*General-Programming-Knowledge*</optional-parameters>
        <decorators>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of decorators*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;iostream&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using namespace std;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Computer</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        virtual void display()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; "I am a computer..." &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class CDDrive : public Computer</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Computer* c;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        CDDrive(Computer* _c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            c = _c;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void display()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            c-&gt;display();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; "with a CD Drive..." &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Printer : public Computer</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        CDDrive* d;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Printer(CDDrive* _d)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            d = _d;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void display()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            d-&gt;display();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            cout &lt;&lt; "with a printer..." &lt;&lt; endl;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Computer* c = new Computer();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    CDDrive* d = new CDDrive(c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Printer* p = new Printer(d);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p-&gt;display();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></decorators>
        <operators>*General-Programming-Knowledge*</operators>
        <pre-post-incrementation>*General-Programming-Knowledge*</pre-post-incrementation>
        <recursion>*General-Programming-Knowledge*</recursion>
        <reflection>*General-Programming-Knowledge*</reflection>
    </manifest>
    
    <manifest>
        <name>C#</name>
        <description><red>C#</red> is a general-purpose <azure>high</azure>-<azure>level</azure> <red>programming</red> <red>language</red> supporting multiple 
            paradigms. <red>C#</red> encompasses <purple>static</purple> <purple>typing</purple>, strong <purple>typing</purple>, 
            lexically <red>scoped</red>, imperative, declarative, 
            <red>functional</red>, <red>generic</red>, <red>object</red>-<red>oriented</red> (<red>class</red>-<red>based</red>), 
            and component-<red>oriented</red> <red>programming</red> disciplines. 
            <br/><br/>
            The <red>C#</red> <red>programming</red> <red>language</red> was designed by Anders Hejlsberg from Microsoft in 
            2000. 
            <br/><br/>
            Microsoft introduced <red>C#</red> along with .NET Framework and Visual Studio, both of 
            which were <azure>closed</azure>-<azure>source</azure>. At the time, Microsoft had no <azure>open</azure>-<azure>source</azure> products. 
            <br/><br/>
            Four years later, in 2004, a free and <azure>open</azure>-<azure>source</azure> project called Mono began, 
            providing a cross-platform <red>compiler</red> and <purple>runtime</purple> <purple>environment</purple> for the <red>C#</red> 
            <red>programming</red> <red>language</red>. 
            <br/><br/>
            A decade later, Microsoft released Visual Studio <azure>Code</azure> (<azure>code</azure> editor), 
            Roslyn (<red>compiler</red>), and the unified .NET platform (software framework), 
            all of which support <red>C#</red> and are free, <azure>open</azure>-<azure>source</azure>, and 
            cross-platform. 
            Mono also joined Microsoft but was not merged into .NET.<br/><br/></description>
        <oop>*General-Programming-Knowledge*</oop>
        <encapsulation>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* Members of the class should never be set to public, because public means that anyone </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * who works at that program is able to change the variable's value, so to avoid that, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * all the members (sometimes called properties), should be private, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * (or protected for inheritance purposes).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * Encapsulation: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * uses getter functions for getting the value of private members of the class;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * uses setter function for setting the value of a private members of the class;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project27_classes_encaptulation_and_exceptions_throwing</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Encapsulation_Example pobject = new Encapsulation_Example();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            pobject.SetAge(15);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            pobject.SetName("Ellias Mustellar");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Name: {0}\nAge: {1}", pobject.GetName(), pobject.GetAge());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Encapsulation_Example</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Members: (sometimes called properties)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//as good programming habbit the private variables in a function </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//should start with underscore.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        private int _age; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        private string _Name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Setters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void SetAge(int NewAge)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(NewAge&lt;=0)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//An exception is an error message, that occures and terminates the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//program in case that something goes wrong.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//Syntax for throwing exception:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                throw new Exception("A person cannot have NULL or NEGATIVE age.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            _age=NewAge;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void SetName(string NewName)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//string.IsNullOrEmpty(string_name); // is a function </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//that checks if a string is null or empty</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(string.IsNullOrEmpty(NewName))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                throw new Exception("The name cannot be NULL or EMPTY.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            _Name = NewName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Getters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public int GetAge()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return this._age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public string GetName()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return this._Name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></encapsulation>
        <polymorphism>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project25_polymorphism</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Parent [] objarray = new Parent[4];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            objarray[0]=new Parent();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            objarray[1]=new Child1();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            objarray[2]=new Child2();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            objarray[3]=new Child3();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            foreach(Parent k in objarray)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                k.DisplayInfo(); <comment>//each child has the properties of the parent class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>/* To see the information of each child class we could make a function which  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>                 * will hide the parent class function, and contain the updated information of</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>                 * the child class. But a better way doing that is marking the parent class </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>                 * you'd wish to hide with virtual keyword, which will allow every child class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>                 * overide the method by their own needs.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>                 */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Parent</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        protected string FirstName, LastName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">       </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public Parent()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FirstName="FN";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            LastName="LN";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//The virtual keyword will make this function overidable for each child class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public virtual void DisplayInfo()  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is parent class");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Child1:Parent</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//This is the syntax: for overriding (overwriting) a function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public override void DisplayInfo()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is a child 1 class.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Child2:Parent</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//This is the syntax: for overriding (overwriting) a function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public override void DisplayInfo()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is a child 2 class.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Child3:Parent</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//This is the syntax: for overriding (overwriting) a function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public override void DisplayInfo()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is a child 3 class.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></polymorphism>
        <inheritance>*General-Programming-Knowledge*
            <br/>
            In <red>C#</red> for an <red>inherited</red> <red>class</red> can be only one <red>parent</red> <red>class</red> 
            (only single <red>class</red> <red>inheritance</red> is <azure>allowed</azure>).
            <br/><br/> 
            In case of <red>inherited</red> <red>classes</red>: the <red>parent</red> <red>class</red> <red>constructor</red> gets automatically 
            executed before the <red>child</red> <red>class</red> <red>constructor</red> if the <red>parent</red> <red>class</red> <red>constructor</red> 
            has no <red>arguments</red>.
            <br/><br/>
            Otherwise: if the <red>parent</red> <red>class</red> has a <red>constructors</red> with multiple 
            <red>arguments</red>/<red>parameters</red> 
            it must be specified at the <red>child</red> <red>class</red> <red>constructor</red> declaration a 
            syntax<code>:base()</code>
            and specify the <red>arguments</red> of the <red>constructor</red> that you want to 
            be executed inside 
            the pharanteses.
            <br/><br/>
            <green>Sealing the inheritance:</green> 
            <br/><br/>
            To prevent a <code>class</code> of having <red>children</red> (<red>inheritance</red>), you can use the 
            <code>sealed</code> keyword.
            <br/><br/>
            A <code>sealed class</code> cannot have <red>children</red> (cannot be <code>base class</code>).
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: MyClass.cs</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Collections.Generic;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace inherited_classes</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//These are called XML Comments:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/// &lt;summary&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/// Inherited Classes</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/// &lt;/summary&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//This is the parent class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public class MyClass</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        protected string FirstName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        protected string LastName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        protected uint ?age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        protected MyClass(string FSS)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine(FSS);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void DisplayInfo()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Name: {0} {1}",FirstName, LastName);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(age==null)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Age: No Age Provided");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            else</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Age: {0}", age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//This is the inherited class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public class Mates:MyClass</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        char Grades;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//THIS IS DEFAULT CONSTRUCTOR</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public Mates(): base("CHILD CLASS CONTROLS THE PARENTS CLASS") <comment>//this needs to be public.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//AS YOU SEE THE :base () sythax appears here too.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FirstName="No First Name Provided";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            LastName="No Last Name Provided";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            age = null;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//THIS IS OVERLOADED CONSTRUCTOR</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//the constructor needs to be public</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//:base () -&gt; it's used to explicitely specify which constructor should be </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//used for the parent class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//The syntax must be used for each constructor of the child class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//if the parent class constructor takes no arguments, then the syntax is optional.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public Mates(string FS, string LS, uint AGE_m, char GRD) : base("CHILD CLASS CONTROLS THE PARENTS CLASS")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FirstName=FS;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            LastName=LS;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            age=AGE_m;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Grades=GRD;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void DisplayGrades()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>///&lt;summary&gt;Displays the grades of the objects in this class.&lt;/summary&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Grade: {0}", Grades);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></inheritance>
        <abstraction>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Abstraction:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Animal class provides empty function for eat() </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//and actual implementation for sound()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">abstract class animal </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public abstract void eat();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void sound() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Console.WriteLine("dog can sound");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Class dog inherits animal and can provide its implementation to eat()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//while still be able to access actual implementation sound()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class dog: animal </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public override void eat() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Console.WriteLine("dog can eat");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstraction>
        <generic-programming>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* The generic is a specification that allows to a function/method or class to operate without </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * depending on the data type that's been taking </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * as parameters, and without losing the strong typed property of the function, and the performance.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * Generics were introduced in C<comment># 2.0, and they are used especially for class collections.</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * The conversion from value type to reference type is called boxing. When we talk about performance </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * provided by generics, we mean that</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * no boxing will be effectuated. Boxing are weak in performance.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project45_generics</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Program aProg = new Program();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Using the generic function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            bool result = aProg.IsEqual&lt;int&gt; (21,44); <comment>//the function works for any data type.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Result of the comparison: {0}", result);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            result = aProg.IsEqual&lt;string&gt; ("Adam", "Exit"); <comment>//the function works for any data type.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Result of the comparison: {0}", result);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            result = aProg.IsEqual&lt;char&gt;('a', 'a'); <comment>//the function works for any data type.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Result of the comparison: {0}", result);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Working with the generic class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MyClass&lt;int&gt; GenCls = new MyClass&lt;int&gt;();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            GenCls.printStuff(12,3);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MyClass&lt;string&gt; GenCls2 = new MyClass&lt;string&gt;();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            GenCls2.printStuff("Deady", "Online");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//End of program.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating a generic function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public bool IsEqual &lt;T&gt; (T value1, T value2) <comment>//the parameters are of type T, into </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//that type could be encapsulated any data type.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return value1.Equals(value2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//The syntax to create a generic function is: access_modifier return_type function_name </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//&lt;variable_type_name&gt; (arguments of variable_type_name).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Creating a generic class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    #region GenericClass <comment>//this is how you can structure your code using regions</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class MyClass &lt;A&gt; <comment>//the syntax is class Class_Name &lt;variable_type_name&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating a function for the generic class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void printStuff(A value1, A value2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The stuff sent is: {0} &amp;&amp; {1}", value1, value2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    #endregion <comment>//end of the region</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></generic-programming>
        <variable-arguments-lists>*General-Programming-Knowledge*
            <br/>
            Use the <code>param</code> keyword to get the <purple>variable</purple> <red>arguments</red> in <red>C#</red>.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with variable arguments in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Program {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   static void Main() {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      int mulVal1 = Multiply(5);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      int mulVal2 = Multiply(5, 10);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      Console.WriteLine(mulVal1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      Console.WriteLine(mulVal2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   static int Multiply(params int[] b) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      int mul =1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      foreach (int a in b) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         mul = mul*a;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      return mul;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></variable-arguments-lists>
        <simple-data-types>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with different data type variables in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project1_introduction </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {             </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Data types:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int numb_one = 5;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            float numb_two = 6.034f;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            double numb_three = 3.0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            bool istrue = false;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            string name = "Black";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            object ANYTHING = "A variable that can be initialized with anything!";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            char character = 'X';</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Printing the result on the screen;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("The result of addition is: " + (numb_one+numb_two) + "\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("An object is: " + "\"" + ANYTHING + "\"");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             Console.WriteLine - automatically puts '\n' at the end of the line,  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             because it is a function designed to be used only for writing a line.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write(character + "\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Processing data!\n\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            while (numb_one&gt;0)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                if(numb_one==1)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    Console.WriteLine("The program will end.\n\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                numb_one--;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//function to read keys;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></simple-data-types>
        <complex-data-types>*General-Programming-Knowledge*
            <br/><br/>
            <green>C# brings changes with regards to the datatypes which were available in C/C++:</green>
            <br/><br/>
            <red>C#</red> supports <purple>pointers</purple> in a limited extent. <br/><br/>
            A <red>C#</red> <purple>pointer</purple> is 
            nothing but a <purple>variable</purple> that 
            holds the <azure>memory</azure> <purple>address</purple> of another <purple>type</purple>. But in <red>C#</red> <purple>pointer</purple> can only be declared to 
            hold the <azure>memory</azure> <purple>address</purple> of <purple>value</purple> <purple>types</purple> and <purple>arrays</purple>. 
            <br/><br/>
            Unlike <purple>reference</purple> <purple>types</purple>, <purple>pointer</purple> <purple>types</purple> are not tracked by the <azure>default</azure> <purple>garbage</purple> 
            <purple>collection</purple> mechanism. For the same reason <purple>pointers</purple> are <azure>not</azure> <azure>allowed</azure> to <purple>point</purple> to a 
            <purple>reference</purple> <purple>type</purple> or even to a <purple>structure</purple> <purple>type</purple> which contains a 
            <purple>reference</purple> <purple>type</purple>. 
            <br/><br/>
            We can say that <purple>pointers</purple> can <purple>point</purple> to only unmanaged <purple>types</purple> which includes 
            all basic <purple>data</purple> <purple>types</purple>, <purple>enum</purple> <purple>types</purple>, other <purple>pointer</purple> <purple>types</purple> and 
            <purple>structs</purple> 
            which contain only unmanaged <purple>types</purple>.
            <br/><br/>
            <brown>There are no unions available in C#.</brown><br/>
            <brown>There are no typedefs available in C#.</brown><br/></complex-data-types>
        <preprocessor-directives>*General-Programming-Knowledge*
            <red>C#</red> unlike <red>C</red> and <red>C++</red> it does <azure>not</azure> <azure>allow</azure> the use <red>directives</red> to <azure>create</azure> <red>macros</red>. 
            <br/><br/>
            <brown>
                Although there is no #define in C# - some preprocessor directive are still available:
            </brown>
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#if DEBUG</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Console.WriteLine("Debug version");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#endif</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            A <red>preprocessor</red> <red>directive</red> must be the only 
            instruction on a line. <br/></preprocessor-directives>
        <loops>*General-Programming-Knowledge*
            <br/>
            <brown>Foreach loop:</brown>
            <br/><br/>
            <azure>Foreach</azure> <azure>loop</azure> is used especially when trying to iterrate into a 
            <purple>list</purple> which has dinamic <purple>size</purple>, or an <purple>array</purple> with unknown <purple>size</purple>.
            <br/><br/>
            <green>The foreach loop is very similar to a for loop</green>.
            <br/><br/>
            Foreach is used only for <purple>Collection</purple> of <purple>data</purple>.
            The difference between <azure>for</azure> <azure>loop</azure> and <azure>foreach</azure> <azure>loop</azure> is that 
            in <azure>foreach</azure> <azure>loop</azure> there is no access to the index.
                
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of foreach loop in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project6_foreach_loop</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int [] myarray = new int[10];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            for (int i=0;i&lt;10;i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                myarray[i]=3*i;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("\nDisplaying elements using FOR LOOP: ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            for (int i=0;i&lt;10;i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("myarray[" + i + "]=" +myarray[i]);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("\nDisplaying elements using FOREACH LOOP: ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// syntax forech (datatype iterator_name in data_collection)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            foreach(int iter in myarray) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    Console.WriteLine("myarray[" + iter/3 + "]=" +iter);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("\nSimple task for FOREACH LOOP");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// syntax forech (datatype iterator_name in data_collection)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            foreach(int iter in myarray) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                if(iter%5==0 &amp;&amp; iter&gt;0)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    Console.WriteLine (iter + " is divisible with five.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></loops>
        <collections>*General-Programming-Knowledge*
            <br/>
            <green>C# introduces the following collections:</green>
            <br/><br/>
            <code>Queue</code> is a <purple>collection</purple> <purple>type</purple> just like a <purple>list</purple> or <purple>dictionary</purple>, dispite that 
            once an <red>object</red> is <azure>retrieved</azure> from <code>Queue</code> (<purple>operation</purple> called dequeue), 
            that <red>object</red>
            gets automatically <azure>deleted</azure> from the beggining of the <code>Queue</code>.
            <br/><br/>
            You can think of a <code>Queue</code> just like a RAR archieve, in order to use an 
            <red>object</red> from the <code>Queue</code>, that <red>object</red> needs to be dequeued into an 
            another <red>object</red>, otherwise it will affect the entire content of the <code>Queue</code>, 
            unless an <code>foreach</code> <azure>loop</azure> is being used.
            <br/><br/>
            To prevent an <red>object</red> be <azure>deleted</azure> from the <code>Queue</code>, you 
            have to use a 
            <code>foreach</code> <azure>loop</azure> or the <code>.Peak</code> <red>function</red>. 
            <br/><br/>
            If you iterate through the <code>Queue</code> 
            using <code>foreach</code> <azure>loop</azure>, 
            and effect changes without affecting the content of the <code>Queue</code>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Exemple on how to use Queue</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Linq;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Threading.Tasks;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Collections.Generic;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace queue_collection_type</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            people p1 = new people ("Black", 22);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            people p2 = new people ("Mark", 24);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Creating Queue</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Queue &lt;people&gt; FirstQueue = new Queue &lt;people&gt; ();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FirstQueue.Enqueue(p1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FirstQueue.Enqueue(p2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Printing Information:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Number of objects in Queue: {0}\n", FirstQueue.Count());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//This usage is wrong, unless it is moved into a foreach loop:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Console.WriteLine ("Name: {0}, Age: {1}", FirstQueue.Dequeue().name, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//                      FirstQueue.Dequeue().Age); </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//A Queue is like an archieve, you need to extract the object from it, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//before using that object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Queue&lt;people&gt; SecondQueue = new Queue&lt;people&gt; ();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            SecondQueue.Enqueue(p1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            SecondQueue.Enqueue(p2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            people deq1 = FirstQueue.Dequeue();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            people deq2 = FirstQueue.Dequeue();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             SecondQueue=FirstQueue </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             These two Queues become highly connected one to another in the way that, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             SecondQueue take all the objects from the FirstQueue, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             but if in FirstQueue an object is removed so it is in the SecondQueue.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Name: {0}, Age: {1}", deq1.name, deq1.Age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Name: {0}, Age: {1}", deq2.name, deq2.Age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Auxiliar way -&gt; Iteration:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            foreach (people p in SecondQueue)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Name: {0}, Age: {1}", p.name, p.Age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine ("Number of objects in Queue: {0}", FirstQueue.Count());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("In the foreach loop the content of the Queue is it not affected, \n(Dequeue is made without removal).\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class people </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public int Age {get; set;}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public string name {get; set;}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public people (string GivenName, int GivenAge) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            this.Age = GivenAge; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            this.name = GivenName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            
  <code>Stack</code> is a <purple>collection</purple> that uses the principle <azure>LIFO</azure> - <azure>Last</azure> <azure>In</azure> <azure>First</azure> <azure>Out</azure>, 
  and which can be accessed and handled similarly to a <purple>list</purple>.
  <br/><br/>
  Once an element gets <azure>retrieved</azure> from the <code>Stack</code> that <red>object</red> will be <purple>removed</purple>, 
  unless a <code>foreach</code> <azure>loop</azure>, or the <code>.Peek</code> <red>function</red> it's used.
  <br/>
 
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example on how to use Stack</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Collections.Generic;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project61_stack_collection_type</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            people p1 = new people ("Dragos", 22);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            people p2 = new people ("Adrian", 21);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Stack&lt;people&gt; FirstStack = new Stack&lt;people&gt;();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FirstStack.Push(p1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FirstStack.Push(p2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//The first will be the last:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            foreach (people p in FirstStack)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Name: {0}    Age: {1}", p.Name, p.Age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Number of elements on Stack: {0}", FirstStack.Count);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Outside the forech loop:");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Name: {0}", FirstStack.Pop().Name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Number of elements on Stack: {0}", FirstStack.Count);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Name: {0}", FirstStack.Pop().Name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Number of elements on Stack: {0}", FirstStack.Count);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class people</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public string Name {get; set;}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public int Age {get; set;}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public people (string NewName, int NewAge) {Name=NewName; Age=NewAge;}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></collections>
        <dynamic-memory-allocation>In <red>C#</red>, <red>objects</red> are <azure>dynamically</azure> <azure>allocated</azure> on the <purple>heap</purple> using the 
            <code>new</code> keyword.
            <br/><br/>
            When an <red>object</red> is no longer needed, it is the responsibility of the <purple>garbage</purple> 
            <purple>collector</purple> to deallocate the <azure>memory</azure> and reclaim it for future use.</dynamic-memory-allocation>
        <read-from-file>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of reading content from a file.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Linq;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Text;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Collections.Generic;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace read_from_file</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            string textFromFile = System.IO.File.ReadAllText("textfile.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(textFromFile!=string.Empty)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Text From File: \n\n{0}", textFromFile);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></read-from-file>
        <write-to-file>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of writing content to a file.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Write file using StreamWriter</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using (StreamWriter writer = new StreamWriter(fullPath))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   writer.WriteLine("Monica Rathbun");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   writer.WriteLine("Vidya Agarwal");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   writer.WriteLine("Mahesh Chand");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   writer.WriteLine("Vijay Anand");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   writer.WriteLine("Jignesh Trivedi");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Read a file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">string readText = File.ReadAllText(fullPath);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Console.WriteLine(readText);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></write-to-file>
        <serialization>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using serialization in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.IO;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Runtime.Serialization.Formatters.Binary;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">[Serializable]  <comment>//this will ensure that the class is serializable</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Student  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int rollno;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    string name;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public Student(int rollno, string name)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.rollno = rollno;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.name = name;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class SerializeExample  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void Main(string[] args)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        FileStream stream = new FileStream("e:\\sss.txt", FileMode.OpenOrCreate);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        BinaryFormatter formatter=new BinaryFormatter();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">          </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Student s = new Student(101, "sonoo");  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        formatter.Serialize(stream, s);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        stream.Close();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></serialization>
        <deserialization>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of deserializating an object from a file.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.IO;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Runtime.Serialization.Formatters.Binary;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">[Serializable] <comment>//this will ensure that the class is serializable </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Student  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public int rollno;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public string name;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public Student(int rollno, string name)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.rollno = rollno;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.name = name;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class DeserializeExample  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void Main(string[] args)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        FileStream stream = new FileStream("e:\\sss.txt", FileMode.OpenOrCreate);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        BinaryFormatter formatter=new BinaryFormatter();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Student s=(Student)formatter.Deserialize(stream);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Console.WriteLine("Rollno: " + s.rollno);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Console.WriteLine("Name: " + s.name);  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        stream.Close();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></deserialization>
        <constructors>*General-Programming-Knowledge*
            <br/>
            In <red>C#</red> <red>constructors</red> can be defined for <code>structs</code> as well as <code>classes</code>.
            <br/><br/>
            A <code>struct</code> is a similar <purple>data</purple> <purple>type</purple> with a <code>class</code>, but 
            <purple>structs</purple> works with <purple>values</purple>, while <red>classes</red> works as 
            <purple>references</purple>.
            <br/><br/>
            <green>For a struct:</green>
            <br/><br/>
             - if we <azure>create</azure> 2 <purple>struct</purple> <red>objects</red> (object1 and 
             object2):
             <br/>
 <code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> object1 = object2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    - in this case object1 will have all the values that </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    object2 has.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr></table></box></code>
             <br/>
             <green>For a class</green>:
             <br/><br/>
             - if we <azure>create</azure> 2 <red>class</red> <red>objects</red> (object1 and 
             object2):
             <br/>
 <code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> object1 = object2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>  - in this case object1, will be poiting to the object2's values </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    which are stored on the heap.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr></table></box></code>
             <br/>
             <brown>
             The constructors for both structs and classes are declared in the same way:
             </brown>
             <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of constructors</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project5_structs_with_constructors</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        struct MyStr</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Variables of the struct:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            public int posx, posy;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Constructor of the struct:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            public MyStr (int newposx, int newposy)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                posx = newposx;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                posy = newposy;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Creating the instances/objects of the struct</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MyStr structure1 = new MyStr (4, 5);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MyStr structure2 = new MyStr (10, 12);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Printing the values:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The first structure has: X=" +structure1.posx +" and Y=" +structure1.posy);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The second structure has: X=" +structure2.posx +" and Y=" +structure2.posy);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            structure1 = structure2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Printing the values:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("\nAfter setting structure1 = structure2.\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The first structure has: X=" +structure1.posx +" and Y=" +structure1.posy);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The second structure has: X=" +structure2.posx +" and Y=" +structure2.posy);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//End of program:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></constructors>
        <instantiation>*General-Programming-Knowledge*
            <br/>
            When you <azure>create</azure> a <code>new</code> <red>object</red> in <red>C#</red> for a <code>class</code> using 
            the <code>new</code> 
            keyword, then it is called <red>instantiation</red>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Student s1 = new Student();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></instantiation>
        <destructors>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Example</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{ </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Rest of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// members and methods.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   <comment>// Destructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   ~Example()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Your code</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></destructors>
        <function-overloading>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of function overloading in C<comment>#:</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project26_methods_and_functions_overloading</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int outsider;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Program p = new Program();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            p.Add(10,12);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            p.Add(1,102,34);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            p.Add(0.2f,3.3f);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            p.Add(1,33, out outsider);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Func4 Result: {0}", outsider);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        A function or method can be overloaded using different number of parameters, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        different types of parameters or different kind of parameters.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Kinds of parameters are: input parameters, output parameters, reference parameters.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Types of parameters are: float, int, double, char, etc...</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Overloading means that you can have multiple functions with the same name, but </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        respecting at least one of the criteria above (also it can respect all of the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        criteria above). </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        This means that the signature of the overloaded function must be different from </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        the primary function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Signature consist in number, type and kind of parameters, and also in the code inside </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        the brackets. But a signature does not consist in the return type of the function, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        the access modifier of the function, or the optional parameters (params) of the function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        So a function CANNOT be overloaded ONLY by using different return types, access modifiers, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        or optional params, it must be respected the criteria above.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Examples:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Add(int numb1, int numb2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Func1\nThe Sum: {0}\n", numb1+numb2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Add(int numb1, int numb2, int numb3) <comment>//method overloaded</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Func2\nThe Sum: {0}\n", numb1+numb2+numb3);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Add(float numb1, float numb2) <comment>//method overloaded</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Func3\nThe Sum: {0}\n", numb1+numb2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Add (int numb1, int numb2, out int sum) <comment>//method overloaded</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            sum=numb1+numb2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></function-overloading>
        <operator-overloading>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example of operator overloading in C<comment>#:</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace Calculator </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Calculator </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public int number1 , number2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public Calculator(int num1 , int num2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            number1 = num1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            number2 = num2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Function to perform operation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// By changing sign of integers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static Calculator operator -(Calculator c1)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            c1.number1 = -c1.number1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            c1.number2 = -c1.number2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return c1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Function to print the numbers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Print()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine ("Number1 = " + number1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine ("Number2 = " + number2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class EntryPoint</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        static void Main(String []args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">             </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// using overloaded - operator </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// with the class object</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Calculator calc = new Calculator(15, -25);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">             </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            calc = -calc;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">             </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// To display the result</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            calc.Print();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></operator-overloading>
        <enums>*General-Programming-Knowledge*
             The <code>enum</code> is like an <code>array</code> of <code>boolean</code> <purple>values</purple>, 
             in which only one can be <code>true</code> at a time.
             <br/> <br/> 
             This is useful while <azure>creating</azure> game engines, or software engines, 
             to know when a certain option is available. 
             <br/><br/> 
             Also this is used to control and interract the states in a certain application.
             <br/> 
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using enums in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Threading.Tasks;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Text;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Linq;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Collections.Generic;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace Software</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Software</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>          * NOTE: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>          * Enums cannot be declared inside a function, or method. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>          * NOT even within the Main function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>          */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        enum Gamestate {Playing, Menu, Pause=6}; <comment>//from now on, Gamestate is like a datatype.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>         * From the moment of declaration the enum is initializing to true the first state. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>         * In this case:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>         * Playing = true, until the programmer sets it otherwise.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>         * The elements of the enum can also hold values, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>         * as it sets above, Pause = 6, Playing = 0, Menu = 1 </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>         * (by default the    value set for each element is its index).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>         */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static int Main()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Creating an object/instance for the enum;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Gamestate gamestate;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Gamestate: " + Convert.ToInt32(Gamestate.Pause));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Gamestate: " + Convert.ToInt32(Gamestate.Playing));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Changing the state of the Gamestate enum;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            gamestate=Gamestate.Menu;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/* Equivalence for this case:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * bool Playing = false;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * bool Menu = true;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * bool Pause = false;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">             </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Gamestate: " + gamestate);        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            gamestate=Gamestate.Playing;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/* Equivalence:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * bool Playing = true;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * bool Menu = false;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * bool Pause = false;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">             </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Gamestate: " + gamestate);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Interraction of the user:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int input=9;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            while(input&gt;0 &amp;&amp; input&lt;10)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Enter the option: ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                input = Convert.ToInt16 (Console.ReadLine());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                switch(input)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        case 1:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            gamestate = Gamestate.Menu;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            Console.WriteLine("The active state: " + gamestate);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            break;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        case 2:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            gamestate = Gamestate.Pause;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            Console.WriteLine("The active state: " + gamestate);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            break;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        case 3:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            gamestate = Gamestate.Playing;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            Console.WriteLine("The active state: " + gamestate);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            break;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        default:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            Console.WriteLine("This is not a gamestate");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                            break;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>87  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>88  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>89  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>90  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Out of the loop!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>91  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadLine();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>92  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>93  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>94  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>95  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>96  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></enums>
        <concurrent-programming>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using multi-threading in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Threading;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace MultithreadingApplication </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   class ThreadCreationProgram </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      public static void CallToChildThread() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         try </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Child thread starts");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// do some work, like counting to 10</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            for (int counter = 0; counter &lt;= 10; counter++) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">               Thread.Sleep(500);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">               Console.WriteLine(counter);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Child Thread Completed");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         catch (ThreadAbortException e) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Thread Abort Exception");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         finally </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Couldn't catch the Thread Exception");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      static void Main(string[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         ThreadStart childref = new ThreadStart(CallToChildThread);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         Console.WriteLine("In Main: Creating the Child thread");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         Thread childThread = new Thread(childref);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         childThread.Start();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         <comment>//stop the main thread for some time</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         Thread.Sleep(2000);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         <comment>//now abort the child</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         Console.WriteLine("In Main: Aborting the Child thread");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         childThread.Abort();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         Console.ReadKey();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></concurrent-programming>
        <namespaces>*General-Programming-Knowledge*
            <br/>
            <red>C#</red> <azure>allows</azure> using <code>namespace</code> alliases to avoid 
            ambiguity errors. 
            <br/><br/>
            An ambiguity errors is when declaring 2 <purple>namespaces</purple> 
            which may contains some <red>classes</red> or <red>functions</red> with 
            the same name, so when trying to call one of such <red>function</red>, the <red>compiler</red>
            will not know to which one are you are refering to.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using namespaces in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: MyClass.cs</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//The namespace need to be declared in here</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using Project20.DeadyOnline; <comment>//declaration of the namespace.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using PATA = Project20.DeadyOnline; <comment>//Creating a namespace alias called PATA.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//THIS IS AN EXTERNAL CLASS PROJECT</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//in order to use this you need to right click on this project and add the ProjectA.TeamB</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//as reference to the main project (in this case this is the main project).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using ProjectA.TeamB; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project20_namespaces</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Creating an instance for the Class that's inside the namespace Project20.DeadyOnline</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//A namespace is using much like a path to a file, or a directory(folder).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Project20.DeadyOnline.FirstClass p = new Project20.DeadyOnline.FirstClass();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//If the namespace is declared above, an object of the class can be created as follows:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FirstClass p2 = new FirstClass();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Calling the function that's inside the namespace below.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//calling the STATIC function which has to be done using the qualify name of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Project20.DeadyOnline.FirstClass.PrintingMethod();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//calling the function using the namespace alias PATA.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            PATA.FirstClass.PrintingMethod();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Also the function can be called like this if the namespace is declared above.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FirstClass.PrintingMethod();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//calling the INSTANCE (non-static) function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            p.AnotherMessage();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//calling the INSTANCE (non-static function) using the object 2.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            p2.AnotherMessage(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Calling a function from external namespace and class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//creating an instance of the class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MyClass ms = new MyClass(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//the function is INSTANCE function (so it needs to be called with and instance of</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//the class that it belongs to).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            ms.PrintName();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Namespaces are used to organize the code/programs, and to avoid name clashes.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a namespace: (this is internal namespace because it's written into the same file.)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace Project20</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    namespace DeadyOnline</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        class FirstClass</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            public static void PrintingMethod()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("This is a function from a SELF-CREATED namespace.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            public void AnotherMessage()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("This function is INSTANCE function.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//This is an external namespace</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: Program.cs</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Collections.Generic;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace ProjectA.TeamB</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//This are called XML Comments, and are used to create descriptions.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/// &lt;summary&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/// This is an Outside Class Project that contains a PrintName Function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/// &lt;/summary&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public class MyClass</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void PrintName()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is an external Class Project called ProjectA.TeamA");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment><comment>//The code above is equivalent to this:</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>namespace ProjectA</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>{</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    namespace TeamB</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        public class MyClass</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            public void PrintName()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>                Console.WriteLine("This is an external Class Project called ProjectA.TeamA");</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            }</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        }</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    }</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>}</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment><comment>//THIS IS CALLED NASTED NAMESPACE (or a namespace inside of another).</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></namespaces>
        <exception-handling>*General-Programming-Knowledge*
            <br/> 
            <green>
                Disadvantages of unhandling exceptions:
            </green>
            <br/> <br/> 
            
             An unhandled <red>exception</red> would provide annoying error message to a user, 
             which could make the program be devoid using.
             <br/> 
             An unhandled <red>exception</red> could also provide important information to a hacker.
             <br/><br/> 
             
             While handling the <red>exceptions</red> the <code>catch</code> <azure>block</azure> containing the specific 
             <red>classes</red> must be placed above the general <red>class</red> which should be the last one 
             at the bottom.
             <br/> <br/> 
             In this way specific <red>exceptions</red> will be handled first and in case the 
             <code>exception</code> was not handled
             specifically then it can be handled <red>generically</red> with the general <code>Exception Class</code>.
             <br/> 
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example on how to handle exceptions in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.IO; <comment>//namespace for files.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project37_read_write_to_files_handling_exceptions</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Creating a file read streamer:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            StreamReader readFromFile = new StreamReader(@"D:\error.txt"); <comment>// @ -&gt; using the escape sequence</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//EXCEPTION HANDLING:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//try to do this without exception</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            try </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine(readFromFile.ReadToEnd()); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//ReadToEnd will read all the content of the file (until the end).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * If there was an exception come to this catch statement</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * THIS IS A SPECIFIC CATCH, this is the child of EXCEPTION CLASS</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * try to handle the exception with this object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * This object is mostly for FileNotFoundException.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            catch(FileNotFoundException fNotFound) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//An object of type FileNotFoundException contain more information about </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//the file that could not be found then an object of type </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//Exception (as we use in our case).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine(fNotFound.Message);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Check for the file: {0}", fNotFound.FileName);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//If the catch above was not able to handle the exception try this one:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//The Exception class is the parent of all the other classes above.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//So this will catch any kind of exception that might have occurred.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            catch(Exception ex) <comment>//this can handle also the DirectoryNotFoundException.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine(ex.Message);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//The finally is always executed regardless of the result whereas </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//the execution of catch blocks execution is not a certainty.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            finally </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//the finally block contain the code that should be executed by all means necessary</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                if(readFromFile!=null) <comment>//if the file is null then it cannot be closed.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    readFromFile.Close();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//END OF EXCEPTION HANDLING.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            StreamWriter writeToFile = new StreamWriter(@"D:\writeToFile.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            writeToFile.WriteLine("Project37 Read write to files, exception handling Finally!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            writeToFile.Close(); <comment>//the filestream needs to be closed for the writing to work.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></exception-handling>
        <bitwise-operators>*General-Programming-Knowledge*</bitwise-operators>
        <default-parameters>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of functions default-parameters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">static void MyMethod(string country = "Norway") </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  Console.WriteLine(country);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  MyMethod("Sweden");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  MyMethod("India");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  MyMethod();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  MyMethod("USA");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Sweden</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// India</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Norway</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// USA</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></default-parameters>
        <interfaces>*General-Programming-Knowledge*
            <br/>
            <green>
            An interface in C# is mostly like a class but with some differences:
            </green>
            <br/><br/>
            
             1. An <code>interface</code> cannot have <purple>field</purple> <purple>members</purple>/<purple>variable</purple> <purple>members</purple> (can have only 
             <red>functions</red>/<red>methods</red>, delegates, events or <purple>properties</purple>).
             <br/><br/>
             2. An <code>interface</code> cannot contain <red>implementations</red> for the <red>functions</red>/<red>methods</red>
             (an <red>implementation</red> of a <red>function</red>/<red>method</red> is the <azure>code</azure> between the brackets).
             <br/><br/>
             3. An <code>interface</code> has <code>public</code> <purple>fields</purple> <purple>set</purple> by <azure>default</azure>, so inside an 
             <code>interface</code> you 
             cannot use the <code>public</code> acces-modifier for its <purple>members</purple>.
             <br/><br/>
             4. A <red>class</red> can <red>inherit</red> from an <code>interface</code>. But with the <azure>condition</azure> of providing 
             the <red>implementation</red> for all the <code>interface</code> <red>function</red>/<red>method</red> <purple>members</purple>.
             <br/><br/>
             5. When a <red>class</red> provides <red>implementation</red> of an <code>interface</code> <red>function</red> <purple>member</purple>, 
             it also needs to make the <purple>member</purple> <red>function</red> <code>public</code>. 
             (The <code>public</code> <azure>access</azure> <azure>modifier</azure> must be used.)
             <br/><br/>
             6. A <code>class</code> or <code>struct</code> can <red>inherit</red> from MORE <red>interfaces</red> 
             at the same time. 
             Whereas a <code>class</code> or <code>struct</code> cannot <red>inherit</red> from
             more then one <code>class</code>.
             <br/><br/>
             7. An <code>interface</code> cannot be instanciated (an <red>instance</red>, 
             <red>object</red> of the <code>interface</code> 
             cannot be <azure>created</azure>), because doing this it would mean that you would be able to call 
             a <red>function</red> from the <code>interface</code>, and the <code>interface</code> cannot contain
             <red>implemented</red> <purple>members</purple>.
             
             <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using creating/using interfaces</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project30_interfaces</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Creating an interface:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public interface Ifirst_interface <comment>//an interface name usually starts with I (capital i).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//int age; -&gt; an interface cannot have such fields (variable fields).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//public void Print(); -&gt; an interface cannot contain public access modifier.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void Print(); <comment>//this is a function of the interface.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public interface Isecond_interface : Ithird_interface</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void Print2();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public interface Ithird_interface</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void Print3();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Inherited_from_interface Iobject = new Inherited_from_interface();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Iobject.Print();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Iobject.Print3(); <comment>//calling the grandpa's function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Inherited_from_interface : Ifirst_interface, Isecond_interface</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>/* A class that inherits from an interface HAS to provide implementations for all </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>         * the interface methods members.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>         */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Print() <comment>//providing implementation for the interface function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * IMPORTANT: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * when providing implementation for an interface function/method member you have</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * to specify it to be public. (YOU need to use the public access modifier.)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * IF A CLASS inherits from multiple interfaces, then the class has to provide </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * members.implementation for all the interface members.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * IF A CLASS inherits from an interface which inherits from another interface, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * then the class has to provide implementation for both the parent</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * interface and grandparent interface as well.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Class inherited from an interface.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//A method can be implemented like this. (The brackets can be empty.)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Print2() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//By implementing a function inherited from an interface, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//you have to assure that the functionis public, and there </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//exists the brackets (where the implementation should be made).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//this function is inherited from an interface which inherits from another interface.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Print3() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is the grandpa's function!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></interfaces>
        <random-generators>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generating random numbers in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project68_random_numbers</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Random i = new Random();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int nr;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            nr=i.Next(1,5);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Value: {0}",nr);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></random-generators>
        <command-line-arguments>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of command line arguments in C<comment>#:</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace ComLineArg   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">          </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Main Method which accepts the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// command line arguments as  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// string type parameters   </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        static void Main(string[] args)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">              </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Check the length of  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Command line arguments array</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(args.Length &gt; 0) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Arguments Passed by the Programmer:");   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">              </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//Print the command line  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//arguments using foreach loop </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                foreach(Object obj in args)   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                {   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    Console.WriteLine(obj);        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                }   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            else</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("No command line arguments found."); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></command-line-arguments>
        <ternary-operator>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using ternary operator in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project11_ternary_operator</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            bool istrue;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int simpletest;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int number = 10;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Ternary Operator "?":</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            istrue = number==10 ? true : false;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Syntax: boolean variable = condition ? value for true : value for false</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/* Equivalence of that:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * if(number==10)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             *         istrue=true;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * }</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * else</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             *         istrue=false;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * }</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The value of istrue is: {0}", istrue);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Other example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            simpletest = number==10 ? 10+2 : 10-2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The value of simpletest is: {0}", simpletest);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></ternary-operator>
        <modular-programming>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of modular programming in C<comment>#:</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: project20_namespaces.cs</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//THIS IS AN EXTERNAL CLASS PROJECT</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//in order to use this you need to right click on this project and add the ProjectA.TeamB</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//as reference to the main project (in this case this is the main project).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using ProjectA.TeamB; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project20_namespaces</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MyClass ms = new MyClass(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            ms.PrintName();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//This is an external namespace</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: Program2.cs</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Collections.Generic;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace ProjectA.TeamB</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//This are called XML Comments, and are used to create descriptions.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/// &lt;summary&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/// This is an Outside Class Project that contains a PrintName Function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/// &lt;/summary&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public class MyClass</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void PrintName()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is an external Class Project called ProjectA.TeamA");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></modular-programming>
        <string-methods>*General-Programming-Knowledge*
            <br/>
             A <code>stringbuilder</code> is a <purple>data</purple> <purple>type</purple> just like <code>string</code>. 
             <br/><br/>
             The main difference between them is that the <code>stringbuilder</code> is 
             mutable.
             Mutable means that once that is <azure>created</azure> the <code>string</code> can be 
             changed, whereas 
             <code>System.string</code> is not mutable, once <azure>created</azure> cannot be change. 
             <br/><br/>
             If you try to change a <code>string</code> after it was been initialized, the <red>system</red> will 
             <azure>create</azure> another <red>object</red> of the <code>string</code> in
             <azure>memory</azure> and pass the new <purple>value</purple> of the <code>string</code> to that <red>object</red>, 
             but the old <red>object</red> 
             which holds the old <purple>value</purple> of the <code>string</code> will not be cleaned
             until the end of the program, when the <purple>garbage</purple> <purple>collector</purple> does its work.
             <br/><br/>
             A <code>stringbuilder</code> should be used everytime when a <code>string</code> 
             that's <azure>created</azure> 
             tends to 
             change its <purple>value</purple>, in this way, only a single <red>object</red> will
             be <azure>created</azure> in <azure>memory</azure> no matter how many times its <purple>value</purple> will change, 
             because it's mutable.
             <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using StringBuilder and StringBuilder methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Text; <comment>// using this for StringBuilder.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project46_working_with_string_builder</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Creating a stringbuilder:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            StringBuilder stringbuiler = new StringBuilder("Adam"); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//this is how a stringbuilder gets created and initialized</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//To concatenate string builders, there is a function called .Append();</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            stringbuiler.Append(" has");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            stringbuiler.Append(" C<comment>#");</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            stringbuiler.Append(" skills!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Printing the stringbuilder:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("{0}", stringbuiler);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("{0}", stringbuiler.ToString()); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//this is a better way to print the stringbuilder</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Other stringbuilder operations:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            stringbuiler.Clear(); <comment>//clear the stringbuiler's content</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("{0}", stringbuiler);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//stringbuilder.Capacity returns the capacity of the stringbuilder</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Stringbuilder Capacity: {0}", stringbuiler.Capacity); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Stingbuilder Max Capacity: {0}",stringbuiler.MaxCapacity);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//End of program:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></string-methods>
        <datatype-conversions>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of datatype conversions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project13_implicit__explicit__data_type_conversions</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/* An implicit conversion is done by the compiler when there are no loss of information. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * Also there is no possibility of throwing exceptions during the conversion.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * Example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">             </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int numb1 = 100;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            float numb2 = numb1; <comment>//implicit conversion (done by the compiler).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The value of numb2 is: {0}", numb2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/* An explicit conversion is done by the programmer using type cast operators  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * or predefined classes, data-conversion classes.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * Example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            float numb3=123.543f;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            numb1 = (int) numb3; <comment>//explicit conversion using type cast.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The value of numb1 is: {0}", numb1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            numb1 = Convert.ToInt32(numb3); <comment>//explicit conversion using Conversion Class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The value of numb1 is: {0}", numb1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/* Conversion Class - will throw an exception/message when the conversion fails </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * because one variable can't hold the value of the converted one.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * Type Cast - will not throw any exception, will just print the minimum value that </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * the variable can hold. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Parse Methods of converting string to int.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            string valueN = "199";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            numb1 = int.Parse(valueN); <comment>//parsing sinthax</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//in case if the string does not contain a valid number, an exception will be thrown. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//So the program will be terminated.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The value of numb1 after parsing is: {0}", numb1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//TryParse Methods of converting string to int.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            string valueB = "221a";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int Result = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            bool Success = int.TryParse(valueB, out Result); <comment>//sinthax of TryParse.    </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//if int.TryParsing is succesfull the bool Success will become true, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//else it will become false.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//TryParse takes 2 arguments: the string to be converted </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//and the variable that will stored the converted result (if it is successful). </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//If the TryParse is not successful the Result will not be changed.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(Success)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("The value of numb1 after tryparsing is: {0}", Result );</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            else</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("The number is invalid. The conversion was unsuccesful!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of explicit vs implicit conversions</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project30_explicit_vs_implicit_implementation</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    interface I1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void Print(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//when there are 2 interfaces with identical function, which inherits into the same child</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//the explicit implementation must be used to avoid ambiguity.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    interface I2</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void Print();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    interface I3</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void MessageShow();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    interface I4</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void MessageShow();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program: I1,I2,I3,I4 <comment>//this class inherits from all 4 interfaces</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Program soft = new Program(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//soft is reference variable for an object type Program stored in heap.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            soft.Print(); <comment>//calling the implicit implemented function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//By TYPE CASTING - calling the explicit implemented functions.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            ((I3)soft).MessageShow(); <comment>//calling the explicit implemented function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            ((I4)soft).MessageShow(); <comment>//calling the explicit implemented function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//By OBJECT REFERENCE - calling the explicit implemented functions.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            I3 explicit1 = new Program();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            I4 explicit2 = new Program();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            explicit1.MessageShow();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            explicit2.MessageShow();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//END OF PROGRAM;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//This is implicit implementation, the compilation and the runtime is fine, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//dispite that there is a simple implementation for the both functions.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Print()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Implicit Implemetation!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Explicit Implementation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//when explicitly implementing a function the access modifiers are not allowed</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void I3.MessageShow() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is I3 function!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//when explicitly implementing a function the access modifiers are not allowed</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        void I4.MessageShow() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is I4 function!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></datatype-conversions>
        <optional-parameters>*General-Programming-Knowledge*
            <br/><br/>
            <green>
                Ways of adding optional parameters in C#:
            </green>
            <br/><br/>
            
            1. Using <code>params</code> <purple>arrays</purple> (optional <purple>arrays</purple> <azure>created</azure> 
            using <code>params</code> keyword as prefix).<br/>
            2. <red>Methods</red> <red>overloading</red> (<red>overloading</red> a <red>method</red>/<red>function</red> to 
            provide many versions with different number of <red>parameters</red>);<br/>
            3. <red>Methods</red> with <azure>default</azure> <red>parameter</red> <purple>values</purple>.<br/>
            4. <red>Methods</red> that are using optional <purple>attribute</purple>.<br/>
            
            
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using optional parameters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//using this for the [Optional] or [OptionalAttribute] attribute</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Runtime.InteropServices; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project50_optional_parameters</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Program pr = new Program();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The result of adding 10, 3, 4, 6 is: {0}", pr.AddNumbers(10,3, new int[]{4,6}));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The result of adding 2 and 5 is: {0}", pr.AddNumbers(2,5));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Calling the second function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            pr.PrintNrs(12);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//To use the default value only for b (the second argument):</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            pr.PrintNrs(1,c:22); <comment>//the value of b will be the default value (10);</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//To use default value only for c:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            pr.PrintNrs(1,2); <comment>//the value of c will be the default value (2);</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//CALLING THE OPTIONAL ATTRIBUTE FUNCTIONS:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            pr.DisplayArgs(1,3);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            pr.DisplayArgs(12,3,11);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating functions with default values:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public int AddNumbers(int num1, int num2, int [] array = null) <comment>//syntax is just like in C++;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int result=num1+num2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(array!=null)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                foreach (int i in array)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    result+=i;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return result;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//for a function with default parameters, the parameters initialized with</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//default values must be the last in the list of parameters </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//(just like in case of params arrays).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void PrintNrs(int a, int b=10, int c=2) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Nr1= {0}\nNr2= {1}\nNr3= {2}", a, b, c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating functions with [Optional] attributes</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void DisplayArgs(int num1, int num2, [Optional] int num3) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//this can also be done with [OptionalAttribute].</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//In case that num3 is not specified by the user, it's value will be 0.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("The numbers are: {0}, {1}, {2}", num1,num2,num3);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></optional-parameters>
        <partial-classes>A <red>partial</red> <red>class</red> is a unique feature of <red>C#</red>. 
            <br/><br/>
            It can <purple>break</purple> the functionality of a single 
            <code>class</code> into many <purple>files</purple>. 
            <br/><br/>
            When the application is <red>compiled</red>, these <purple>files</purple> are then 
            reassembled into a single <code>class</code> <purple>file</purple>. 
            <br/><br/>
            The <code>partial</code> keyword is 
            used to build a <code>partial class</code>.
            <br/><br/>
            <brown>
            A partial class its used to separate/split a class into two or more parts, 
            across different files.
            </brown>
            <br/><br/>
            If the part of the <red>class</red> are in different <purple>files</purple>, those <purple>files</purple> must be 
            contained in the same assembly (directory of project), otherwise
            the <red>compilation</red> will fail. 
            <br/><br/>
            A <red>partial</red> <red>class</red> can also be used in techniques of splitting an 
            <red>interface</red> into more parts successfully.
             <br/><br/>
             <green>
             Important rules of partial classes:
             </green>
             <br/><br/>
             
             1. Without the <red>partial</red> keyword into the <red>class</red> declaration, 
             the <red>compiler</red> will not 
             know the intention of <azure>creating</azure> a <red>partial</red> <red>class</red>.
             <br/><br/>
             2. All the parts of a <red>partial</red> <red>class</red> needs to be contained by 
             the same <purple>namespace</purple> 
             and assembly.<br/><br/>
             3. All the parts must use the <red>partial</red> keyword in their declaration.
             <br/><br/>
             4. All the parts must use the same <azure>access</azure> <azure>modifier</azure> in their declaration.
             <br/><br/>
             5. If any of the parts is declared as <azure>abstract</azure>, the entire <red>class</red> will be 
             <azure>abstract</azure> (even if only a part was declared <azure>abstract</azure>).
             <br/><br/>
             6. If any of the parts is declared as <red>sealed</red>, the entire <red>class</red> will 
             be <red>sealed</red>.
             <br/><br/>
             7. If any of the parts is declared to be <red>inherited</red> from a a <red>class</red>, 
             the entire <red>class</red> will be <red>inherited</red> from that <red>class</red>. 
             <br/><br/>
             8. Different parts of the <red>partial</red> <red>class</red> cannot specify that they are 
             <red>inherited</red> from 
             different <red>classes</red>.
             <br/>
             Multiple <red>class</red> <red>inheritance</red> is <azure>not</azure> <azure>allowed</azure> in <red>C#</red>.
             <br/><br/>
             9. Different parts of the <red>partial</red> <red>class</red> can specify that they <red>inherits</red> 
             from different <red>interfaces</red>, so after the <red>compilation</red> the <red>partial</red> <red>class</red>
             will be <red>inherited</red> from all the specified <red>interfaces</red> (even if they were 
             specified in different parts of the <red>class</red>).
             <br/><br/>
             10. The <purple>members</purple> declared to a part of the <red>partial</red> <red>class</red> are available to all 
             the part of the <red>partial</red> <red>class</red> (available in the entire <red>class</red>).
             
             
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of partial class in C<comment>#:</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">FILE: project47_partial_classes.cs</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project47_partial_classes</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//A partial class its used like a normal class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MyClass obj = new MyClass();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            obj.Age = 16;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            obj.Name = "Ellias";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            obj.PrintInfo();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Example of partial class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//the partial keyword must be used for all the parts of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    partial class MyClass .</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        private string _Name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        private int _Age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public int Age</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            get {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                return _Age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            set</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                _Age=value;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public string Name</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            get {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                return _Name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            set</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                _Name=value;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//THE SECOND PART OF THE CLASS IS IN THE ASSEMBLY DIRECTORY (PROJECT DIRECTORY), </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//WITH THE NAME PartialClassPartTwo, AND CONTAINS A METHOD CALLED PrintInfo().</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: PartialClassPartTwo.cs</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//IMPORTANT: the class parts must be in the same namespace.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project47_partial_classes </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>/// &lt;summary&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>/// Description of PartialClassPartTwo.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>/// &lt;/summary&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        partial class MyClass <comment>//the partial keyword must be used for all the parts of the class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                public void PrintInfo()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                        Console.WriteLine("Name: {0}         Age: {1}", _Name, _Age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></partial-classes>
        <decorators>*General-Programming-Knowledge*</decorators>
        <operators>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using operators in C<comment>#</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project12_new_types_null_coalescing_operator</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/* Non-Nullable type: Are Value TYPES: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * integers, boolean, double, float, long, long long, char...etc</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * Nullable type: Are Reference TYPES: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * classes, interface, delegates, arrays... etc</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * A Non-Nullable type can become Nullable type by using ? in their declaration.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * Examples:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            bool major = false; <comment>//non-nullable value type.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            bool ?minor = null; <comment>//nullable value type. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/* A nullable boolean type can hold on to 3 values: true, false or null. */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Are you a minor? Press Y/N to answear or anything else to skip.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            char answear = Convert.ToChar(Console.ReadLine());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            switch(answear)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                case 'y':  minor = true; break;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                case 'Y': minor = true; break;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                case 'n':  minor = false; break;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                case 'N': minor = false; break;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                default: minor = null; break;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(minor == true)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("You are minor!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            else if(minor == false)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("You are not minor!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            else</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("You did not answear the question!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//NULL COALESCING OPERATOR:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int? TicketsOnSale = 100;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//if TicketsOnSale is null, availableTickets will be 0, otherwise</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//availableTickets = (int)TicketsOnSale.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int availableTickets=TicketsOnSale??0; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>/*Equivalent method:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * if(TicketsOnSale == null)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             *         availableTickets=0;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * }</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * else</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             *         availableTickets = (int)TicketsOnSale; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             *         <comment>//TicketsOnSale is a nullable int, so it must be</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             *         <comment>//casted to normal int.</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             *         </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             *         <comment>//Other method of casting:</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             *         <comment>//available Tickets = TicketsOnSale.value;</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             * }</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>             */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Available Tickets: {0}", availableTickets);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></operators>
        <pre-post-incrementation>*General-Programming-Knowledge*</pre-post-incrementation>
        <abstract-classes>*General-Programming-Knowledge*
            <br/>
            <green>In C#:</green> 
            <br/><br/>
             An <azure>abstract</azure> <red>class</red> is similar to an <red>interface</red>, 
             dispite that it can contain 
             variable_members(field <purple>members</purple>) , and that
             an <azure>abstract</azure> <red>class</red> it's acting like a <red>class</red> when it comes to 
             <red>inheritance</red>.
             <br/><br/>
             An <azure>abstract</azure> <red>class</red> can have <red>implementation</red>
             for some or even for all its <purple>members</purple>/<purple>field</purple>, while the <red>interface</red> 
             cannot.
             <br/><br/>
             An <azure>abstract</azure> <red>class</red> can use the (<purple>public</purple>) 
            <azure>access</azure> <azure>modifiers</azure> whereas an <red>interface</red> cannot. 
            <br/><br/>
            An <red>interface</red> can be <red>inherited</red> only from another <red>interface</red>, 
            while an <azure>abstract</azure> <red>class</red>
            can be <red>inherited</red> either from an <red>interface</red> or <azure>abstract</azure> <red>class</red>. 
            <br/><br/>
            A <red>class</red> can <red>inherit</red> from multiple <red>interfaces</red> at the
            same time whereas a <red>class</red> cannot <red>inherit</red> from multiple <red>classes</red>.
            <br/><br/>
            <green>Rules for abstract classes in C#:</green>
            <br/><br/>
            
             1. An <azure>abstract</azure> <red>class</red> cannot be instanciated (an <red>instance</red> 
             of the <red>class</red> cannot be <azure>created</azure>).<br/>
             <br/>
             2. An <azure>abstract</azure> <red>class</red> can contain <azure>abstract</azure> <purple>members</purple>, and the 
             <azure>abstract</azure> <purple>members</purple>
             are <azure>not</azure> <azure>allowed</azure> to be <red>implemented</red> in
             that <red>class</red>.<br/>
             <br/>
             3. An <azure>abstract</azure> <red>class</red> can <red>inherit</red> (can have <red>children</red> <red>classes</red>), and every <red>child</red> 
             of the <red>class</red> must provide its
             own <red>implementations</red> for the <azure>abstract</azure> <purple>members</purple> of the <red>parent</red> <red>class</red>.<br/>
             <br/>
             4. Any <red>class</red> provides single <red>inheritance</red> (the <red>child</red> of the <red>class</red> can have 
             only one <red>parent</red>/<red>base</red> <red>class</red>).<br/>
             <br/>
             5. An <azure>abstract</azure> <red>class</red> can only be used as a <red>base</red> <red>class</red>. 
             So an <azure>abstract</azure> <red>class</red> cannot be <red>sealed</red>.<br/>
             <br/>
             6. If a <red>class</red> that's <red>inherited</red> from an <azure>abstract</azure> <red>class</red> 
             doesn't wish to provide <red>implementation</red> for the <red>parent</red> <red>class</red>
             <azure>abstract</azure> <purple>members</purple>, then that <red>class</red> can be also 
             <purple>set</purple> as <azure>abstract</azure>.<br/>
             
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of abstract class in C<comment>#:</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project32_abstract_classes</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//A class can inherit only from a single class. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//(multiple class inheritance is not allowed)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program: AbsClass </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Program p1 = new Program();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            p1.MessageShow();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            p1.Print();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//In order to provide implementation for an abstract member of the parent </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//class the override keyword must be used.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        protected override void Print()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("Providing implementation for the parent abstract class member.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Creating an abstract class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public abstract class AbsClass</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//this function is abstract</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        protected abstract void Print(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//this is a normal function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void MessageShow()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine("This is not an abstract member.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstract-classes>
        <recursion>*General-Programming-Knowledge*</recursion>
        <reflection>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of reflection in C<comment>#:</comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">using System.Reflection; <comment>//using this namespace for reflection</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>In C<comment># every object is directly or indirectly inherited from System.Object class, </comment></comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>so every type and object will have access to functionalities like:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> getType(), ToString(), etc</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">namespace project43_reflection</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class Program</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public static void Main(string[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Getting the type:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//T gets the type of the project43_reflection.ExampleClass.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Type T = Type.GetType("project43_reflection.ExampleClass");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Equivalent methods to get the type: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Type T = typeof (ExampleClass);</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//ExampleClass ec = new ExampleClass();</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Type T = ec.GetType();</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Getting the properties:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//T.GetProprieties returns an array of type PropertyInfo, containing all</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//the information about the proprieties of the class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            PropertyInfo [] proprietiesFound = T.GetProperties(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            foreach(PropertyInfo k in proprietiesFound)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Property Name: {0}   Property type: {1}", k.Name, k.PropertyType); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//printing the proprieties of the class ExampleClass.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine();        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Getting the methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MethodInfo[] methodsFound = T.GetMethods();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            foreach(MethodInfo k in methodsFound)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Method Name: {0} Method return type: {1}", k.Name, k.ReturnType);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.WriteLine();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Getting members:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MemberInfo [] membersFound = T.GetMembers();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            foreach(MemberInfo k in membersFound)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Member Name: {0} Member type: {1}", k.Name,  k.MemberType);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.Write("Press any key to continue . . . ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Console.ReadKey(true);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    class ExampleClass</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Variables:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        private int _age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        private string _name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Properties:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public string Name </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            get{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    return this._name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            set{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    this._name=value;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public int Age</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            get{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    return this._age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            set{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    this._age=value;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>87  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        public void Print()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>88  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>89  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Console.WriteLine("Name: {0}        Age: {1}", this._name, this._age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>90  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>91  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>92  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>93  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></reflection>
    </manifest>
    
    <manifest>
        <name>JavaScript</name>
        <description><red>JavaScript</red> often abbreviated as <red>JS</red>, is a <red>programming</red> <red>language</red> and <azure>core</azure> 
            technology of the Web, alongside <red>HTML</red> and <red>CSS</red>. 99% of websites use <red>JavaScript</red> 
            on the client side for webpage behavior.
            <br/><br/>
            Web browsers have a dedicated <red>JavaScript</red> engine that executes the client <azure>code</azure>. 
            These engines are also utilized in some <azure>servers</azure> and a variety of apps. The most 
            popular runtime <red>system</red> for non-browser usage is Node.js.
            <br/><br/>
            <red>JavaScript</red> is a <azure>high</azure>-<azure>level</azure>, often just-in-time 
            <red>compiled</red> <red>language</red> that conforms 
            to the ECMAScript standard. It has <azure>dynamic</azure> <purple>typing</purple>, <red>prototype</red>-<red>based</red>
            <red>object</red>-<red>orientation</red>, and first-<red>class</red> <red>functions</red>. It is 
            multi-paradigm, 
            supporting event-driven, <red>functional</red>, and imperative 
            <red>programming</red> styles. 
            It has application <red>programming</red> <red>interfaces</red> (<purple>APIs</purple>) for working with text, dates, 
            <azure>regular</azure> <azure>expressions</azure>, standard <purple>data</purple> <purple>structures</purple>, and the Document <red>Object</red> Model (DOM).
            <br/><br/>
            
            Difference between <red>JavaScript</red> and <red>PHP</red> is that 
            <red>JavaScript</red> is running in the client 
            computer's browser, and its performance depends only on the client 
            computer's specifications. 
            Whereas <red>PHP</red> is a <red>programming</red> <red>language</red> that <azure>runs</azure> on a <azure>server</azure> so when 
            the client is using a <red>PHP</red> <azure>script</azure> its <red>computer</red> will make a request to 
            the <azure>server</azure> with the purpose of getting the <red>compilation</red> result and 
            transfer that information back to the client <red>computer</red>. 
            <br/><br/>
            
            This action is significantly slower than the <red>javascript</red> because in case that 
            the <azure>server</azure> is busy, that action might take place in a matter of seconds, or minutes. 
            While in case of <red>JavaScript</red> the action completes almost instantaneos.
            <br/><br/>
            
            <red>PHP</red> is a <azure>back</azure>-<azure>end</azure> development <red>language</red> (related to the <azure>server</azure>), <red>JavaScript</red> is a 
            <azure>front</azure>-<azure>end</azure> development <red>language</red> related to the client <red>computer</red>/machine.
            <br/><br/>
            
            <brown>Vanilla JavaScript is a synonymous with pure or plain JavaScript.</brown> 
            
            <br/><br/>
            <red>JavaScript</red> has undergone significant 
            transformations, playing an important role in the evolution of web development. 
            With these changes, an abundance 
            of tools and <purple>libraries</purple> has emerged, reshaping the way we build websites.
            <br/><br/>
            <green>Node.js</green>
            <br/><br/>
            Node.js is a cross-platform, <azure>open</azure>-<azure>source</azure> <red>JavaScript</red> 
            <purple>runtime</purple> <purple>environment</purple> that can <azure>run</azure> on Windows, 
            Linux, Unix, macOS, and more. Node.js <azure>runs</azure> on the V8 <red>JavaScript</red> engine, and executes 
            <red>JavaScript</red> <azure>code</azure> outside a web browser.
            <br/><br/>
            Node.js lets developers use <red>JavaScript</red> to <azure>write</azure> command line tools 
            and for <azure>server</azure>-side <azure>scripting</azure>. 
            The ability to <azure>run</azure> <red>JavaScript</red> <azure>code</azure> on the <azure>server</azure> is often used to generate <azure>dynamic</azure> web 
            page content before the page is sent to the user's web browser.
            <br/><br/>
            Consequently, Node.js represents a "<red>JavaScript</red> everywhere" paradigm, unifying web-application 
            development around a single <red>programming</red> <red>language</red>, as opposed to using different <red>languages</red> for 
            the <azure>server</azure> versus client-side <red>programming</red>.
            <br/><br/>
            <green>AngularJS</green>
            <br/><br/>
            <red>AngularJS</red> is a toolset for building the framework most suited to your application development. 
            It is fully extensible and works well with other <purple>libraries</purple>. 
            <br/><br/>
            <red>AngularJS</red> extends <red>HTML</red> with new <purple>attributes</purple>.
            <br/><br/>
            <green>React</green>
            <br/><br/>
            <red>React</red> is the <purple>library</purple> for web and native user <red>interfaces</red> out of 
            individual pieces called components written in <red>JavaScript</red>.
            <br/><br/>
            <red>React's</red> declarative syntax facilitates the <azure>creation</azure> of complex user <red>interfaces</red>, 
            and it provides a vast range of tools, including <red>Redux</red>, for state management. 
            This makes <red>React</red> a powerful choice for scalable and <azure>maintainable</azure> applications, 
            utilizing <red>modular</red> and <azure>reusable</azure> components.
            <br/><br/>
            <red>React</red> <red>Native</red> brings the <red>React</red> <red>programming</red> paradigm to platforms like Android and iOS.
            <br/><br/>
            <green>Vue.js</green>
            <br/><br/>
            Vue.js is a <red>JavaScript</red> framework known for its simplicity and flexibility. Recognized for its 
            <red>reactive</red> <red>system</red>, seamless integration with existing projects, and organized component handling.
            <br/><br/>
            Vue.js appeals to developers working on both small and large applications. Its <purple>incremental</purple> 
            adoption <azure>allows</azure> developers to utilize specific features as needed, making it easy to learn 
            and widely popular.
            <br/><br/>
            Vue.js lets you extend <red>HTML</red> with <red>HTML</red> <purple>attributes</purple> called <red>directives</red>.
            Vue.js <red>directives</red> offers functionality to <red>HTML</red> applications.
            Vue.js provides built-in <red>directives</red> and user defined <red>directives</red>.
            <br/><br/>
            <green>jQuery</green>
            <br/><br/>
            <red>jQuery</red> is a <red>JavaScript</red> <purple>library</purple> which greatly simplifies <red>JavaScript</red> <red>programming</red>.
            <red>jQuery</red> is a fast, small, and feature-rich. It makes things like <red>HTML</red> document 
            traversal and <azure>manipulation</azure>, event handling, animation, and <red>Ajax</red> much simpler with an easy-to-use 
            <purple>API</purple> that works across a multitude of browsers. 
            <br/><br/>
            With a combination of versatility and extensibility, 
            <red>jQuery</red> has changed the way that millions of people <azure>write</azure> <red>JavaScript</red>.
            <br/><br/>
            <green>AJAX</green>
            <br/><br/>
            <red>Ajax</red> short for "<azure>Asynchronous</azure> <red>JavaScript</red> and <red>XML</red>" is a <purple>set</purple> of web development techniques 
            that uses various web technologies on the client-side to <azure>create</azure> <azure>asynchronous</azure> web applications.
            <br/><br/>
            With <red>Ajax</red>, web applications can send and <azure>retrieve</azure> <purple>data</purple> from a <azure>server</azure> <azure>asynchronously</azure> 
            (in the background) without interfering with the display and behaviour of the existing page. 
            <br/><br/>
            <green>JSON</green>
            <br/><br/>
            <red>JSON</red> stands for <red>JavaScript</red> <red>Object</red> Notation is a lightweight format for <azure>storing</azure> and transporting 
            <purple>data</purple>.
            <red>JSON</red> is often used when <purple>data</purple> is sent from a <azure>server</azure> to a web page.
            <red>JSON</red> is "self-describing" and easy to understand.
            <br/><br/>
            <green>Bootstrap</green>
            <br/><br/>
            <red>Bootstrap</red> is the most popular <red>CSS</red> Framework for developing <azure>responsive</azure> and 
            mobile-first websites.
            <br/><br/>
            <red>Bootstrap</red> 5 is the newest version of <red>Bootstrap</red>.
            <br/><br/>
            <green>TypeScript</green>
            <br/><br/>
            <red>TypeScript</red> is a free and <azure>open</azure>-<azure>source</azure> <azure>high</azure>-<azure>level</azure> <red>programming</red> <red>language</red> developed by Microsoft 
            that <azure>adds</azure> <purple>static</purple> <purple>typing</purple> with optional <purple>type</purple> annotations to <red>JavaScript</red>.
            <br/><br/>
            <red>TypeScript</red> may be used to develop <red>JavaScript</red> applications for both client-side and 
            <azure>server</azure>-side execution.
            The <red>TypeScript</red> <red>compiler</red> is itself written in <red>TypeScript</red> and <red>compiled</red> to <red>JavaScript</red>.</description>
        <oop>*General-Programming-Knowledge*
            <br/>
            <green>
            OOP in JavaScript:
            </green>
            <br/><br/>
            The <red>objects</red> can be classifed in 2 categories:<br/>
            
            - standard built-in <red>objects</red>;<br/>
            - custom <red>objects</red>;<br/>
            
            <br/>
            In <red>Javascript</red> the concept called of "<red>class</red>" is different, so <red>objects</red> are 
            not built <red>based</red> on <red>classes</red> alone, but also <red>based</red> on <red>functions</red> or 
            literal notations (or singletons).
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of creating objects in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an object using an function as Object Constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function Employee (firstName, lastName) <comment>//This will be the constructor;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.firstName = firstName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.LastName = lastName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//This is an object method:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.getFullName = function () {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return this.firstName + " " + this.LastName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an instance of the object:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var emp = new Employee("Alan", "Walker");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("First Name: " + emp.firstName + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Last Name: " + emp.LastName + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Full Name: " + emp.getFullName() + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a class with Object Constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Student</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    constructor(firstName, lastName)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.firstName = firstName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.LastName = lastName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    getFullName() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return this.firstName + " " + this.LastName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var stud = new Student("Alan", "Walker");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("First Name: " + stud.firstName + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Last Name: " + stud.LastName + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Full Name: " + stud.getFullName() + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an object using a Variable/Literal Notation or Singleton:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var objct = { <comment>//in this case we already create an object/instance.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Here we are now describing the functionality of the object:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// In this case instead of equal sign for assignment </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//we use colon operator and coma afterwards;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    firstName: "Alan", </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    lastName: "Walker",</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    getFullName: function ()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return this.firstName + " " + this.lastName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Displaying the information about this objct:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("&lt;br&gt;First Name: " + objct.firstName + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Last Name: " + objct.lastName + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Full Name: " + objct.getFullName() + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <green>Differences between the Object Constructor and Object Literal/Singleton:
            </green>
            <br/><br/>
            In the <red>constructor</red> case the <purple>properties</purple> are separed by their <purple>values</purple> 
            using = <purple>operator</purple>, whereas in case of literal notation 
            we use : <purple>operator</purple>;
            <br/><br/>
            In case of <red>contructor</red> we use ; to separate the <purple>properties</purple>, in 
            literal notation we use , 
            instead.
            <br/><br/>
            With the <red>constructor</red> <red>method</red>, you first need to <azure>create</azure> an <red>instance</red> 
            in order to access its <purple>properties</purple>, but with literal notation the 
            <red>instance</red> is already <azure>created</azure>, so you can just access it. 
            <br/><br/>
            <red>Objects</red> <azure>created</azure> using literal notation are singletons, 
            this mean that when a <purple>value</purple> is 
            changed for an <red>instance</red>, it affects all the <red>instances</red> <azure>created</azure>. 
            <br/><br/>
            This is happening because all the <red>instances</red> <azure>created</azure> from literal notation 
            will <purple>reference</purple> the same <purple>set</purple> of <purple>values</purple>, so if any of them make a change, that change will 
            affect the whole <purple>set</purple> of <red>instances</red>.
            <br/>
            Whereas this is not the case using <red>constructor</red> <red>objects</red>.
            <br/><br/>
            <green>
            When to use Object Constructor or Object Literal/Singleton:
            </green>
            <br/><br/>
            When multiple <red>instances</red> of an <red>object</red> are needed the <red>object</red> <red>contructor</red> will be used.
            <br/>
            When single <red>instance</red> of an <red>object</red> is needed the <red>object</red> literal can be used.
            <br/><br/>
            Singleton means that the <red>object</red> cannot have multiple <red>instances</red> 
            without affecting one another. <br/>
            That's why the <red>object</red> literal is a singleton.
            <br/><br/>
            The common way used for <azure>creating</azure> <red>objects</red> in all the <red>OOP</red> <red>languages</red> is by using 
            <red>Object</red> <red>Constructor</red>.
            <br/></oop>
        <reflection>*General-Programming-Knowledge*
            <br/>
            <red>Reflection</red> <azure>allows</azure> the inspection of <purple>meta</purple> <purple>data</purple>, 
            assemblies, <red>modules</red> and <purple>type</purple>.
            <br/><br/>
            If the <red>object</red> is <azure>derived</azure> from a <red>base</red> <red>class</red> than
            <red>reflection</red> can also inspect the <red>parent</red>/<red>base</red> <red>class</red> <purple>data</purple>.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of reflection in JavaScript</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var Class = function (objName, objID, objType) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//These are public fields:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.ObjectName = objName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.ObjectID= objID;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.ObjectType = objType;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//These are public methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Class.prototype.getObjectName = function () {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return this.ObjectName + "&lt;br&gt;";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Class.prototype.getObjectID = function () {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return this.ObjectID + "&lt;br&gt;";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Class.prototype.getObjectType = function () {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return this.ObjectType + "&lt;br&gt;";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var Class = new Class ("Car", "2", "Base Class");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a foreach loop:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for (var property in Class)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Checking if the property is a variable:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if(typeof Class[property] != "function")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        document.write(property + " : " + Class[property] + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//A property of class can be accessed using ClassName[foreach_variable].</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Another foreach loop:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for (var p in Class)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Checking if a property is not inherited:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if( Class.hasOwnProperty(p) )</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        document.write(p + " : " + Class[p] + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Checking if a property is inherited:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if( !Class.hasOwnProperty(p) )</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        document.write(p + " : " + Class[p] + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></reflection>
        <encapsulation>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of encapsulation in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function Car ()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Creating private fields using the naming convention.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    var _speed;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    var _acceleration;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Creating properties: getters and setters</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Object.defineProperty(this, "speed", </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        get: function () </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return _speed;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        , <comment>//using the coma operator to separate between get and set properties:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        set: function (value)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            _speed = value;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    })</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//The second way of creating getters and setters</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Private methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    function getAccel()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return _acceleration;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    function setAccel(value)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        _acceleration = value;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//The third way of achieving encapsulation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Privileged methods;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.getAcceleration = function() <comment>//this is a get function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return getAccel();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.setAcceleration = function (value) <comment>//this is a set function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        setAccel(value);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    Privileged methods can be accessed from anywhere, and apart of public methods. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    Privileged methods are the only methods that can access directly private </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    fields and functions. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    In the case of public methods this is not possible.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var c = new Car();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Now we can use this syntax for initializing the private fields:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c.speed = 12; <comment>//using the set:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write ("The car speed is " + c.speed + "&lt;br&gt;"); <comment>//using the get;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Using the second way of encapsulation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c.setAcceleration(22); <comment>//using the setter</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write ("The car acceleration is " + c.getAcceleration() + "&lt;br&gt;"); <comment>//using the getter;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></encapsulation>
        <polymorphism>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating polymorphism in Javascript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a base class;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var Shape = function() { }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Adding a function to the class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Shape.prototype.draw = function () </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return "I am a generic shape.";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating another class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var Circle = function () {}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Doing the inheritance:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Circle.prototype = Object.create(Shape.prototype);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Overriding the base class function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Circle.prototype.draw = function ()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return "I am a circle shape.";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating another class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var Square = function () {}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Doing the inheritance:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Square.prototype = Object.create(Shape.prototype);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Overriding the base class function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Square.prototype.draw = function () </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return "I am a square shape.";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a collection of objects:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var collection = [new Shape(), new Circle(), new Square()];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Iterating through the collection using foreach loop:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">collection.forEach(function (shape) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write(shape.draw() + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Expected result every object calls it's own implementation of .draw() function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//I am a generic shape.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//I am a circle shape.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//I am a square shape.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">})</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></polymorphism>
        <inheritance>*General-Programming-Knowledge*
            <br/>
            In other <red>programming</red> <red>languages</red> a <red>class</red> <red>inherits</red> from 
            another <red>class</red>, 
            but in <red>Javascript</red> an <red>object</red> will only <red>inherits</red> from another 
            <red>object</red> (this is called <red>prototype</red> <red>based</red> <red>inheritance</red>).
            <br/><br/>
            Also it's not possible for a <red>constructor</red> to
            <red>inherit</red> from another <red>constructor</red>.
            <br/><br/>
            A <red>constructor</red> can <red>inherit</red> only from an <red>instance</red> 
            of another (also called <red>object</red>).
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of inheritance in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a singleton object constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var Vehicle = function (Name, Traction)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.name = Name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.traction = Traction;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Creating a function object constructor will work as well:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>function Vehicle(Name, Traction)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>{</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    this.name = Name;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    this.traction = Traction;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>}</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a function using the prototype object:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Vehicle.prototype.getName = function ()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return this.name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Vehicle.prototype.getTraction = function()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return this.traction;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating another singleton object:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Inheritance can also be made using the first singleton object(var Vehicle), </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//as well, but the main fields should be initialized first. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var car = function (speed, acceleration)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//this keyword refers to the current instance's field.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.speed = speed;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.acceleration = acceleration;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an object from the singleton constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var vehicle = new Vehicle("Bike", "2 wheels");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating the inheritance:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">car.prototype = vehicle; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Now the any object of the car constructor is a child of the "vehicle" object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an object of the constructor "car".</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var c = new car(22, 109); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("The following fields are inherited: &lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//calling the functions inherited from parent object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Name: " + c.getName() + "&lt;br&gt;"); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Traction: " + c.getTraction() + "&lt;br&gt;"); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Adding a new method to the parent object will automatically </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>make it available to the child object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.hasOwnProperty() - this method will check whether a property/field/variable </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>is defined on the actual object or prototype. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>By that it can be found all the inherited properties.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Is Name a Property of c Object: " + c.hasOwnProperty("name") + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Is Speed a Property of c Object: " + c.hasOwnProperty("speed") + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/* Another Example: Inheritance from the first object of the singleton: */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Singleton Nume: " + Vehicle.name + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Vehicle.name = "Something";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Vehicle.traction = "4 wheels";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Singleton Nume: " + Vehicle.name + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function Class (num)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.number = num;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>87  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Class.prototype = Vehicle;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>88  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var clas = new Class(4)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>89  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>90  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Inherited From Singleton: " + clas.name + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>91  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>92  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>93  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Inheritance can be realized without singletons as well:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>94  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>95  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>function Class (num)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>96  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>{</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>97  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    this.number = num;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>98  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>}</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>99  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>100 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>var cl = new Class(7);</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>101 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>102 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>function B (name)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>103 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>{</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>104 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    this.name = name;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>105 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>}</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>106 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>B.prototype = cl;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>107 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>108 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>var bb = new B("Alan");</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>109 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>110 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>document.write(bb.number + " is perfectly valid" + "&lt;br&gt;");</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>111 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>112 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></inheritance>
        <abstraction>*General-Programming-Knowledge*
            <br/>
            <azure>Abstract</azure> <red>object</red> <red>constructors</red> are those <red>constructors</red> that 
            cannot be <red>instantiated</red>. That means that no <red>object</red> can be 
            <azure>created</azure> out of them. 
            The purpose of using such <red>constructors</red> is to provide <red>inheritance</red> 
            to other <red>prototypes</red>. 
            <br/><br/>
            In this way the functionality can be <azure>shared</azure> amongst the <red>objects</red> without 
            needing any <red>instances</red>.
            <br/><br/>
            <azure>Blocking</azure> a <red>constructor</red> from being <red>instantiated</red> will result in error.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of abstraction</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function House ()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.personName = "";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//This will block anyone from creating an instance with this constructor.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    throw Error ("Cannot instantiate an abstract object.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//This is a public-static method of House object;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">House.prototype.printMsg = function()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write("Printing a message!" + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function Home(pn)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Using the base object (Home) field named personName;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    personName = pn;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.getHomeOwnerName = function ()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return personName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating the inheritance:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//House is gonna be the base class for Home constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Home.prototype = Object.create(House.prototype); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Object.create - will create an object without using the constructor.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an instance of the child object:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var h = new Home("Adrian");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Using the child object method and parent object field:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Owner's name: " + h.getHomeOwnerName() + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Is name owned by this class: " + h.hasOwnProperty("personName") + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Is h instance of House: " + (h instanceof House) + "&lt;br&gt;")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("Is h instance of Home: " + (h instanceof Home) + "&lt;br&gt;")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Calling the base object method;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">h.printMsg();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstraction>
        <generic-programming>*General-Programming-Knowledge*
            <br/>
            <red>TypeScript</red> is a syntactic superset of <red>JavaScript</red> which <azure>adds</azure> <purple>static</purple> <purple>typing</purple> which
            also facilitates the use of <red>generic</red>-<red>programming</red>.
            <br/><br/>
            This basically means that <red>TypeScript</red> <azure>adds</azure> syntax on top of <red>JavaScript</red>, 
            <azure>allowing</azure> developers to <azure>add</azure> <purple>data</purple> <purple>types</purple>.
            <br/><br/>
            <green>
            Why should I use TypeScript?
            </green>
            <br/><br/>
            <red>JavaScript</red> is a loosely <purple>typed</purple> <red>language</red>. It can be difficult to understand 
            what <purple>types</purple> of <purple>data</purple> are being passed around within the <azure>script</azure>.
            <br/><br/>
            In <red>JavaScript</red>, <red>function</red> <red>parameters</red> and <purple>variables</purple> don't have 
            any information! 
            So developers need to look at documentation, or guess <red>based</red> on the <red>implementation</red>.
            <br/><br/>
            <red>TypeScript</red> <azure>allows</azure> specifying the <purple>types</purple> of <purple>data</purple> being passed around within 
            the <azure>code</azure>, and has the ability to report errors when the <purple>types</purple> don't <azure>match</azure>.
            <br/><br/>
            For example, <red>TypeScript</red> will report an error when passing a <code>string</code> into a 
            <red>function</red> that expects a number. <red>JavaScript</red> will not do that.
            <br/><br/>
            <red>TypeScript</red> uses <red>compile</red> time <red>type</red> <red>checking</red>. Which means it checks if the 
            specified <purple>types</purple> <azure>match</azure> 
            before running the <azure>code</azure>, not while running the <azure>code</azure>.
            <br/><br/>
            <red>Generics</red> <azure>allow</azure> <azure>creating</azure> 'type variables' which can be used to 
            <azure>create</azure> <red>classes</red>, <red>functions</red> and 
            <purple>type</purple> aliases that don't need to explicitly define the <purple>types</purple> that they use.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generic programming in JavaScript using TypeScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function createPair&lt;S, T&gt;(v1: S, v2: T): [S, T] </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  return [v1, v2];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">console.log(createPair&lt;string, number&gt;('hello', 42)); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//OUTPUT: ['hello', 42]</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generic class implementation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class NamedValue&lt;T&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  private _value: T | undefined;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  constructor(private name: string) {}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  public setValue(value: T) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this._value = value;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  public getValue(): T | undefined </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return this._value;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  public toString(): string </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return `${this.name}: ${this._value}`;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">let value = new NamedValue&lt;number&gt;('myNumber');</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">value.setValue(10);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">console.log(value.toString()); <comment>// myNumber: 10</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></generic-programming>
        <variable-arguments-lists>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using variable number of arguments in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>The argument object is used to store the value of arguments of a function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Accessing the argument object outside a function will result in undefined error.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>The argument object is not an array, but it only has one property of the array, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>and that is .length</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function Myfct(a,b,c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write("The function has: " + arguments.length + " arguments.&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//arguments.length will return the number of arguments that was passed to the function. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Not the number of parameters that the function has. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write("&lt;br&gt;The arguments are: &lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (var i =0; i&lt;arguments.length; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        document.write(" " + arguments[i] + " ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write("&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>The Myfct(a,b,c) function has 3 parameters: a,b,c </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>but it is called below using 5 arguments: 0,1,3,4,5</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Myfct(0,1,3,4,5); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//In JavaScript a function can be called using any number of arguments. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//The unnecessary ones will be ignored.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a function with various number of arguments;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function getSum() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    var sum=0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (var i=0; i&lt;arguments.length; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        sum+=arguments[i];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return sum;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//See how the getSum() function is declared without any parameters </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//but it is called with various number of arguments each time.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("&lt;br&gt;The sum of all the arguments is: " + getSum(1,12,3,22,1,3,4,22) + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("The sum of all the arguments is: " + getSum(-2,10,4,21) + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//the function was called with different number of arguments each time and </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//it worked fine every time.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></variable-arguments-lists>
        <simple-data-types><red>Javascript</red> is a <azure>dynamical</azure> <purple>type</purple> <red>language</red> this means that any <purple>variable</purple> 
            can <azure>store</azure> any <purple>data</purple> <purple>type</purple>.
            <br/><br/>
            <green>
            Data Values:
            </green>
            <br/><br/>
            Numbers: <code>22</code>, <code>22.4</code>, <code>44</code>;<br/>
            <purple>Strings</purple>: <code>"me"</code>, <code>"you"</code>; <br/>
            <purple>boolean</purple>: <code>true</code>, <code>false</code>; <br/>
            <br/>
            <purple>Strings</purple> can also be initialized using single quotes such as: <code>'me'</code>, <code>'you'</code>
            
            <br/><br/>
            All the <purple>variables</purple> are declared using the <code>var</code> keyword.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using JavaScript dynamical typed variables:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var A = 22;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">A="My string";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//This is perfectly valid, because the var size and type </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//will be automatically converted as needed.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Variables and function as in other programming languages they are case sensitive </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>this means that var A is different from var a; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>and function A () {} is different from function a() {};</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            In order to <azure>add</azure> <purple>static</purple> <purple>typing</purple> so that <red>JavaScript</red> can work with 
            <purple>data</purple> <purple>types</purple>, the <red>TypeScript</red> was introduced. 
            <br/><br/>
            <red>TypeScript</red> is a free and <azure>open</azure>-<azure>source</azure> <azure>high</azure>-<azure>level</azure> <red>programming</red> <red>language</red> developed by 
            Microsoft that <azure>adds</azure> <purple>static</purple> <purple>typing</purple> with optional <purple>type</purple> annotations to <red>JavaScript</red>.
            <br/><br/>
            Example of using <red>TypeScript</red> <purple>data</purple>-<purple>types</purple>:
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//String data-type:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var name:string = "John";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Number data-type:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var score1:number = 50;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var score2:number = 42.50</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Array data-type</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var alphas:string[]; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">alphas = ["1","2","3","4"] </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Tuple data-type</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var mytuple = []; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">mytuple[0] = 120 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">mytuple[1] = 234</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Union data-type</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var val:string|number </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">val = 12 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Interface data-type:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">interface IPerson { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   firstName:string, </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   lastName:string, </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   sayHi: ()=&gt;string </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Classes</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Shape { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   Area:number </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   constructor(a:number) { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      this.Area = a </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></simple-data-types>
        <loops>*General-Programming-Knowledge*
            <br/>
            <green>
            JavaScript also provides a forEach() function.
            </green>
            <br/><br/>
            The <code>forEach()</code> <red>method</red> of <purple>Array</purple> <red>instances</red> executes a provided <red>function</red> once 
            for each <purple>array</purple> element.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of foreach loop in JavaScript</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">const array1 = ['a', 'b', 'c'];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">array1.forEach((element) =&gt; console.log(element));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Expected output: "a"</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Expected output: "b"</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Expected output: "c"</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></loops>
        <collections>*General-Programming-Knowledge*
            <br/>
            <green>In JavaScript:</green>
            <br/><br/>
            An <purple>array</purple> is a <purple>collection</purple> of <purple>variables</purple> which can take 
            any <purple>type</purple> of <purple>values</purple>. A <red>JavaScript</red> <purple>Array</purple> is much like a 
            <purple>Vector</purple> or a <purple>List</purple>, 
            being <azure>dynamic</azure> in length (resizeable).
            <br/><br/>
            For example: an <purple>array</purple> could <azure>store</azure> both <purple>strings</purple> and 
            <purple>integer</purple> <purple>values</purple> in it.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of creating an array in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an array without a constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var arr = ["James", 10, 2];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Another ways to create an array without a constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var arr2 = []; <comment>//Creating an array (without constructor), the size is not specified.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Dispite the other C-like languages, creating an array using this syntax make it resizeable.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">arr2[0]= 22; <comment>//the array length is now 1.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">arr2[1]= 44; <comment>//the array length is now 2.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an array using the constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var arr3 = new Array(5); <comment>// the 5 between the parenthesis specifies the length.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//The elements of arr3 are not initialized.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an array using constructor, the elements are specified.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var arr4 = new Array(26,8,1994); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>The elements can be specified while creating an array using a constructor, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>by using multiple arguments when calling it. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>So, you cannot create and initialize an array with a single element, using this syntax. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></collections>
        <collection-methods>*General-Programming-Knowledge*
            The <purple>collection</purple> <red>methods</red> in <red>Javascript</red> can be divided in 2 categories:
            <br/>
            
             - <purple>mutator</purple> <red>methods</red>;<br/>
             - <purple>non</purple>-<purple>mutator</purple> <red>methods</red>;<br/>
            
            <br/>
            A <purple>mutator</purple> <red>method</red> is a <red>method</red> that change or modify the <purple>array</purple> <red>object</red>
            (in <purple>size</purple> or content).
            <br/><br/>
            The <purple>non</purple>-<purple>mutator</purple> <red>methods</red> are the <red>methods</red> that don't perform 
            any change on the <purple>array</purple> <red>object</red>.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an array using constructor.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var arr4 = new Array(26,8,1994); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//.length property contains the current number of elements within the array</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("The length of arr4 is: " + arr4.length + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//.pop() - This method removes and returns the last item from the array.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("This element was returned using pop method: " + arr4.pop() + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//.shift() - This method removes and returns the first element of the array.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("This element was returned using shift method: " + arr4.shift() + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>MORE METHODS:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>These are Mutator methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.push() - This method adds a new item at the end of the array.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.pop() - This method removes and returns the last item from the array.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.unshift() - This method adds a new item at the beginning of the array.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.shift() - This method removes and returns the first element of the array.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.reverse() - This method reverse the element order of an Array Object </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>(the last element becomes the first, etc).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.sort() - This method sorts the items of an array (alphabetical, descending or ascending, etc).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.slice() - This method returns a shallow copy of a portion of an array into a new array object </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>selected from begin to end (end not included). </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>The original array will not be modified. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>It can be used for adding or removing a group of item after the specified index. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Non-mutator methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.contains() - This method returns a boolean value specifying whether the searched value </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>is present in the array or not.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.lastIndexOf() - This method returns the position of the last occurrence of a specified value.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>.indexOf() - This method returns the position of the first occurrence of a specified value.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></collection-methods>
        <serialization>*General-Programming-Knowledge*</serialization>
        <deserialization>*General-Programming-Knowledge*</deserialization>
        <enums>*General-Programming-Knowledge*
            In <red>JavaScript</red> <purple>enums</purple> are made available only with by the means of <red>TypeScript</red>.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using enums in TypeScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">enum CardinalDirections </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  North,</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  East,</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  South,</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  West</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">let currentDirection = CardinalDirections.North;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// logs 0</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">console.log(currentDirection);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// throws error as 'North' is not a valid enum</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">currentDirection = 'North'; <comment>// Error: "North" is not assignable to type 'CardinalDirections'.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></enums>
        <constructors>*General-Programming-Knowledge*
            <br/>
            A <red>constructor</red> is a special <red>function</red> that <azure>creates</azure> and initializes an 
            <red>object</red> <red>instance</red> of a <red>class</red>. 
            <br/><br/>
            In <red>JavaScript</red>, a <red>constructor</red> gets called when an <red>object</red> 
            is <azure>created</azure> using the <code>new</code> keyword.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of constructor in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function User (name, age) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.name = name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.age = age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var user1 = new User('Bob', 25);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var user2 = new User('Alice', 27);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></constructors>
        <instantiation>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Instantiation in Javascript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var user1 = new User('Bob', 25);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></instantiation>
        <destructors>*General-Programming-Knowledge*
            <br/>
            <brown>
            JavaScript doesn't have a concept of destructors like many OOP languages.
            </brown></destructors>
        <function-overloading>*General-Programming-Knowledge*
            <br/>
            <green>
                JavaScript does not support function overloading.
            </green>
            <br/><br/>
             When <azure>creating</azure> 2 <red>functions</red> with the same name and different
             number of <red>arguments</red> in <red>JavaScript</red>, the <red>function</red> declared later 
             will <azure>replace</azure> the <red>function</red> 
             declared sooner, in the <purple>global</purple> <purple>namespace</purple>. 
             <br/><br/>
             This <azure>process</azure> is called <purple>namespace</purple> pollution (or name collision). 
             <br/><br/>
             Also if the <azure>scripts</azure> are written in different <purple>files</purple>, the <purple>file</purple> 
             which is loaded last will <azure>replace</azure> the <red>function</red> 
             declared into the <purple>file</purple> which was loaded first.
             <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of namespace pollution</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function PrintSomething()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    alert("This is the first function.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function PrintSomething(a) <comment>//this function will replace the first function declared above;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    alert("This is the second function.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">PrintSomething(5);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//This is the second function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></function-overloading>
        <operator-overloading>*General-Programming-Knowledge*
            <br/>
            <green>
                JavaScript doesn't support operator overloading.
            </green></operator-overloading>
        <concurrent-programming>*General-Programming-Knowledge*
            <br/>
            <green>Multithreading in JavaScript:</green>
            <br/><br/>
            <red>JavaScript</red> is a <azure>single</azure>-<azure>threaded</azure> <red>language</red> which means it does 
            not support <azure>multithreading</azure>. <br/>
            <br/>
            All the <purple>operations</purple> in <red>JavaScript</red> are non-<azure>blocking</azure> and are executed in the event <azure>loop</azure>. 
            <br/>
            This <azure>single</azure>-<azure>threaded</azure> nature along with event <azure>loop</azure> <azure>allows</azure> 
            <red>JavaScript</red> to handle <red>concurrent</red> <purple>operations</purple> at once.
            <br/></concurrent-programming>
        <namespaces>*General-Programming-Knowledge*
            <br/>
            In <red>JavaScript</red>: it is possible to declare 2 <red>functions</red> with the same name, 
            but not in the same <purple>namespace</purple>.
            <br/><br/>
            Similarly with <azure>creating</azure> 2 <purple>variables</purple> with the same name but in 
            different <red>scope</red> (<purple>global</purple> and local).
            <br/><br/>
            The <purple>global</purple> <purple>namespace</purple> in <red>JavaScript</red> can be accessed using <code>window.Object</code> 
            - where <red>Object</red> is an item in the <purple>global</purple> <purple>namespace</purple> "window".
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of creating a namespace in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Create a variable named NameSpace </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//if such an object already exists, than my variable will take its value,</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//otherwise my variable will be an empty object {};</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var NameSpace = NameSpace || {} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating a nested namespace/object;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">NameSpace.a = NameSpace.a || {} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an object into the nested namespace:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">NameSpace.a.print = function () </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    this.PrintMessage = function ()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        alert("Message from the nested object.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Creating an instance of the nested namespace object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var a = new NameSpace.a.print;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Setting the object method for the onclick button.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.getElementById("but2").onclick = a.PrintMessage;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Another example of creating a namespace:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    var yourNamespace = {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        foo: function() {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        },</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        bar: function() {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        }</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    };</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    yourNamespace.foo();</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></namespaces>
        <exception-handling>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of exception handling in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">try</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//The code that can produce exception will be put here:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write(sayHello()); <comment>//calling undefined function will cause an exception;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write("This line will be skipped, once the exception was caught.&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">catch(e) <comment>//e is the type of exception to be caught;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write("Error. Calling undefined function.&lt;br&gt;&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write(e.description+"&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write(e.message+"&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write(e.stack+"&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">finally <comment>//this will be executed no matter what.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    The code in this block will be executed regardless </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    if there was an exception or not.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write("&lt;br&gt;Finished. &lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Throwing customized exceptions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function Fraction(a,b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    try</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        if (b==0)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            throw </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//creating a custom exception.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//Completing the exception properties:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                error: "Divide by zero error." ,  <comment>//here is coma not semicolon</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                message: "Denominator cannot be ZERO."</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        else</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return a/b;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    catch(e) <comment>//catching the custom exception</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        document.write("Exception caught. " + e.error + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        document.write(e.message + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var a = parseInt(prompt("Enter a number for nominator: "));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var b = parseInt(prompt("Enter a number for denominator: "));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("&lt;br&gt;The result a/b is: " + Fraction(a,b) + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Using window.onerror for handling errors:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Once the window.onerror is initialized with a function which takes 3 arguments: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>msg, url, line. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Any error that will occur will execute that code.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">window.onerror = function (msg, url, line)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//This code will be executed each time an error occur</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//without the need of try/catch blocks.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    alert("Message: " + msg + "\nURL: " + url + "\nLine: " + line);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return true;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Raising window.onerror by calling undefined function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">UndefinedFunction();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>window.onerror is not displayed if it's places in a try/catch block, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>instead the try/catch will handle the exception it by itself.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment/></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>87  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>window.onerror is raised only when there is an unhandled exception.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>88  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>89  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>90  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Handling an html element error:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>91  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function ImageErrorHandler() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>92  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>93  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//this function will be executed when the html image will have an error.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>94  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>95  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    alert("The image is not present.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>96  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>97  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></exception-handling>
        <bitwise-operators>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with bitwise operators in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">let x = 5 | 1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">let x = 5 ^ 1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">let x = ~5;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">let x = 5 &lt;&lt; 1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">let x = -5 &gt;&gt; 1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></bitwise-operators>
        <default-parameters>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of default arguments/parameters in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function myFunction(x, y) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//check whether second argument was passed to the function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (y === undefined) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        y = 2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//In JavaScript a function can be called with any number of arguments:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">myFunction(2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">myFunction(2,3,4,5);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></default-parameters>
        <interfaces>*General-Programming-Knowledge*
            <br/>
            In <red>JavaScript</red>, an <red>interface</red> can be thought of as a <purple>set</purple> of 
            <red>method</red> signatures that a <red>class</red> must <red>implement</red>.
            <br/><br/>
            You can define an <red>interface</red> as an empty <red>object</red> 
            containing <red>method</red> names and their associated <red>function</red> signatures.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of implementation of an interface in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">const MyInterface = {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    method1: function () { },</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    method2: function (param1, param2) { },</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class MyClass {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    method1() {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        console.log("Method 1 called");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    method2(param1, param2) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        console.log(</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            `Method 2 called with ${param1} and ${param2}`);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function implementsInterface(obj, interfaceObj) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (const method in interfaceObj) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        if (!(method in obj) || </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            typeof obj[method] !== "function") {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return false;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return true;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">const myObject = new MyClass();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if (implementsInterface(myObject, MyInterface)) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    console.log(</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        "myObject implements MyInterface");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} else {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    console.log(</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        "myObject does not implement MyInterface");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></interfaces>
        <random-generators>*General-Programming-Knowledge*<br/>
            <br/>
            Generate a <red>random</red> whole number between 1 and 10 (inclusive):
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generating random numbers in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">let x = Math.floor((Math.random() * 10) + 1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></random-generators>
        <ternary-operator>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with ternary operator in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function Funct()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    var a = document.getElementById('textBox').value;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//if statement is used to execute code when a particular condition is true</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if(isNaN(a))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        document.getElementById('textBox').value+= " 'is not a number.'";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else <comment>//if the condition above is not true, then it will execute this code.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        document.getElementById('textBox').value+= " is a number.";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//using ternary operator to change the color of the textbox:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    (isNaN(a)==true) ? alert("Entered ternary if.")  <comment>//this part is if condition is true</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    : alert("Entered ternary else.") <comment>//this part is executed otherwise.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    Ternary operator is also called the short if, and has the same functionality </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    as an if statement, the only difference is that ternary operator sythax is shorter, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    and yet harder to be read, in that regard it's better to use if else statements.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//using switch()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if(isNaN(a) == false)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        a = parseInt(a);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//switch works only with constant values: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//integer, long, chars values. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//switch cannot be used with floats, doubles or strings</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        switch(a)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            case 1: {alert("you have entered 1."); break} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            case 2: {alert("you have entered 2."); break}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            case 3: {alert("you have entered 3."); break}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            default : {alert("you have entered a number above 3 or below 1."); break}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// the break statement will break out of the switch.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//the default case is equivalent to else statement, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//it will be executed only of the cases above do not match.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        switch is very similar to an if, else if, else block, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        generally a switch statement it's faster in execution.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></ternary-operator>
        <modular-programming>*General-Programming-Knowledge*</modular-programming>
        <optional-parameters>*General-Programming-Knowledge*</optional-parameters>
        <string-methods>*General-Programming-Knowledge*
            <br/>
            <red>JavaScript</red> provides several <red>function</red> that facilitate <purple>string</purple> <azure>manipulation</azure>:
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Some string methods in JavaScript:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var string1 = "Blue bottle on a blue table."</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var result = string1.replace(/blue/g , "green") </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//.replace() This function replaces a substring within a string and </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//returns the result.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Result will be: Blue bottle on a green table.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">result = string1.replace(/blue/gi, "green") </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//result will be: green bottle on a green table.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">result = string1.substring(1, 4); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//.substring() This function returns the part of this string from the start </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//index up to and excluding the end index</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">result = string1.substring(4, 1); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//string1.substring(4, 1) will produce the same result as above, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//because the function will swap the values 4 with 1, because the start </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//value needs to be smaller than the end value. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//The value at the second parameter is not included in the returned result.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">result = string1.substring(4); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//will return a string containing all the character from 4th character </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//until the end of the string. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Result will be: "e bottle on a blue table."</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">result = string1.substr(1,4);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//.substr() has the same functionality .substring(), </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//But it doesn't swap the parameters, and the second parameter </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//specifies the last caracter to be returned.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">result = string1.slice(1,4); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//has the same functionality as the .substr()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//if the start is greater than the end - empty string is returned</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">result = string1.indexOf("B"); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//this function will return the index of "B" which is 0;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">result = string1.lastIndexOf(b); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//this will return the last index of specified value "b" which is: 17</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></string-methods>
        <datatype-conversions>*General-Programming-Knowledge*
            <br/>
            <red>JavaScript</red> <purple>variables</purple> can be converted to different <purple>data</purple> <purple>types</purple> by using the 
            following <red>functions</red>: <br/><br/>
            <code>Number()</code> - <purple>Returns</purple> a number, converted from its <red>argument</red><br/>
            <code>parseFloat()</code> - Parses a <purple>string</purple> and <purple>returns</purple> a <purple>floating</purple> <purple>point</purple> number<br/>
            <code>parseInt()</code> - Parses a <purple>string</purple> and <purple>returns</purple> an <purple>integer</purple><br/>
            <code>String()</code>  - Converts to <purple>string</purple><br/></datatype-conversions>
        <operators>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//In JavaScript operator + can also be used for concatenation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//In JavaScript variables are converted implicitly to facilitate the operation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Plus operator:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var a = 10;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var b = 20;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//a + b will result 30;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">a = "10";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">b = 20;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//a + b will result 1020;  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//'b' will be converted to string and then concatenated with 'a'.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Minus operator:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">a = "10";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">b = 20;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//a-b will result -10; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//because the string 'a' will be automatically converted to a number.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></operators>
        <pre-post-incrementation>*General-Programming-Knowledge*</pre-post-incrementation>
        <minification><purple>Minification</purple> of <red>Javascript</red> consists in reducing the amount of <red>JavaScript</red> 
            <purple>files</purple> used in a webpage as well as reducing the <purple>size</purple> of 
            each <purple>files</purple>, in order to optimize the <azure>server</azure> amount of requests from 
            the client machine.
            <br/><br/>
            Example: Instead of using 4 <red>JavaScript</red> <purple>files</purple>, it will be used a single <purple>file</purple>, 
            and instead of arranging the <azure>code</azure> in that <purple>file</purple> to be <azure>readable</azure>, it will be arranged in
            such a way that the <purple>size</purple> will be reduced by <purple>removing</purple> unnecessary 
            <purple>characters</purple> such used spaces, <purple>newline</purple> <purple>characters</purple> and <azure>comments</azure>.</minification>
        <recursion>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using recursion in JavaScript</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function RecursiveFunc(num)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (num &lt;= 1)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return 1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return num * RecursiveFunc(num-1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//This will be equivalent to n* n-1* n-2* n-3* ...... *1; when it reaches </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//1 all the functions will end</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Using the loop the whole code above can be implemented as :</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        var result=1;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        while(num &gt; 1)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        {</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            result*=num;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>            num-=1;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        }</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("This was a recursive function: " + RecursiveFunc(5) + "&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Comparison to loops:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("&lt;br&gt;With Loops&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var i;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for(i=0;i&lt;10;i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write(i+" ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//The equivalent recursive function of the for loop above is:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">document.write("&lt;br&gt;With Recursion&lt;br&gt;");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function Rec(a)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if(a&lt;10)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        document.write(a + " ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Rec(a+1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Rec(0);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></recursion>
        <abstract-classes>*General-Programming-Knowledge*
            <br/>
            <brown>
                In Javascript, the concept of an abstract class is not natively 
                supported as it is in other languages but it is however 
                available in TypeScript.
            </brown>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Abstract classes in TypeScript</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">abstract class Shape {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  name: string;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  constructor(name: string) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     this.name = name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Circle extends Shape {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  radius: number;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  constructor(name: string, radius:number){</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     super(name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     this.radius = radius;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">const myShape = new Shape('My shape'); <comment>// This will throw an Error </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">const shortCircle = new Circle("Short Circle", 0.5); <comment>// This will work fine.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstract-classes>
        <decorators>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Working with decorators in Javascript</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// "add" function takes the function as</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// a parameter for wrapping function </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// "print" is wrapped </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function add(fn) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return function(s) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        var gg = s + ' is Best';</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// By concatenating we extend</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// the function "add"</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fn(gg);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Decorated function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function print(s) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    document.write(s);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Calling "add"</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var g = add(print);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">g('GFG'); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></decorators>
    </manifest>
    
    <manifest>
        <name>Java</name>
        <description><red>Java</red> is a <azure>high</azure>-<azure>level</azure>, <red>class</red>-<red>based</red>, <red>object</red>-<red>oriented</red> 
            <red>programming</red> <red>language</red> that is 
            designed to have as few <red>implementation</red> dependencies as possible.
            <br/><br/>
            It is a general-purpose <red>programming</red> <red>language</red> intended to let 
            programmers <azure>write</azure> once, 
            <azure>run</azure> anywhere meaning that <red>compiled</red> <red>Java</red> <azure>code</azure> can <azure>run</azure> on all platforms that support 
            <red>Java</red> without the need to recompile. <br/><br/>
            
            <red>Java</red> applications are typically <red>compiled</red> to bytecode that can <azure>run</azure> on any 
            <red>Java</red> <red>virtual</red> machine (JVM) regardless of the 
            underlying <red>computer</red> architecture. The syntax of <red>Java</red> is similar to <red>C</red> and <red>C++</red>, 
            but has fewer <azure>low</azure>-<azure>level</azure> facilities than either of them. 
            The <red>Java</red> runtime provides 
            <azure>dynamic</azure> capabilities (such as <red>reflection</red> and runtime <azure>code</azure> 
            modification) that are typically not available in traditional <red>compiled</red> <red>languages</red>.</description>
        <oop>*General-Programming-Knowledge*
            In <red>Java</red> each <red>class</red> must have its own .<red>java</red> <purple>file</purple>. 
            There cannot be multiple <red>classes</red> in the same <purple>file</purple>,
            unless some of them are inner <red>classes</red> 
            (<red>class</red> inside another <red>class</red>).
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of class definition in Java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Student </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// data member (also instance variable)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int id;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// data member (also instance variable)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    String name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String args[])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// creating an object of</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Student - process called instantiation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Student s1 = new Student();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(s1.id);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(s1.name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></oop>
        <encapsulation>*General-Programming-Knowledge*
            <br/>
            <green>
            Encapsulation in Java:
            </green>
            <br/><br/>
            <red>Encapsulation</red> in <red>Java</red> is a mechanism of wrapping 
            the <purple>data</purple> (<purple>variables</purple>) 
            and <azure>code</azure> acting on the <purple>data</purple> (<red>methods</red>) 
            together as a single unit. 
            <br/><br/>
            In <red>encapsulation</red>, the <purple>variables</purple> of a <red>class</red> will be 
            hidden from other <red>classes</red>, and can be accessed only through 
            the <red>methods</red> of their current <red>classes</red>.
            <br/><br/>
            Therefore, it is also known as <purple>data</purple> hiding.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using Encapsulation in Java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Person Class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Person </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Encapsulating the name and age</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// only approachable and used using</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// methods defined</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private String name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private int age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public String getName() { return name; }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void setName(String name) { this.name = name; }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public int getAge() { return age; }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void setAge(int age) { this.age = age; }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Main </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// person object created</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Person person = new Person();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        person.setName("John");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        person.setAge(30);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Using methods to get the values from the</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// variables</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Name: " + person.getName());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Age: " + person.getAge());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></encapsulation>
        <polymorphism>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of polymorphism in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Bike</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    void run(){System.out.println("running");}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Splendor extends Bike</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    void run(){System.out.println("running safely with 60km");}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String args[])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Parent datatype instantiated with child object</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Bike b = new Splendor();<comment>//upcasting  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        b.run(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//even though b is Bike it's gonna act like Splendor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        running safely with 60km.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>    */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></polymorphism>
        <inheritance>*General-Programming-Knowledge*
            <br/>
            <green>Inheritance in Java:</green>
            <br/><br/>
            <red>Java</red> does not support multiple inheritances with <red>classes</red>. 
            But multiple 
            inheritances is still possible through the use of <red>interfaces</red>.
            <br/>
            Any <red>Java</red> <red>class</red> can <red>inherit</red> from a single <red>class</red> 
            and/or multiple <red>interfaces</red>.
            <br/><br/>
            By <red>inheritance</red> the <red>child</red> <red>class</red> (<red>class</red> which <red>inherits</red>) extends 
            the functionality of the <red>parent</red> <red>class</red>.
            <br/><br/>
            <green>Implements vs Extends:</green>
            <br/><br/>
            - extends is for extending a <red>class</red> (<red>class</red> <red>inheritance</red>);<br/>
            - extends can also be used for <red>interface</red> <red>inheritance</red>. 
            An <red>interface</red> can extend another <red>interface</red>.
            <br/>
            - <red>implements</red> is for <red>implementing</red> an <red>interface</red> 
            (<red>interface</red> to <red>class</red> <red>inheritance</red>);<br/>
            <br/>
            Through <red>implements</red> the <red>interfaces</red> exhibit the same characteristics 
            to the <red>classes</red> which are <red>implementing</red> them.
            <br/><br/>
            The main difference between an <red>interface</red> and a <red>class</red> is that 
            in an <red>interface</red> cannot <red>implement</red> any 
            of the declared <red>methods</red>. 
            <br/>
            Only the <red>class</red> that "<red>implements</red>" 
            the <red>interface</red> can <red>implement</red> the <red>methods</red>. 
            <br/><br/>
            Also
            an <red>interface</red> cannot contain <red>instance</red> <purple>fields</purple>/<purple>variables</purple>. 
            The only <purple>fields</purple> that can appear in an 
            <red>interface</red> must be declared both <purple>static</purple> and final.
            <br/>
            A final <purple>variable</purple>, also called a "<purple>constant</purple>", is a <purple>variable</purple> 
            whose <purple>value</purple> it cannot be
            change after it's been initialized. 
            <br/>
            A <purple>static</purple> <purple>variable</purple> is a <purple>variable</purple> 
            <azure>shared</azure> among all the <red>instances</red> of a <red>class</red> and which can be accessed
            from the <red>class</red> even with no <red>instances</red> by using: 
            <code>ClassName.variable;</code>
            <br/><br/>
            An <red>interface</red> is not extended by a <red>class</red>; 
            it is <red>implemented</red> by a <red>class</red>.
            <br/><br/>
            <green>Class to class inheritance:</green>
            <br/>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of class to class inheritance in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: Product.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project25;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Product </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private String name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private double Price;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public Product(String NewName, double NewPrice)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.name = NewName;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.Price = NewPrice;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Getters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public String GetName()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return this.name;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public double GetPrice()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return this.Price;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public String GetType()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return "Product";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: Books.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project25;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Books extends Product </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private String Author;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private int NrOfPages;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public Books(String NewAuthor, int NewNrOfPages, String NewName, double NewPrice)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        super(NewName, NewPrice); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//super refers to the parent class, so it will call the constructor of the  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//parent class, and it will initialize the two fields Price and Name.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.Author = NewAuthor;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.NrOfPages = NewNrOfPages;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Getters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public String GetAuthor()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return this.Author;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public int GetNrOfPages()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return this.NrOfPages;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Overriding the function of the parent class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    @Override</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public String GetType()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return "Book";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <green>Interface to class inheritance:</green>
        <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of class implementing an interface in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of defining a nested interface in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: ToDoListInterface.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project13;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//this is the outer interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public interface ToDoListInterface </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{ </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//this is the inner interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public interface Numbers</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int findMax(int a, int b, int c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    void PrintMessage(String message);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: Project13.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project13;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//This class is obliged to provide implementations for: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//ToDoListInterface and ToDoListInterface.Numbers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project13 implements ToDoListInterface, ToDoListInterface.Numbers </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     * @param args the command line arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating an object of the class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Project13 InstanceOfClass = new Project13();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Calling functions inherited from interface:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        InstanceOfClass.PrintMessage("This is a function that came from an interface!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Max number is: %d\n", InstanceOfClass.findMax(12, 33, 21));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner (System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//If Project13 class will not provide implementations for these methods</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//the program will not compile.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void PrintMessage(String Message){</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(Message);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public int findMax(int a, int b, int c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Using ternary operator:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return a&gt;b? a&gt;c? a : c : b&gt;c? b : c;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <green>Interface to interface inheritance:</green>
        <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: Sports.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public interface Sports </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void setHomeTeam(String name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void setVisitingTeam(String name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: Football.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public interface Football extends Sports </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void homeTeamScored(int points);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void visitingTeamScored(int points);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void endOfQuarter(int quarter);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: Hockey.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public interface Hockey extends Sports </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void homeGoalScored();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void visitingGoalScored();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void endOfPeriod(int period);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void overtimePeriod(int ot);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            Whatever <red>class</red> will <red>implement</red> <red>interface</red> Hockey will have to 
            provide <red>implementation</red> to all its <red>methods</red> + the extended <red>methods</red> from Sports 
            <red>interface</red>.
            <br/>
            Same goes for whatever <red>class</red> will <red>implement</red> Football.</inheritance>
        <abstraction>*General-Programming-Knowledge*
            <br/>
            <green>Abstraction in Java:</green>
            <br/><br/>
            In <red>Java</red>, <azure>abstraction</azure> is achieved using <azure>abstract</azure> <red>classes</red> and 
            <red>interfaces</red>.
            <br/><br/>
            A <red>class</red> which contains the <azure>abstract</azure> keyword in its declaration is 
            known as <azure>abstract</azure> <red>class</red>.
            <br/><br/>
            <azure>Abstract</azure> <red>classes</red> may or may not contain <azure>abstract</azure> <red>methods</red>, 
            i.e., <red>methods</red> without a body.
            <br/>
            Example: ( <code>public void get();</code> )
            <br/><br/>
            But, if a <red>class</red> has at least one <azure>abstract</azure> <red>method</red>, then the <red>class</red> 
            must be declared <azure>abstract</azure>.
            <br/><br/>
            If a <red>class</red> is declared <azure>abstract</azure>, it cannot be <red>instantiated</red>.
            <br/><br/>
            To use an <azure>abstract</azure> <red>class</red>, you have to <red>inherit</red> it from another 
            <red>class</red>, provide <red>implementations</red> to the <azure>abstract</azure> <red>methods</red> in it.
            <br/><br/>
            If you <red>inherit</red> an <azure>abstract</azure> <red>class</red>, you have to provide <red>implementations</red> 
            to all the <azure>abstract</azure> <red>methods</red> in it.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of abstraction using interfaces:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Defining an interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">interface Animal </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void animalSound(); <comment>// interface method (does not have a body)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void sleep(); <comment>// interface method (does not have a body)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Pig "implements" the Animal interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Pig implements Animal </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void animalSound() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// The body of animalSound() is provided here</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("The pig says: wee wee");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void sleep() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// The body of sleep() is provided here</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Zzz");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Main </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Pig myPig = new Pig();  <comment>// Create a Pig object</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myPig.animalSound();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myPig.sleep();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstraction>
        <generic-programming>*General-Programming-Knowledge*
            <br/>
            <green>Generic Programming in Java:</green>
            <br/><br/>
            <brown>Generic Classes:</brown>
            <br/><br/>
            In <red>Java</red> a <red>generic</red> <red>class</red> declaration is similar to a 
            regular <red>non</red>-<red>generic</red> <red>class</red> declaration, 
            except that the <red>class</red> name is followed by a 
            <code>&lt;type parameter&gt;</code> section.
            <br/><br/>
            For all <red>generics</red> the <code>&lt;type parameter&gt;</code> section can 
            contain one or more <code>&lt;type parameters&gt;</code> separated by commas.
            <br/><br/>
            Such <red>generics</red> are called parameterized <purple>types</purple> because they 
            accept one or more <red>parameters</red>.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generic class declaration in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project29;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class GenericClass &lt;T&gt; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   private T t;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   public void set(T t) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      this.t = t;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   public T get() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      return t;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

        In <red>Java</red> each <purple>data</purple> <purple>type</purple> has an <red>object</red> correspondant: 
        <br/>
        <code>int</code> (<azure>primitive</azure>) -&gt; <code>Integer</code> (<red>object</red>)<br/>
        <code>double</code> (<azure>primitive</azure>) -&gt; <code>Double</code> (<red>object</red>)<br/>
        etc...
        <br/><br/>
        We could use <red>generics</red> to wrap <azure>primitive</azure> <purple>types</purple> 
        into <red>objects</red>.
        <br/><br/>
        Example: <code>java.lang.Integer class</code>  wraps a <purple>value</purple> of the 
        <azure>primitive</azure> <purple>type</purple> <code>int</code> into an <red>object</red>. 
        <br/>
        The <red>object</red> of <purple>type</purple> <code>Integer</code> contains a single <purple>field</purple> 
        whose <purple>type</purple> is <code>int</code>
        <br/><br/>
        <brown>Generic Methods:</brown>
        <br/><br/>
        <red>Generic</red> <red>methods</red> are <red>methods</red> that can be called with <red>arguments</red> of 
        different <purple>types</purple>.
        <red>Based</red> on the <purple>types</purple> of the <red>arguments</red> passed to the 
        <red>generic</red> <red>method</red>, the <red>compiler</red> handles each <red>method</red> 
        call appropriately.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generic class instantiation in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generic method/function definition in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project29;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project29 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Instantiating the GenericClass from previous example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        GenericClass &lt;Integer&gt; FirstGeneric_Class = new GenericClass&lt;Integer&gt;();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        FirstGeneric_Class.set(2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Value of GenericClass object: %d\n", FirstGeneric_Class.get());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating some arrays:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Integer [] myArray = new Integer[] {1,42,13,24,5};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Character [] myCharArray = new Character[] {'D', 'N', 'C', 'A'};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Calling the generic method printArray() on 2 different arrays:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printArray(myArray);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printArray(myCharArray);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Keep the window opened until a key is pressed:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Creating a generic method/function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static &lt; E &gt; void printArray( E[] inputArray ) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Display array elements</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for(E element : inputArray) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         System.out.printf("%s ", element);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Another example of using generics:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>public final class Integer extends Number implements Comparable&lt;Integer&gt;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></generic-programming>
        <variable-arguments-lists>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example of variable arguments in Java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Test1 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// A method that takes variable </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// number of integer arguments.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    static void fun(int... a)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Number of arguments: "</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                           + a.length);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// using for each loop to display contents of a</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (int i : a)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.print(i + " ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String args[])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Calling the varargs method with </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// different number of parameters</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// one parameter</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fun(100); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// four parameters</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fun(1, 2, 3, 4); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// no parameter</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fun(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></variable-arguments-lists>
        <simple-data-types>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//In Java: function definitions outside classes is not allowed</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//The main function also needs to be places inside a function.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project2 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{ </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating a scanner in order to take the input;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//In Java strings needs to be declared using String keyword (with capital S);</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        String Name; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int Age;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        double height=11.1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//In Java the bool type got renamed to boolean.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        boolean IsFemale;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//In Java a variable cannot be displayed if it doesn't get initialized.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        String gender;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Enter you name: ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating a scanner for inputting;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Name = myscanner.nextLine();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Enter you age: ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Age = myscanner.nextInt(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//if any other data it's entered that cannot be converted into a integer</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//an exception will be thrown.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Enter your height: ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        height = myscanner.nextDouble();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//if any other type it's entered that cannot be converted into a float, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//an exception will be thrown.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Printing the stored information:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Are you a female? (True or False)\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        IsFemale = myscanner.nextBoolean();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Using the ternary operator:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        gender = IsFemale? "Female" : "Male";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Printing the information:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Hello %s. Your age is %d, and you're %f tall. \n", Name, Age, height);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("%s, you are a %s!\n", Name, gender);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//System.out.print(MyByte); =&gt; this code is not valid, because the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//variable MyByte is never initialized so it cannot be displayed.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Press any key to terminate!\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <green>Default initializations in Java:</green>
        <br/><br/>
            <code>Data Type             Default Value (for fields)</code><br/>
            <code>byte                     0</code><br/>
            <code>short                    0</code><br/>
            <code>int                      0</code><br/>
            <code>long                     0L</code><br/>
            <code>float                    0.0f</code><br/>
            <code>double                   0.0d</code><br/>
            <code>char                    '\u0000'</code><br/>
            <code>String (or any object)   null</code><br/>
            <code>boolean                  false</code><br/></simple-data-types>
        <complex-data-types>*General-Programming-Knowledge*</complex-data-types>
        <loops>*General-Programming-Knowledge*
            <brown>
            Foreach loop:
            </brown>
            <br/><br/>  
            <red>Java</red> also contains a <azure>foreach</azure> <azure>loop</azure>:
            <br/><br/>
            The <azure>foreach</azure> <azure>loop</azure> is used exclusively for <purple>collections</purple> such as: 
            <purple>arrays</purple>, <purple>vectors</purple>, <purple>lists</purple>, etc. 
            <br/>
            By using a <azure>foreach</azure> <azure>loop</azure> you can iterate through all the items in that 
            <purple>collection</purple> and access their <purple>values</purple> without using indexes.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of foreach loop in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project7;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project7 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int [] arrayC = {1,2,3,4,5,6,7,8,9,10};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Using foreach loop in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Multiplication Table with 10:\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (int k : arrayC)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.printf("10 * %d = %d\n", k, 10*k);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></loops>
        <collections>*General-Programming-Knowledge*
            <br/>
            <green>Collections in Java:</green>
            <br/><br/>
            <brown>Arrays</brown>
            <br/><br/>
            An <purple>array</purple> is a <purple>collection</purple> of <purple>data</purple> of the same <purple>type</purple>, with 
            fixed <purple>size</purple>/capacity.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of arrays in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">cars[0] = "Opel";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">System.out.println(cars[0]);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Now outputs Opel instead of Volvo</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int[] myNum = {10, 20, 30, 40};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">System.out.println(myNum[1]);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Now outputs 20</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <brown>Vectors</brown>
            <br/><br/>
            A <purple>Vector</purple> is a <azure>dynamic</azure> <purple>array</purple> that can change it's 
            <purple>size</purple>/capacity and is 
            capable of <azure>storing</azure> any <purple>type</purple> of <purple>data</purple>/<red>object</red>. Meaning that a <purple>Vector</purple> 
            of <red>objects</red> 
            can mix different <purple>types</purple> together such as: 
            <purple>integers</purple> and <purple>strings</purple>.
            <br/>
            
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with Vectors in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project11;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Vector; <comment>//using this for Vector class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project11 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     * the parameter args will store command line arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//creating a vector (of objects by default) of size 3;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Vector myVector = new Vector(3); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating a vector of integers:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Vector &lt;Integer&gt; Vector2 = new Vector(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//using the default constructor, this vector will have the size 10</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The capacity of the myVector before adding elements: %d\n", myVector.capacity());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The size of myVector before adding elements: %d\n", myVector.size());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//A Vector of object can mix different types of data together.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVector.add(21);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVector.add(55);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVector.add(77);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVector.add(192);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVector.add("Name");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The capacity of the myVector after adding 5 elements: %d\n", myVector.capacity());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The size of myVector after adding 5 elements: %d\n", myVector.size());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The capacity of the Vector2 is: %d\n", Vector2.capacity());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        The capacity increases automatically when it exceeds its initial value.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The index of NAME is: %d\n", myVector.indexOf("Name"));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Displaying elements:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int i = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Using foreach loop to iterate through the vector:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for(Object k : myVector)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">           if(i&lt;myVector.indexOf("Name"))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">           {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">               System.out.printf("vector [%d] = %d\n", i, Integer.parseInt(k.toString()));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">           }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">           else</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">           {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">               System.out.printf("vector [%d] = %s\n", i, k.toString());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">           }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">           i++;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Some vector functions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Object [] array = myVector.toArray(); <comment>//converting vector into array;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Iterate through array:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for(i=0;i&lt;array.length; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.printf("array[%d] = %s\n", i, array[i].toString());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVector.insertElementAt("NAME2", 3); <comment>//insert element at index 3;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVector.removeElementAt(4); <comment>// remove element at index 4;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        i=0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Using while to iterate through vector:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        while(i&lt;myVector.size())</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.printf("myVector[%d] = %s\n", i, myVector.elementAt(i).toString());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            i++;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <brown>ArrayLists</brown>
            <br/><br/>
            The <purple>ArrayList</purple> <red>class</red> extends <purple>AbstractList</purple> and 
            <red>implements</red> the <purple>List</purple> <red>interface</red>. 
            <purple>ArrayList</purple> supports <azure>dynamic</azure> <purple>arrays</purple> that can grow as needed. 
            This gives us a new <purple>collection</purple> <purple>data</purple> <purple>type</purple> that can be used exactly as 
            <purple>Vectors</purple>, <purple>Lists</purple>, <purple>Stacks</purple>, <purple>Dictionaries</purple>.
            <br/><br/>
            <purple>ArrayLists</purple> are <azure>created</azure> with an initial <purple>size</purple> of 10 elements. 
            When this <purple>size</purple> is exceeded, the <purple>collection</purple> is automatically enlarged. 
            <br/>
            When <red>objects</red> are <purple>removed</purple>, the <purple>ArrayList</purple> may be shrunk.
            <br/><br/>
            NOTE: <purple>ArrayLists</purple> cannot hold <azure>primitive</azure> <purple>data</purple> <purple>types</purple> such as <purple>int</purple>, 
            <purple>double</purple>, <red>char</red>, and long.
            <br/><br/>
            To <azure>create</azure> an <purple>ArrayList</purple> that <azure>store</azure> <azure>primitive</azure> <purple>values</purple> such as those mentioned
            above, the <purple>ArrayList</purple> must be <azure>created</azure> using the corresponding <red>object</red> 
            of these <azure>primitives</azure>.
            <br/>
            Example: <br/>
            - for <purple>int</purple> the corresponding <red>class</red> is <purple>Integer</purple>;
            <br/>
            - for <purple>double</purple> the corresponding <red>class</red> is <purple>Double</purple>;
            <br/><br/>
            These <red>classes</red> wrap the <azure>primitive</azure> <purple>types</purple> into an <red>object</red>.
            <br/><br/>
            The <red>methods</red> available for the <purple>ArrayLists</purple> are similar to those of 
            <purple>Vector</purple>, <purple>List</purple>, <purple>Stack</purple>, <purple>Dictionary</purple>. 
            <br/><br/>
            So you can call <red>methods</red> such as: <code>Add()</code>, <code>Remove()</code>, 
            <code>RemoveAt()</code>, etc.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with ArrayLists in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project20;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.ArrayList; <comment>//used for ArrayList Collection type.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project20 {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        ArrayList&lt;Integer&gt; al = new ArrayList();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        al.add(22);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        al.add(44);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        al.add(59);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Accessing the elements:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for(int i: al)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.printf("%d ", i);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
             <br/>
            <brown>Stacks</brown>
            <br/><br/>
            <purple>Stack</purple> is a <red>subclass</red> of <purple>Vector</purple> that <red>implements</red> the <azure>LIFO</azure> standard 
            (<azure>last</azure>-<azure>in</azure> <azure>first</azure>-<azure>out</azure>).
            <br/><br/>
            <purple>Stack</purple> only defines the <azure>default</azure> <red>constructor</red>, which <azure>creates</azure> an 
            empty <purple>stack</purple>.
            <br/><br/>
            <purple>Stack</purple> includes all the <red>methods</red> defined by <purple>Vector</purple>, and <azure>adds</azure> several of 
            its own.
            <br/><br/>
            A <purple>stack</purple> has the same <purple>properties</purple> as a <purple>vector</purple>, it's 
            <azure>dynamic</azure> in <purple>size</purple>, and
            can <azure>store</azure> <red>objects</red> of any <purple>type</purple>.
            <br/><br/>
            <purple>Stacks</purple> get automatically resized to fit the <red>objects</red> pushed in.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with Stack.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project16;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner; <comment>//used for Scanner class;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Stack; <comment>//used for stack collection;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project16 {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Stack newStack = new Stack(); <comment>//Stack of objects</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Stack&lt;Integer&gt; intStack; <comment>//Stack of integers;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Adding objects to the Stack:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        newStack.add(5);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        newStack.add(5);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        newStack.add(33);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        newStack.add(135);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        newStack.add(25);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Accessing elements in the Stack:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The element on top of stack is: %d\n", newStack.peek());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The element on bottom of the stack is: %d\n", newStack.firstElement());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Stacks have the same methods, fields and functionalities as vectors.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner (System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
             <br/>
            <brown>Dictionaries</brown>
            <br/><br/>

                The <purple>Dictionary</purple> <red>class</red> is an <azure>abstract</azure> <red>class</red> that 
                defines a <purple>data</purple> <purple>structure</purple> for mapping <purple>keys</purple> to <purple>values</purple>.
                <br/>
                This is useful in cases where you want to be able to access <purple>data</purple> via a particular 
                <purple>key</purple> rather than an <purple>integer</purple> index.
                <br/><br/>
                Since the <purple>Dictionary</purple> <red>class</red> is <azure>abstract</azure>, it provides only the 
                framework for a 
                <purple>key</purple>-mapped <purple>data</purple> <purple>structure</purple> rather than a specific <red>implementation</red>.
                <br/><br/>
                Given a <purple>key</purple> and <purple>value</purple>, you can <azure>store</azure> the <purple>value</purple> in a 
                <purple>Dictionary</purple> <red>object</red>. 
                Once the <purple>value</purple> is <azure>stored</azure>, you can <azure>retrieve</azure> it by using its <purple>key</purple>. 
                Thus, like a map, a <purple>dictionary</purple> can be thought of as a 
                <purple>list</purple> of <purple>key</purple>/<purple>value</purple> pairs.
                <br/>
                The <purple>Dictionary</purple> <red>class</red> is <purple>obsolete</purple>. 
                You should <red>implement</red> the Map <red>interface</red> to 
                obtain <purple>key</purple>/<purple>value</purple> storage functionality.
                <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with dictionaries:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project17;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Dictionary; <comment>//used for dictionary;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner; <comment>//used for Scanner class;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Hashtable; <comment>//used for the hashtable;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Enumeration; <comment>//used for enumeration;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project17 {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     * @param args the command line arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//It can be constructed like this also: Dictionary myDict = new Hashtable();</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Dictionary &lt;Integer, String&gt; myDict = new Hashtable(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//creating a dictionary with Integer Keys, and String Content.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myDict.put(1, "Alan Walker");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myDict.put(2, "Adam Lambert");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myDict.put(3, "Tokio Hotel");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myDict.put(4, "Deryck Whibley");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myDict.put(5, "Avril Lavigne");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Enumeration&lt;Integer&gt; MyKeys = myDict.keys();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Enumeration&lt;String&gt; MyNames = myDict.elements();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Size of Dictionary: %d\n", myDict.size());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Using for loop to access dictionary:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for(int i=0; i&lt;myDict.size(); i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.printf("Name: %s     Key: %s\n", MyNames.nextElement(), MyKeys.nextElement());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <brown>Lists</brown>
        <br/><br/>
        The <purple>List</purple> <red>interface</red> extends <purple>Collection</purple> and declares the 
        behavior of a <purple>collection</purple> that <azure>stores</azure> a <azure>sequence</azure> of elements.
        <br/><br/>
        Elements can be <azure>inserted</azure> or accessed by their position in the <purple>List</purple> 
        by using a zero-<red>based</red> index.
        <br/><br/>
        A <purple>List</purple> may contain duplicate elements.
        <br/><br/>
        In addition to the <red>methods</red> defined by <purple>Collection</purple>, the <purple>List</purple> defines 
        some of its own.
        <br/><br/>
        Several of the <purple>List</purple> <red>methods</red> will throw an <code>UnsupportedOperationException</code> 
        if the <purple>collection</purple> cannot be modified, and a <code>ClassCastException</code> is generated 
        when one <red>object</red> is incompatible with the other.
        <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with Lists/LinkedLists</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project31;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.*; <comment>//import everything in java.util; </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project31 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/**</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     * @param args the command line arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      List a1 = new ArrayList();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      <comment>//List is an interface so it cannot be instanciated, but it can be </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      <comment>//initialized with an object of type ArrayList() or LinkedList;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      a1.add("Zara");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      a1.add("Mahnaz");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      a1.add("Ayan");      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      System.out.println("ArrayList Elements:");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      System.out.print("\t" + a1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      System.out.println();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      <comment>//Creating and printing a linked list.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      List l1 = new LinkedList();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        The LinkedList class extends AbstractSequentialList and implements</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        the List interface and provides a linked-list data structure.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>      */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      l1.add("Zara");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      l1.add("Mahnaz");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      l1.add("Ayan");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      System.out.println();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      System.out.println("LinkedList Elements:");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      System.out.print("\t" + l1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      System.out.println();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      <comment>//Keep the window opened until the next button press.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></collections>
        <collection-methods>The <purple>Collection</purple> in <red>Java</red> is a framework that provides an architecture to 
            <azure>store</azure> and <azure>manipulate</azure> the group of <red>objects</red>.
            <br/><br/>
            There are many <red>methods</red> declared in the <purple>Collection</purple> <red>interface</red>:
            <br/><br/>
            <code>public boolean add(E e)</code><br/>
            It is used to <azure>insert</azure> an element in this <purple>collection</purple>.
            <br/><br/>
            <code>public boolean addAll(Collection&lt;? extends E&gt; c)</code><br/>
            It is used to <azure>insert</azure> the specified <purple>collection</purple> 
            elements in the invoking <purple>collection</purple>.
            <br/><br/>
            <code>public boolean remove(Object element)</code><br/>
            It is used to <azure>delete</azure> an element from the <purple>collection</purple>.
            <br/><br/>
            <code>public boolean removeAll(Collection&lt;?&gt; c)</code><br/>
            It is used to <azure>delete</azure> all the elements of the specified <purple>collection</purple> 
            from the invoking <purple>collection</purple>.
            <br/><br/>
            <code>default boolean removeIf(Predicate&lt;? super E&gt; filter)</code><br/>
            It is used to <azure>delete</azure> all the elements of the <purple>collection</purple> 
            that satisfy the specified predicate.
            <br/><br/>
            <code>public boolean retainAll(Collection&lt;?&gt; c)</code><br/>
            It is used to <azure>delete</azure> all the elements of invoking <purple>collection</purple> 
            except the specified <purple>collection</purple>.
            <br/><br/>
            <code>public int size()</code><br/>
            It <purple>returns</purple> the total number of elements in the <purple>collection</purple>.
            <br/><br/>
            <code>public void clear()</code><br/>
            It <purple>removes</purple> the total number of elements from the <purple>collection</purple>.
            <br/><br/>
            <code>public boolean contains(Object element)</code><br/>
            It is used to <azure>search</azure> an element.
            <br/><br/>
            <code>public boolean containsAll(Collection&lt;?&gt; c)</code><br/>
            It is used to <azure>search</azure> the specified <purple>collection</purple> in the 
            <purple>collection</purple>.
            <br/><br/>
            <code>public Iterator iterator()</code><br/>
            It <purple>returns</purple> an iterator.
            <br/><br/>
            <code>public Object[] toArray()</code><br/>
            It converts <purple>collection</purple> into <purple>array</purple>.
            <br/><br/>
            <code>public &lt;T&gt; T[] toArray(T[] a)</code><br/>
            It converts <purple>collection</purple> into <purple>array</purple>. Here, the runtime <purple>type</purple> of the 
            <purple>returned</purple> <purple>array</purple> 
            is that of the specified <purple>array</purple>.
            <br/><br/>
            <code>public boolean isEmpty()</code><br/>
            It checks if <purple>collection</purple> is empty.
            <br/><br/>
            <code>default Stream&lt;E&gt; parallelStream()</code><br/>
            It <purple>returns</purple> a possibly <azure>parallel</azure> <azure>Stream</azure> with the <purple>collection</purple> as 
            its <azure>source</azure>.
            <br/><br/>
            <code>default Stream&lt;E&gt; stream()</code><br/>
            It <purple>returns</purple> a <azure>sequential</azure> <azure>Stream</azure> with the <purple>collection</purple> as its <azure>source</azure>.
            <br/><br/>
            <code>default Spliterator&lt;E&gt; spliterator()</code><br/>
            It generates a Spliterator over the specified elements in the 
            <purple>collection</purple>.
            <br/><br/>
            <code>public boolean equals(Object element)</code>
            It <azure>matches</azure> two <purple>collections</purple>.
            <br/><br/>
            <code>public int hashCode()</code><br/>
            It <purple>returns</purple> the hash <azure>code</azure> number of the <purple>collection</purple>.
            <br/><br/></collection-methods>
        <dynamic-memory-allocation><purple>Heap</purple> <purple>space</purple> is used for the <azure>dynamic</azure> <azure>memory</azure> <azure>allocation</azure> of 
            <red>Java</red> <red>objects</red> and <red>JRE</red> (<red>Java</red> <purple>Runtime</purple> <purple>Environment</purple>) <red>classes</red> 
            at runtime. 
            <br/><br/>
            New <red>objects</red> are always <azure>created</azure> in <purple>heap</purple> <purple>space</purple>, and the 
            <purple>references</purple> to these <red>objects</red> are <azure>stored</azure> in <purple>stack</purple> <purple>memory</purple>. 
            <br/>
            These <red>objects</red> have <purple>global</purple> <purple>access</purple> and we can access them from 
            anywhere in the application.
            <br/><br/>
            <green>Dynamic memory allocation in Java:</green>
            <br/><br/>
            All <red>Java</red> <red>objects</red> are <azure>dynamically</azure> <azure>allocated</azure>. 
            The <purple>variables</purple> used in the application are <azure>stored</azure> in <purple>stack</purple> but these <purple>variables</purple> 
            only <azure>store</azure> <purple>references</purple> to <red>objects</red>. 
            <br/>
            If the <purple>variable</purple> dies the <red>object</red> still exists as 
            long as <purple>referenced</purple> by other <purple>variables</purple>.
            <br/><br/>
            This means is we always pass <red>objects</red> to other <red>functions</red> by 
            <purple>reference</purple> 
            (no copies are performed behind the scenes).
            <br/></dynamic-memory-allocation>
        <read-from-file>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of reading content from file in JAVA:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Import the File class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.File;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Import this class to handle errors</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.FileNotFoundException;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Import the Scanner class to read text files  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class ReadFile </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        try </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            File myObj = new File("filename.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Scanner myReader = new Scanner(myObj);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            while (myReader.hasNextLine()) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                String data = myReader.nextLine();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                System.out.println(data);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            myReader.close();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch (FileNotFoundException e) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("An error occurred.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            e.printStackTrace();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></read-from-file>
        <write-to-file>*General-Programming-Knowledge*
            <br/>
            <green>Writing to files in Java:</green>
            <br/><br/>
            <azure>Creating</azure> a <purple>file</purple>:
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of creating a file in Java: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Import the File class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.File;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Import the IOException class to handle errors</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.IOException;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class CreateFile </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        try </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            File myObj = new File("filename.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if (myObj.createNewFile()) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                System.out.println("File created: " + myObj.getName());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                System.out.println("File already exists.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch (IOException e) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("An error occurred.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            e.printStackTrace();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <azure>Write</azure> to a <purple>file</purple>:
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of writing content to a file in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Import the FileWriter class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.FileWriter;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Import the IOException class to handle errors</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.IOException;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class WriteToFile </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        try </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FileWriter myWriter = new FileWriter("filename.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            myWriter.write("Files in Java might be tricky, but it is fun enough!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            myWriter.close();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("Successfully wrote to the file.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch (IOException e)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("An error occurred.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            e.printStackTrace();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></write-to-file>
        <serialization>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of serialization in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project23;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.EOFException;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.File;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.FileInputStream;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.FileNotFoundException;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.FileOutputStream;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.IOException;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.ObjectInputStream;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.ObjectOutputStream;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.PrintWriter;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.ArrayList;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project23 {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/**</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     * @param args the command line arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Making main function able to throw IOException, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//so that we don't need to use try catch blocks.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) throws IOException </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating a collection of HumanClass objects:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        ArrayList&lt;HumanClass&gt; myList = new ArrayList();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myList.add(new HumanClass(22, "Adam Lambert"));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myList.add(new HumanClass(44, "Jackie Chan"));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating a file to store these objects:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        File myObjectsFile = new File ("objectFile.txt");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Serializing an object:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        try</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            FileOutputStream fo = new FileOutputStream(myObjectsFile);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            ObjectOutputStream os = new ObjectOutputStream(fo);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            for(HumanClass s:myList)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//Writing objects to a file can be made only using binary mode. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//So that file will not contain readable text</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//and cannot be altered using text editors.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                os.writeObject(s);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch(FileNotFoundException e)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.printf("File not found: %s", e);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Keep the console opened until a key is pressed.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></serialization>
        <deserialization>*General-Programming-Knowledge*
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of deserialization in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project23;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.EOFException;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.File;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.FileInputStream;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.FileNotFoundException;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.FileOutputStream;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.IOException;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.ObjectInputStream;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.ObjectOutputStream;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.PrintWriter;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.ArrayList;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project23 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/**</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     * @param args the command line arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Making main function able to throw IOException, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//so that we don't need to use try catch blocks.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) throws IOException </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Deserializing an object from the file:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        ArrayList&lt;HumanClass&gt; ObjectRead = new ArrayList();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        FileInputStream fi = new FileInputStream(myObjectsFile);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        ObjectInputStream oi = new ObjectInputStream(fi);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        try</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//the following loop will terminate when the catch block will terminate, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//and when the catch block will terminate then EOFException will be thrown.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            while(true) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//this will read until the file ends.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                HumanClass e = (HumanClass) oi.readObject();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//When it cannot read any more objects from the file </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//it will throw an EOFException that needs to be catched, and handled,</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//otherwise the program will terminate.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                ObjectRead.add(e);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch(ClassNotFoundException e)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">             System.out.printf("File not found: %s", e);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Once the file was done reading, it will throw EOFException</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch(EOFException b) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("\nDone reading the objects:\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Print the objects:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            for(HumanClass s:ObjectRead)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                System.out.printf("Name: %s, Age: %d\n", s.GetName(), s.GetAge());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Keep the console opened until a key is pressed.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></deserialization>
        <constructors>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of constructors in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Create a Main class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Main </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Create a class attribute</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int x;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Create a class constructor for the Main class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public Main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        x = 5;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Set the initial value for the class attribute x</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Main myObj = new Main(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Create an object of class Main </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//(This will call the constructor)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(myObj.x); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Print the value of x</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Outputs 5</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></constructors>
        <instantiation>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of instanciation in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">ClassName objName = new ClassName();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></instantiation>
        <destructors>*General-Programming-Knowledge*
            <br/>
            <green>Destructors in Java:</green><br/>
            <br/>
            In <red>Java</red>: <red>destructors</red> are also known as finalizers that are 
            non-deterministic. <br/>
            The <azure>allocation</azure> and deallocation of <red>objects</red> is handled by the 
            <purple>garbage</purple> <purple>collector</purple>. <br/>
            The invocation of finalizers is not guaranteed because it 
            invokes implicitly.
            <br/><br/>
            <brown>Advantages of Destructor:</brown><br/>
            
            1. It releases the resources occupied by the <red>object</red>.<br/>
            2. No explicit call is required, it is automatically invoked at the end of the 
            program execution.<br/>
            3. It does not accept any <red>parameter</red> and cannot be <red>overloaded</red>.<br/>
            
            <br/>
            <red>Java</red> <code>finalize()</code> <red>method</red> works the same as the <red>destructor</red>. 
            It is not a 
            <red>destructor</red> however, but it provides extra security.
            <br/>            
            For example: It ensures the use of 
            external resources like <azure>closing</azure> the <purple>file</purple>, etc. before shutting down the 
            program.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of destructor in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class DestructorExample  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        DestructorExample de = new DestructorExample ();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        de.finalize();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        de = null;  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.gc();  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Inside the main() method");  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    protected void finalize()  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Object is destroyed by the Garbage Collector");  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></destructors>
        <function-overloading>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example of Method overloading in Java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// By using Different Types of Arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Class 1</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Helper class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Helper {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Method with 2 integer parameters</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    static int Multiply(int a, int b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Returns product of integer numbers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return a * b;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Method 2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// With same name but with 2 double parameters</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    static double Multiply(double a, double b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Returns product of double numbers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return a * b;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Class 2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Main class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class GFG </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Calling method by passing</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// input as in arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(Helper.Multiply(2, 4));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(Helper.Multiply(5.5, 6.3));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></function-overloading>
        <operator-overloading>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Vec {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   private float x, y, z;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   public Vec(float x, float y, float z) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">       this.x = x;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">       this.y = y;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">       this.z = z;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   <comment>//Overloading the operator +</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   public Vec plus(Vec other) {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">       return new Vec(x + other.x, y + other.y, z + other.z);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></operator-overloading>
        <enums>*General-Programming-Knowledge*
            <green>Enums in Java:</green>
            <br/><br/>
            In <red>Java</red>: <purple>enums</purple> can have <red>constructors</red>, and it needs to have 
            <red>constructors</red> 
            if they are provided with <purple>values</purple>. 
            <br/><br/>
            <purple>Enums</purple> provides both <purple>string</purple> <purple>values</purple> and 
            <purple>int</purple> <purple>values</purple> in the same patch.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of enums in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project18;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public enum Directions </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Defining the fields:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    South(0), West(180), North(90), East(260);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    private final int Degrees; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// a place to store the value for each field.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//This constructor has the role of initializing </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//the above fields with their values:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    Directions(int degreesNew)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.Degrees = degreesNew;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public int GetDegrees()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return this.Degrees;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <green>Enumerations in Java:</green>
            <br/><br/>
            The <purple>Enumeration</purple> <red>interface</red> defines the <red>methods</red> by which you can 
            <purple>enumerate</purple> 
            (obtain one at a time) the elements in a <purple>collection</purple> of <red>objects</red>.
            <br/><br/>
            <purple>Enumerations</purple> must not be confused with <purple>enums</purple>.
             They are different <purple>types</purple>, different <red>objects</red>, 
            with different utility.
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of working with Enumerations in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project15;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Enumeration; <comment>//used for enumerations;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner; <comment>// used for scanner class;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Vector; <comment>//used for vectors;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project15 {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/**</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     * @param args the command line arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating an enumeration of objects;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Enumeration Days; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//enumerations cannot be initialized with an object ;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//of type enumeration because enumeration is abstract interface.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Enumeration &lt;Integer&gt; intEnumeration; <comment>//enumeration of integers;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//vector of objects</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Vector myVect = new Vector (3);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVect.add("Sunday");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVect.add("Monday");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myVect.add("Friday");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//the elements from vector gets transfered to enumeration.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Days = myVect.elements(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        while(Days.hasMoreElements())</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println(Days.nextElement());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></enums>
        <concurrent-programming>*General-Programming-Knowledge*
            <br/>
            <green>Multithreading in Java:</green>
            <br/><br/>
            In <red>Java</red>: <azure>Threads</azure> can be <azure>created</azure> by using two mechanisms : 
            <br/><br/>
            
            1. Extending the <azure>Thread</azure> <red>class</red>; <br/>
            2. <red>Implementing</red> the Runnable <red>Interface</red>;
            
            <br/><br/>
            <brown>Thread creation by extending the Thread class:</brown>
            <br/><br/>
            We <azure>create</azure> a <red>class</red> that extends the java.lang.Thread <red>class</red>. 
            This <red>class</red> <red>overrides</red> the <azure>run</azure>() <red>method</red> available in 
            the <azure>Thread</azure> <red>class</red>.
            <br/><br/>
            A <azure>thread</azure> begins its life inside <azure>run</azure>() <red>method</red>. 
            We <azure>create</azure> an <red>object</red> of our 
            new <red>class</red> and call <azure>start</azure>() <red>method</red> to <azure>start</azure> the 
            execution of a <azure>thread</azure>. 
            <azure>Start</azure>() invokes the <azure>run</azure>() <red>method</red> on the <azure>Thread</azure> <red>object</red>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of multithreading in Java </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//by extending the Thread class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class MultithreadingDemo extends Thread </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void run()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        try </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// Displaying the thread that is running</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println(</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                "Thread " + Thread.currentThread().getId()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                + " is running");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch (Exception e) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// Throwing an exception</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("Exception is caught");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Main Class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Multithread {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int n = 8; <comment>// Number of threads</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (int i = 0; i &lt; n; i++) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            MultithreadingDemo object</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                = new MultithreadingDemo();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            object.start();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <brown>Thread creation by implementing the Runnable Interface</brown>
        <br/><br/>
        We <azure>create</azure> a new <red>class</red> which <red>implements</red> java.lang.Runnable 
        <red>interface</red> and <red>override</red> <azure>run</azure>() 
        <red>method</red>. 
        <br/>
        Then we <red>instantiate</red> a <azure>Thread</azure> <red>object</red> and call 
        <azure>start</azure>() <red>method</red> on this <red>object</red>. 
        <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of multithreading in Java </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//by implementing the Runnable interface:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class MultithreadingDemo implements Runnable </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void run()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        try </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// Displaying the thread that is running</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println(</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                "Thread " + Thread.currentThread().getId()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                + " is running");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch (Exception e) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// Throwing an exception</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("Exception is caught");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Main Class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Multithread </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int n = 8; <comment>// Number of threads</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (int i = 0; i &lt; n; i++) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Thread object</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                = new Thread(new MultithreadingDemo());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            object.start();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></concurrent-programming>
        <exception-handling>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of exception handling in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of throwing custom exceptions;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project22;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.InputMismatchException;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project22 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        try</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//try block should contain the code that </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//might throw an exception:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("Enter an integer: ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int number = myscanner.nextInt();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//This code will run only if the line above doesn't </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//produce an exception.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.printf("You entered: %d\n\n", number);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Throwing a Custom Exception:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(number&gt;10||number&lt;0)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                throw new CustomExceptionOutRange();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Handle the input mismatch exception:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch(InputMismatchException e)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("You didn't entered an integer!\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Handle the custom exception:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch(CustomExceptionOutRange r)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("Your number is out of range!\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//This code gets executed anyhow.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        finally</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//the finally block is not mandatory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//It is possible to have only try and catch blocks</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("Finally block reached.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <green>Creating Custom Exceptions classes in Java:</green>
            <br/><br/>
            In order to <azure>create</azure> Custom <red>Exception</red> <red>classes</red> in <red>Java</red>, 
            you to <azure>create</azure> a <red>class</red> of 
            extends the <red>Exception</red> <red>class</red>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project22;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> * Making this class inherits from Exception class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment> */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class CustomExceptionOutRange extends Exception</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//custom code can be added here</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></exception-handling>
        <bitwise-operators>*General-Programming-Knowledge*</bitwise-operators>
        <default-parameters>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public void doSomething(String name, int age, String city = "New York") {  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  <comment>// code to perform some action  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></default-parameters>
        <interfaces>*General-Programming-Knowledge*
            <br/>
            <green>Interfaces in Java:</green>
            <br/><br/>
            An <red>interface</red> is a <purple>reference</purple> <purple>type</purple> in <red>Java</red> that 
            is similar to <red>class</red>.
            <br/><br/>
            A <red>class</red> <red>implements</red> an <red>interface</red>, 
            thereby <red>inheriting</red> the 
            <azure>abstract</azure> <red>methods</red> of the <red>interface</red>.
            <br/><br/>
            An <red>interface</red> is basically a <purple>collection</purple> of <azure>abstract</azure> <red>methods</red>. 
            <br/><br/>
            Along with the <azure>abstract</azure> <red>methods</red>, an <red>interface</red> may 
            also contain <purple>constants</purple>
            (final <purple>variables</purple>), <purple>static</purple> <purple>variables</purple>,  
            <azure>default</azure> <red>methods</red>, <purple>static</purple> <red>methods</red>, and nested <purple>types</purple>.
            <br/><br/>
            A nested <purple>type</purple> is a <purple>type</purple> defined within a <purple>type</purple> 
            such as: 
            a <red>class</red> defined within a <red>class</red> or an <red>interface</red> defined
            within an <red>interface</red>.
            <br/><br/>
            A final <purple>variable</purple> is also called a "<purple>constant</purple>". It is a <purple>variable</purple> 
            whose <purple>value</purple> cannot be
            change after it's been initialized. 
            <br/><br/>
            The <red>method</red> bodies may exist only for the <azure>default</azure> <red>methods</red> and/or 
            <purple>static</purple> <red>methods</red>.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of interface with constants, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//default and static methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public interface Electronic </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Constant variable</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    String LED = "LED";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Abstract method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int getElectricityUse();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Static method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    static boolean isEnergyEfficient(String electtronicType) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        if (electtronicType.equals(LED)) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return true;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return false;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Default method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    default void printDescription() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Electronic Description");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            A <purple>static</purple> <purple>variable</purple>  or <red>method</red> is one which is <azure>shared</azure> 
            among all the 
            <red>instances</red> of a <red>class</red> and which can be accessed directly
            from the <red>class</red> even with no <red>instances</red> by using: 
            <code>ClassName.variable;</code>
            <br/><br/>
            The <azure>default</azure> <red>methods</red> can be defined inside the <red>interface</red> by using the 
            <azure>default</azure>
            keyword. These <red>methods</red> are non-<azure>abstract</azure> <red>methods</red> meaning they have an 
            <red>implementation</red>.
            <br/><br/>
            The concept of <azure>default</azure> <red>method</red> is used to define a <red>method</red> with <azure>default</azure>
            <red>implementation</red>. 
            The <red>class</red> <red>implementing</red> the <red>interface</red> can <red>override</red> the 
            <azure>default</azure> <red>method</red> also, in order
            to provide a more specific <red>implementation</red> for the <red>method</red>.
            <br/><br/>
            Defining an <red>interface</red> is similar to defining a <red>class</red>. 
            But a <red>class</red> 
            describes the <purple>attributes</purple> and behaviors of an <red>object</red>,
            whereas an <red>interface</red> contains the declaration of the behaviors 
            that a <red>class</red> needs to <red>implement</red>.
            <br/><br/>
            Just like <red>classes</red>, there can be only one <red>interface</red> in a .<red>java</red> <purple>file</purple>. 
            <br/><br/>
            <red>Java</red> does <azure>not</azure> <azure>allow</azure> that multiple <red>interfaces</red> and/or <red>classes</red> be 
            defined in the same <purple>file</purple>, unless they are nested.
            <br/><br/>
            The only way to have multiple <red>classes</red>/<red>interfaces</red> defined in 
            one <purple>file</purple> is by having them defined as nested <purple>types</purple>.
            <br/><br/>
            Once that a <red>class</red> <red>implements</red> an <red>interface</red> that <red>class</red> is 
            obliged to 
            provide <red>implementations</red> for all the <azure>abstract</azure> <red>methods</red> within 
            the <red>interface</red>:
            <br/><br/>
            <green>
            Properties of Interfaces:
            </green>
            <br/><br/>
            An <red>interface</red> is implicitly <azure>abstract</azure>. You do not need to use the <azure>abstract</azure> 
            keyword while declaring an <red>interface</red>.
            <br/><br/>
            Each <red>method</red> within the <red>interface</red> is implicitly <azure>abstract</azure>, so the 
            <azure>abstract</azure> keyword is also not needed for declaring the <red>methods</red>.
            <br/><br/>
            The <red>methods</red> declared within the <red>interface</red> are implicitly <purple>public</purple>.
            <br/><br/>
            <green>
            Similarities between interfaces and classes:
            </green>
            <br/><br/>
            An <red>interface</red> can contain any number of <red>methods</red>.
            <br/><br/>
            An <red>interface</red> is written in a <purple>file</purple> with a .<red>java</red> extension, with the name of 
            the 
            <red>interface</red> <azure>matching</azure> the name of the <purple>file</purple>.
            <br/><br/>
            The bytecode of an <red>interface</red> appears in a .<red>class</red> <purple>file</purple>.
            <br/><br/>
            The <red>interfaces</red> appear in packages, and their corresponding bytecode 
            <purple>file</purple> must be in a directory <purple>structure</purple> that <azure>matches</azure> the package name.
            <br/><br/>
            <green>
            Differences between interfaces and classes:
            </green>
            <br/><br/>
            You cannot <red>instantiate</red> an <red>interface</red>.
            <br/><br/>
            An <red>interface</red> does not contain any <red>constructors</red>.
            <br/><br/>
            All of the <red>methods</red> in an <red>interface</red> are <azure>abstract</azure>.
            <br/><br/>
            An <red>interface</red> cannot contain <red>instance</red> <purple>fields</purple>. 
            The only <purple>fields</purple> that can appear in an <red>interface</red> must be declared 
            both <purple>static</purple> and final.
            <br/><br/>
            An <red>interface</red> is not extended by a <red>class</red>, it is <red>implemented</red> by a 
            <red>class</red>.
            <br/><br/>
            An <red>interface</red> can extend multiple other <red>interfaces</red>.
            <br/><br/>
            Through <red>implements</red> the <red>interfaces</red> exhibit the same characteristics 
            to the <red>classes</red> which are <red>implementing</red> them.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of defining an interface in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of nested interfaces</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project13;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public interface ToDoListInterface </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{ </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//this is the outer interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public interface Numbers</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//this is the inner interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int findMax(int a, int b, int c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    void PrintMessage(String message);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of a class implementing an interface in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILE: Project13.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project13;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//This class is obliged to provide implementations for: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//ToDoListInterface and ToDoListInterface.Numbers</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project13 implements ToDoListInterface, ToDoListInterface.Numbers </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     * @param args the command line arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Creating an object of the class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Project13 InstanceOfClass = new Project13();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Calling functions inherited from interface:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        InstanceOfClass.PrintMessage("This is a function that came from an interface!");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Max number is: %d\n", InstanceOfClass.findMax(12, 33, 21));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner (System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//If Project13 class will not provide implementations for these methods</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//the program will not compile.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void PrintMessage(String Message){</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(Message);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public int findMax(int a, int b, int c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Using ternary operator:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return a&gt;b? a&gt;c? a : c : b&gt;c? b : c;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></interfaces>
        <random-generators>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of generating random numbers in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project37;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Random;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project37 {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>/**</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     * @param args the command line arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>     */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Thinking of a number between 0 and 100:\n\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Create a random generator</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Random rand = new Random();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Generate a random number between 0-100</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int Number = rand.nextInt(101);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//This variable will store user input;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int choice = 101;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//this will count how many times </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//the user guessed wrong</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int NrOfTries=0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Enter the loop by default:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        while(Number!=choice)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.printf("What is the number?\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            do</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                System.out.printf("Number = ");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                choice = myscanner.nextInt();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//get input from the user;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }while(choice&lt;0 || choice&gt;100);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//Compare the user input with the random number;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if(Number==choice)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                System.out.printf("Congratulations, the number was: %d\n", Number);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            else if(Number&lt;choice)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">               System.out.printf("Your number is too high, try a lower one!\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            else</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                System.out.printf("Your number is too low, try a higher one!\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            NrOfTries++;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("You required %d tries to guess the number!\n", NrOfTries);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Keep the console opened.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></random-generators>
        <command-line-arguments>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Working with command-line arguments in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package Args_main;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Args_main</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//args will store the command prompt arguments - if any</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    { </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Supposingly we have some arguments in args[]</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int [] lenNrs = Args_main.NumberOrNo(args); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//convert them to numbers or get their string length</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Sorting(lenNrs, args); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//sort the numbers or lengths</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Sorting by length or value: \n\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (int i=0; i&lt;args.length; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//print results</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.printf("%d &lt;--&gt; %s\n", lenNrs[i], args[i]); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//cursor to the next line.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//We shall return an array</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static int[] NumberOrNo(String[] arguments) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Build an array of the same length as arguments array</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int[] someArray = new int[arguments.length]; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (int i=0; i&lt;arguments.length; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            try</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//try to convert to int</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                someArray[i] = Integer.parseInt(arguments[i]); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            catch (Exception e)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//if not successful then we are having a letter string / word</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                someArray[i] = arguments[i].length(); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//take out it's length</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return someArray;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//no need to return anything, lists/arrays are always passed by reference</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void Sorting (int[] nrsOrNo, String[] arguments) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Do the sorting</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (int i=0; i &lt; nrsOrNo.length; i++)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            for (int j=0; j&lt;nrsOrNo.length; j++ )</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                if (nrsOrNo[j] &lt; nrsOrNo[i])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    int temp = nrsOrNo[i];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    nrsOrNo[i] = nrsOrNo[j];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    nrsOrNo[j] = temp;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    String argTmp = arguments[i];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    arguments[i] = arguments [j];</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    arguments [j] = argTmp;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></command-line-arguments>
        <ternary-operator>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using ternary operator in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.io.*;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Ternary </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// variable declaration</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int n1 = 5, n2 = 10, max;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("First num: " + n1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Second num: " + n2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Largest among n1 and n2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        max = (n1 &gt; n2) ? n1 : n2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Print the largest number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Maximum is = " + max);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></ternary-operator>
        <modular-programming>*General-Programming-Knowledge*
            <green>Modular Programming in Java:</green>
            <br/><br/>
            A <red>module</red> in <red>Java</red> is typically just a .jar <purple>file</purple> that has a <red>module</red>-info.java 
            <purple>file</purple> at the root. 
            <br/><br/>
            A <red>module</red> is a directory containing other directories 
            called packages, 
            where every package contains <red>classes</red> <azure>stored</azure> in individual 
            .<red>java</red> <purple>files</purple>.
            <br/><br/>
            <red>Java</red> <red>modules</red> help <red>encapsulating</red> packages and managing dependencies:<br/>
            - a <red>class</red> is a container of <purple>fields</purple> and <red>methods</red>;<br/>
            - a package is a container of <red>classes</red> and <red>interfaces</red>;<br/>
            - a <red>module</red> is a container of packages;<br/>
            <br/>
            In <red>Java</red> a <red>module</red> is somehow different than in <red>C</red>/<red>C++</red>.
            <br/>            
            Since <red>Java</red> only <azure>allow</azure> one <red>class</red>/<red>interface</red>
            be defined per <purple>file</purple>, a <red>module</red> is more like a <purple>collection</purple> of <purple>files</purple>, 
            than a pair of 2 <purple>files</purple> (.<red>c</red> and .h) as it is in <red>C</red>/<red>C++</red>.
            <br/><br/>
            In <red>Java</red> there cannot be any <red>functions</red>, <purple>variable</purple> declarations or
            <red>implementations</red> of any sort, outside
            the <red>class</red>. <br/>
            Everything has to be <red>encapsulated</red> within the <red>class</red>.
            <br/><br/>
            <brown>Example of modular project in Java:</brown>
            <br/><br/>
            1. The <red>module</red> exporting the <red>implementation</red>:
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of modular project in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILEPATH: Implementation_Module/classes/module-info.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">module Implementation_Module </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//this module exports the package:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    exports Implementation_Package;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILEPATH: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Implementation_Module/classes/Implementation_Package/Implementation_Class.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//A package is like a folder/directory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package Implementation_Package;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//This package contains the class with the implementation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Implementation_Class </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void PrintMessage() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//This class contains the implementation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("Hello from Implementation_Module");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            2. The <red>module</red> importing the <red>implementation</red>:
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILEPATH: Main_Module/classes/module-info.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">module Main_Module </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//this module requires Implementation_Module:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    requires Implementation_Module;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//FILEPATH: Main_Module/classes/Main_Package/Main_Class.java</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//A package is like a folder/directory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package Main_Package;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Main_Package requires the implementation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import Implementation_Package.Implementation_Class;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Implementation is in this package.class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Main_Class </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Accessing the implementation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Implementation_Class obj = new Implementation_Class();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        obj.PrintMessage();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>/*</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        Hello from Implementation_Module</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>        */</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></modular-programming>
        <string-methods>The <purple>String</purple> <red>class</red> in <red>Java</red> has a <purple>set</purple> of built-in <red>methods</red> that 
            can used on <purple>strings</purple>:
            <br/><br/>
            <code>charAt()</code><br/>
            <purple>Returns</purple> the <purple>character</purple> at the specified index (position).
            <br/><br/>
            <code>compareTo()</code><br/>
            <azure>Compares</azure> two <purple>strings</purple> lexicographically.
            <br/><br/>
            <code>compareToIgnoreCase()</code><br/>
            <azure>Compares</azure> two <purple>strings</purple> lexicographically, ignoring case differences.
            <br/><br/>
            <code>concat()</code><br/>
            <azure>Appends</azure> a <purple>string</purple> to the end of another <purple>string</purple>.
            <br/><br/>
            <code>contains()</code><br/>
            Checks whether a <purple>string</purple> contains a <azure>sequence</azure> of <purple>characters</purple>.
            <br/><br/>
            <code>contentEquals()</code><br/>
            Checks whether a <purple>string</purple> contains the exact same <azure>sequence</azure> of <purple>characters</purple> of the specified 
            CharSequence or StringBuffer.
            <br/><br/>
            <code>copyValueOf()</code><br/>
            <purple>Returns</purple> a <purple>String</purple> that represents the <purple>characters</purple> of the <purple>character</purple> <purple>array</purple>.
            <br/><br/>
            <code>endsWith()</code><br/>
            Checks whether a <purple>string</purple> ends with the specified character(s).
            <br/><br/>
            <code>equals()</code><br/>
            <azure>Compares</azure> two <purple>strings</purple>. <purple>Returns</purple> <purple>true</purple> if the <purple>strings</purple> are equal, and <purple>false</purple> if not.
            <br/><br/>
            <code>equalsIgnoreCase()</code><br/>
            <azure>Compares</azure> two <purple>strings</purple>, ignoring case considerations.
            <br/><br/>
            <code>format()</code><br/>
            <purple>Returns</purple> a formatted <purple>string</purple> using the specified locale, format <purple>string</purple>, and <red>arguments</red>.
            <br/><br/>
            <code>indexOf()</code><br/>
            <purple>Returns</purple> the position of the first found occurrence of specified <purple>characters</purple> in a <purple>string</purple>.
            <br/><br/>
            <code>isEmpty()</code><br/>
            Checks whether a <purple>string</purple> is empty or not.
            <br/><br/>
            <code>join()</code><br/>
            Joins one or more <purple>strings</purple> with a specified separator.
            <br/><br/>
            <code>lastIndexOf()</code><br/>
            <purple>Returns</purple> the position of the last found occurrence of specified <purple>characters</purple> in a <purple>string</purple>.
            <br/><br/>
            <code>length()</code><br/>
            <purple>Returns</purple> the length of a specified <purple>string</purple>.
            <br/><br/>
            <code>matches()</code><br/>
            <azure>Searches</azure> a <purple>string</purple> for a <azure>match</azure> against a <azure>regular</azure> <azure>expression</azure>, and <purple>returns</purple> the <azure>matches</azure>.
            <br/><br/>
            <code>replace()</code><br/>
            <azure>Searches</azure> a <purple>string</purple> for a specified <purple>value</purple>, and <purple>returns</purple> a new <purple>string</purple> where the 
            specified <purple>values</purple> are <azure>replaced</azure>.
            <br/><br/>
            <code>replaceAll()</code><br/>
            <azure>Replaces</azure> each substring of this <purple>string</purple> that <azure>matches</azure> the given <azure>regular</azure> <azure>expression</azure> 
            with the given replacement.
            <br/><br/>
            <code>replaceFirst()</code><br/>
            <azure>Replaces</azure> the first occurrence of a substring that <azure>matches</azure> the given <azure>regular</azure> <azure>expression</azure> 
            with the given replacement.
            <br/><br/>
            <code>split()</code><br/>
            Splits a <purple>string</purple> into an <purple>array</purple> of substrings.
            <br/><br/>
            <code>startsWith()</code><br/>
            Checks whether a <purple>string</purple> <azure>starts</azure> with specified <purple>characters</purple>.
            <br/><br/>
            <code>subSequence()</code><br/>
            <purple>Returns</purple> a new <purple>character</purple> <azure>sequence</azure> that is a subsequence of this <azure>sequence</azure>.
            <br/><br/>
            <code>substring()</code><br/>
            <purple>Returns</purple> a new <purple>string</purple> which is the substring of a specified <purple>string</purple>.
            <br/><br/>
            <code>toCharArray()</code><br/>
            Converts this <purple>string</purple> to a new <purple>character</purple> <purple>array</purple>.
            <br/><br/>
            <code>toLowerCase()</code><br/>
            Converts a <purple>string</purple> to lower case letters.
            <br/><br/>
            <code>toString()</code><br/>
            <purple>Returns</purple> the <purple>value</purple> of a <purple>String</purple> <red>object</red>.
            <br/><br/>
            <code>toUpperCase()</code><br/>
            Converts a <purple>string</purple> to upper case letters.
            <br/><br/>
            <code>trim()</code><br/>
            <purple>Removes</purple> whitespace from both ends of a <purple>string</purple>.
            <br/><br/>
            <code>valueOf()</code><br/>
            <purple>Returns</purple> the <purple>string</purple> representation of the specified <purple>value</purple>.</string-methods>
        <datatype-conversions>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of datatype conversion in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package project3;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.util.Scanner;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Project3 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main (String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        String ValueOne = "1";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        String ValueTwo = "2";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("ValueOne + ValueTwo = %s\n", ValueOne+ValueTwo);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Converting Strings to int:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int a = Integer.parseInt(ValueOne);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int b = Integer.parseInt(ValueTwo);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("a + b = %d\n", a+b);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        float val1 = 22.1f, val2 = 25.4f;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//TypeCasting:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        a = (int)val1; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//a gets the integer part of the floating number val1;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        b = (int)val2; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//b gets the integer part of the floating number val2;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The value of a is: %d\nThe value of b is: %d\n", a, b);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//The implicit casting is the casting made automatically by the compiler:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        val2 = 15; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//so in this case the integer value 15 will be casted into a floating  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//point value 15.00, this is done automatically by the compiler, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//so it's implicit casting.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Explicitly casting is the casting that is done by the programmer, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//because it cannot be done, automatically by the compiler.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        a = (int) 22.5; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//in this case 22.5 will became 22, only the integer part of </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//the floating value will get stored into int a;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//Interesting fact:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        val2 = 20 / 15; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//integer / integer will result an integer.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The value of division is: %f\n", val2); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//this will output the value: 1, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//even if 20/15 is 1.33333333, and even if it is stored in a float.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//for the result of the operation to be a float at least one </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//of those operands need to be casted to float:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        val2 = 20 / (1.0f * 15); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//solution one for casting (1.0 * 15 will be converted to </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//float implicitly).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The value of division after casting is: %f\n", val2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        val2 = 25 / (float) a; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//a is explicitly casted to float, so int divided by float will </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//result in float.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("The value after explicitly casting is: %f\n", val2);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.printf("Press any key to terminate!\n");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Scanner myscanner = new Scanner(System.in);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        myscanner.next();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></datatype-conversions>
        <decorators>*General-Programming-Knowledge*
            <br/>
            <green>Decorators in Java:</green>
            <br/><br/>
            In order to <red>implement</red> a <purple>decorator</purple> in <red>Java</red>, the following steps
            needs to be followed:
            <br/><br/>
            <indigo>1. Component Interface:</indigo>
            <br/><br/>
            Defining the <red>interface</red> or the <azure>abstract</azure> <red>class</red> 
            declaring the <red>methods</red> that will be 
            <red>implemented</red>. 
            <br/>
            In this case <red>Car</red> will be the component <red>interface</red>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//the interface defining the methods </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//that will be implemented.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package com.journaldev.design.decorator;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public interface Car </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void assemble();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <indigo>2. Component Implementation:</indigo>
        <br/><br/>
        The basic <red>implementation</red> of the component <red>interface</red>. 
        We can have BasicCar <red>class</red> as our component <red>implementation</red>.
        <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//the basic implementation of </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//the Car interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package com.journaldev.design.decorator;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class BasicCar implements Car </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    @Override</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void assemble() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.print("Basic Car.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <indigo>3. Decorator:</indigo> 
        <br/><br/>
        Defining the <purple>decorator</purple> <red>class</red> that <red>implements</red> the component 
        <red>interface</red>. <br/>
        The component <purple>variable</purple> needs to be accessible to the <red>child</red> <purple>decorator</purple> <red>classes</red>, 
        so it should be defined as <purple>protected</purple> <purple>variable</purple> .
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//the decorator class implementing</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Car interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package com.journaldev.design.decorator;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class CarDecorator implements Car </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    protected Car car;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public CarDecorator(Car c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.car=c;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    @Override</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void assemble() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        this.car.assemble();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <indigo>4. Concrete Decorators:</indigo>
        <br/><br/>
        Extending the <red>base</red> <purple>decorator</purple> functionality and modifying the 
        component behavior accordingly. We can have <red>concrete</red> <purple>decorator</purple> <red>classes</red> 
        as LuxuryCar and SportsCar.
        <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//a second decorator extending the</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//functionality of the first decorator</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package com.journaldev.design.decorator;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class SportsCar extends CarDecorator </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public SportsCar(Car c) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        super(c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    @Override</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void assemble()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        super.assemble();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.print(" Adding features of Sports Car.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//using the decorator to modify the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//component behaviour</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">package com.journaldev.design.decorator;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class LuxuryCar extends CarDecorator </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public LuxuryCar(Car c) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        super(c);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    @Override</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void assemble()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        super.assemble();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.print(" Adding features of Luxury Car.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></decorators>
        <operators>*General-Programming-Knowledge*</operators>
        <pre-post-incrementation>*General-Programming-Knowledge*</pre-post-incrementation>
        <recursion>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of using recursion in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Main </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int result = sum(10);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(result);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//Use recursion to add all numbers up to 10:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static int sum(int k) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        if (k &gt; 0) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return k + sum(k - 1);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></recursion>
        <reflection>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of reflection in Java:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.lang.Class;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import java.lang.reflect.*;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Animal {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//put this class in different Dog.java file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">public class Dog extends Animal </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public void display() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println("I am a dog.");</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//put this in Main.java file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Main </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    public static void main(String[] args) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        try </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// create an object of Dog</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Dog d1 = new Dog();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// create an object of Class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>// using getClass()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Class obj = d1.getClass();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//get name of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            String name = obj.getName();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("Name: " + name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//get the access modifier of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            int modifier = obj.getModifiers();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//convert the access modifier to string</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            String mod = Modifier.toString(modifier);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("Modifier: " + mod);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//get the superclass of Dog</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            Class superClass = obj.getSuperclass();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            System.out.println("Superclass: " + superClass.getName());</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        catch (Exception e) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            e.printStackTrace();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></reflection>
        <abstract-classes>*General-Programming-Knowledge*
            <br/>
            <green>Abstract classes in Java:</green>
            <br/><br/>
            In <red>Java</red> the <red>pure</red> <red>virtual</red> <red>functions</red>/<red>methods</red> are called <azure>abstract</azure> 
            <red>functions</red>/<red>methods</red>
            due to the keyword <code>abstract</code> used for their definition.
            <br/><br/>
            <brown>
            Important rules for abstract methods/classes in Java:
            </brown>
            <br/><br/>
            
            Any <red>class</red> that contains one or more <azure>abstract</azure> <red>methods</red>
            must also be declared <azure>abstract</azure>.<br/>
            If a <red>class</red> contains an <azure>abstract</azure> <red>method</red> it needs to be 
            <azure>abstract</azure> and vice versa is not <purple>true</purple>.<br/>
            If a non-<azure>abstract</azure> <red>class</red> extends an <azure>abstract</azure> <red>class</red>, then the 
            <red>class</red> must <red>implement</red> all the <azure>abstract</azure> <red>methods</red> of the <azure>abstract</azure> 
            <red>class</red> else the <red>concrete</red> <red>class</red> has to be declared as 
            <azure>abstract</azure> as well.<br/><br/>
            
            The following combinations of modifiers used on <azure>abstract</azure> <red>methods</red> 
            declaration are invalid: <br/>
            <code>final</code><br/>
            <code>abstract native</code><br/>
            <code>abstract synchronized</code><br/>
            <code>abstract static</code><br/>
            <code>abstract private</code><br/>
            <code>abstract strictfp</code>
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of abstract class definition:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">abstract class Shape </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    int color;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// An abstract function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    abstract void draw();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of abstract class definition</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//and implementation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Abstract class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">abstract class Sunstar </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    abstract void printInfo();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Abstraction performed using extends</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Employee extends Sunstar </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    void printInfo()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        String name = "avinash";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        int age = 21;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        float salary = 222.2F;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(name);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(age);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        System.out.println(salary);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstract-classes>
        <optional-parameters>*General-Programming-Knowledge*</optional-parameters>
    </manifest>
    
    <manifest>
        <name>Python</name>
        <description><red>Python</red> is a <azure>high</azure>-<azure>level</azure>, general-purpose <red>programming</red> <red>language</red>. 
            Its design 
            philosophy emphasizes <azure>code</azure> <azure>readability</azure> with the use of 
            significant indentation.
            <br/><br/>

            <red>Python</red> is <azure>dynamically</azure> <purple>typed</purple> and <purple>garbage</purple>-<purple>collected</purple>. 
            It supports multiple 
            <red>programming</red> paradigms, including <purple>structured</purple> 
            (particularly <red>procedural</red>), 
            <red>object</red>-<red>oriented</red> and <red>functional</red> <red>programming</red>. 
            It is often described as a 
            "batteries included" <red>language</red> due to its comprehensive standard <purple>library</purple>.</description>
        <oop>*General-Programming-Knowledge*
            <green>Object Oriented Programming in Python:</green>
            <br/><br/>
            <red>Python</red> uses the self keyword to refer to 
            <red>instance</red> <purple>variables</purple>.
            <br/><br/>
            In <red>Python</red> the <purple>variables</purple>/<purple>fields</purple> declared within a <red>class</red> but outside of 
            any methodred
            will become <red>class</red> <purple>variables</purple>/<purple>fields</purple> and will be <azure>shared</azure> amongst all <red>instances</red>.
            The <purple>variables</purple>/<purple>fields</purple>
            declared within the <red>constructor</red> will become
            <red>instance</red> <purple>variables</purple>/<purple>fields</purple>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of class definition in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Creating a class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Employee:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#This works like documentation of the class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    'Common base class for all employees' </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#This member is a class variable whose value </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#is shared among all instances of a this class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    empCount = 0 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#this is similar to a static variable</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Creating a constructor for the class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self, name, salary):    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#the name of the constructor is </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#always the same: "__init__"</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#Here is the place where the members of the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#class gets created and initialized.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.name = name</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.salary = salary</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Employee.empCount += 1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#The first parameter of any function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#in the class is always "self"</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def displayCount(self):  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#That means that the function will display </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#information about that instance that calls it.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Total Employee {0}" .format(Employee.empCount))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def displayEmployee(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Name : {0}, Salary: {1}" .format(self.name,self.salary))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Implementing a destructor for the class.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __del__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#This code will be executed when calling 'del instance'</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        class_name = self.__class__.__name__</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Employee destroyed")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Creating the instances:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">"This would create first object of Employee class"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">emp1 = Employee("Zara", 2000)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">"This would create second object of Employee class"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">emp2 = Employee("Manni", 5000)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Calling the functions;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">emp1.displayEmployee()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">emp2.displayEmployee()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">emp1.displayCount()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Employee.displayCount(emp2) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#This can work like this as well. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#But it needs to be specified an instance</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Employee.displayEmployee(emp1)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Instead of using the normal statements to access  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#attributes, you can use the following functions</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#similar to getters and setters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">hasattr(emp1, 'name')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Returns true if 'name' attribute exists</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">getattr(emp1, 'name')    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Returns value of 'name' attribute</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">setattr(emp1, 'name', "Mark") </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Set attribute 'name' at 8</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">delattr(emp1, 'name')    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># Delete attribute 'name'</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#calling this method will now throw an exception</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#emp1.displayEmployee()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#as emp1 has no name attribute anymore.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Accesing build-in class attributes:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("Employee.__doc__: {0}" .format(Employee.__doc__))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#__doc__ is the class documentation string or none, if undefined.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("Employee.__name__: {0}" .format( Employee.__name__))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#__name__ is the class name</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("Employee.__module__: {0}" .format( Employee.__module__))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#__module__ is the module name in which the class is defined.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>87  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>88  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("Employee.__bases__: {0}" .format( Employee.__bases__))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>89  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#__bases__ a possibly empty tuple containing the base classes</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>90  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#in the order of their occurrence in the base class list.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>91  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>92  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("Employee.__dict__: {0}" .format( Employee.__dict__))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>93  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#__dict__ is a dictionary containing the class's namespace.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>94  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>95  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>96  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">del emp1 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>97  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this will delete the instance callded emp1.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>98  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>99  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">emp2.displayEmployee()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>100 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>101 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#emp1.displayEmployee()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>102 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#using emp1 will throw an exception</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>103 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#as it doesn't exist anymore</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>104 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>105 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>106 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this statement will keep the command prompt open </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>107 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#until the next button press:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>108 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>        
            
            <red>Python</red> <azure>deletes</azure> unneeded <red>objects</red> (built-in <purple>types</purple> or 
            <red>class</red> <red>instances</red>) automatically to free the <azure>memory</azure> space.
            <br/><br/>
            <red>Python's</red> <purple>garbage</purple> <purple>collector</purple> <azure>runs</azure> during program execution 
            and is triggered when an <red>object's</red> <purple>reference</purple> <azure>count</azure> reaches zero. 
            An <red>object's</red> <purple>reference</purple> <azure>count</azure> changes as the number of aliases 
            that <purple>point</purple> to it changes.
            <br/><br/>
            You normally will not notice when the <purple>garbage</purple> <purple>collector</purple> 
            destroys an orphaned <red>instance</red> and reclaims its space.
            <br/><br/>
            A <red>class</red> can <red>implement</red> the special <red>method</red> <code>__del__()</code>, 
            called a <red>destructor</red>, that is invoked when the 
            <red>instance</red> is about to be destroyed.
            <br/><br/>
            <green>Built-In Class Attributes:</green>
            <br/><br/>
            These built-in <purple>attributes</purple> can be accessed using dot <purple>operator</purple>(<code>.</code>) just 
            like any other <red>class</red> <purple>attribute</purple>.
            <br/><br/>
            <brown>The atttributes used in the example above are:</brown>
            <br/><br/>
            <code>__dict__</code> 
            The <purple>attribute</purple> contains a <purple>dictionary</purple> containing the <red>class's</red> <purple>namespace</purple>.
            <br/><br/>
            <code>__doc__</code>   
            The <purple>attribute</purple> contains the <red>class</red> documentation <purple>string</purple> or none, if undefined.
            <br/><br/>
            <code>__name__</code>  
            The <purple>attribute</purple> contains the <red>class</red> name.
            <br/><br/>
            <code>__bases__</code>  
            The <purple>attribute</purple> contains a possibly empty <purple>tuple</purple> containing the <red>base</red> <red>classes</red>, 
            in the order of their occurrence in the <red>base</red> <red>class</red> <purple>list</purple>.
            <br/><br/>
            <code>__module__</code>  
            The <purple>attribute</purple> contains the name of the <red>module</red> in which 
            the <red>class</red> is defined. 
            If the <red>module</red> is the one that is currently running then the <red>module</red> name will 
            be <code>__main__</code>.
            <br/><br/>
            This is used for <red>modular</red> <red>programming</red>:
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Check whether the python script is ran standalone</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//or was imported from a different file.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if __name__ == "__main__": </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print ("Executed when invoked directly")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">else: </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print ("Executed when imported")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></oop>
        <encapsulation>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of encapsulation in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Person:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Static fields are declared here</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    name = "name"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    __age = 0 <comment>#this is a public field</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    width = 0 <comment>#this is a private</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#static field can become non-static field for a particular instance </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#at a particular time when specified</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#This is the constructor: Only one constructor </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#function is allowed in Python.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#Function overriding is forbidden.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.width = 104</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#Non-Static field get declared in the constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Encapsulation getters and setters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Setters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def setName(self, Name): <comment># this is a setter</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.name = Name</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def setAge(self, Age):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.__age = Age</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Getters:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def getAge(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return self.__age</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Employee(Person):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        super().__init__()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.name = "Employee"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Creating a class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">person = Person ()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#seting the field of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">person.setName("Alin Popescu")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Accesing the public field of the class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (person.name)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#setting the value of private field</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">person.setAge(22)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#getting the value of a private field</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(person.getAge())</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#accessing field modified by the constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(person.width)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">emp = Employee()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(emp.name)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress ENTER to exit.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></encapsulation>
        <polymorphism>*General-Programming-Knowledge*
            <br/><br/>
            <green>Polymorphism in Python:</green>
            <br/><br/>
            <red>Polymorphism</red> with built-in <red>functions</red>:
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of polymorphism in Python 3</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#using built-in functions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># len() being used for a string</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(len("geeks"))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># len() being used for a list</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(len([10, 20, 30]))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <red>Polymorphism</red> with user-defined <red>functions</red>:
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of polymorphism in Python 3</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#using user-defined functions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def add(x, y, z = 0): </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return x + y+z</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(add(2, 3))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(add(2, 3, 4))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <red>Polymorphism</red> with <red>class</red> <red>methods</red>:
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of polymorphism in Python 3</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#using class methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class India():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def capital(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("New Delhi is the capital of India.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def language(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Hindi is the most widely spoken language of India.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def type(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("India is a developing country.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class USA():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def capital(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Washington, D.C. is the capital of USA.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def language(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("English is the primary language of USA.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def type(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("USA is a developed country.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">obj_ind = India()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">obj_usa = USA()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for country in (obj_ind, obj_usa):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    country.capital()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    country.language()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    country.type()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></polymorphism>
        <inheritance>*General-Programming-Knowledge*
            <br/>
            <green>Inheritance in Python:</green>
            <br/><br/>
            Instead of <azure>starting</azure> from scratch, you can <azure>create</azure> a <red>class</red> by <azure>deriving</azure> 
            it from a preexisting <red>class</red> by <purple>listing</purple> the <red>parent</red> <red>class</red>
            between <code>()</code> parentheses, after the <red>class</red> name.
            <br/><br/>
            By <red>inheritance</red>: the <red>child</red> <red>class</red> <red>inherits</red> the <purple>attributes</purple> of 
            its <red>parent</red> <red>class</red>, 
            and those <purple>attributes</purple> can be used as if they were defined in the <red>child</red> <red>class</red>. 
            <br/><br/>
            A <red>child</red> <red>class</red> can also <red>override</red> <purple>data</purple> <purple>members</purple> and <red>methods</red> from the 
            <red>parent</red>.
            <br/><br/>
            In <red>Python</red> a <red>child</red> <red>class</red> is often refered to as <red>subclass</red> whereas a 
            <red>parent</red> <red>class</red>
            is refered to as superclass.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of inheritance in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Defining a parent class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Parent:        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Variables declared here will be </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    shared through all the instances</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Creating a public member</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    parentAttr = 100 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#This is a public member which could </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#be accessed from anywhere.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Creating hidden (private) member:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   __secretCount = 0 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#this member is only visible for this class. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#So child classes won't be able to access or inherit it.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#To create hidden members (private members), </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#you just need to put __ as prefix.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Private members are only visible inside the class, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#and can be accessed only by class instances.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#It's not inheritable</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Defining a constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#Members declared here will be </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#individually created for each instance:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Calling parent constructor")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#Creating protected member(variable):</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self._protectedVar = 2 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#protected variables can be accessed by parent class </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#and child class, they are not public.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#Creating hidden (private) member:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.__privateVar = 1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def parentMethod(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Calling parent method")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Defining a setter:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def setAttr(self, attr):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Parent.parentAttr = attr</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Defining a getter:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def getAttr(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Parent attribute : {0}" .format(Parent.parentAttr))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def myMethod(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Calling parent method")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def printPrivate(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Private Variable: {0}" .format(self.__privateVar))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Defining a child class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Child(Parent) means Child inherits Parent</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Child(Parent): </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Defining a contructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Calling child constructor")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#Calling parent constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        Parent.__init__(self)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def childMethod(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Calling child method")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#This is an overrided function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def myMethod(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("Calling the overrided method.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c = Child()          <comment># creating an instance of Child class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c.childMethod()      <comment># child calls its method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c.parentMethod()     <comment># calls parent's method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c.setAttr(200)       <comment># again call parent's method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c.getAttr()          <comment># again call parent's method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#You can always override your parent class methods. One reason </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#for overriding parent's methods is because you may want</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#special or different functionality in your subclass.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c.myMethod()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>87  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Trying to print a private members:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>88  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#print("Private value: {0}" .format(c.__secretCount)) </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>89  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#will result in compilation error, child has no member named like that.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>90  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>91  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#print("Private value: {0}" .format(Parent.__secretCount))</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>92  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#will result incompilation error, parent has no member like that.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>93  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>94  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The public member: {0}" .format(Parent.parentAttr))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>95  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>96  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Trying to print protected members:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>97  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#print("The protected member: {0}" .format(Parent._protectedVar)) </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>98  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#will result in compilation error, parent class has no member name like that.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>99  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>100 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The protected member: {0}" .format(c._protectedVar))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>101 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">p1 = Parent()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>102 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>103 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Accesing the private variable can only be made </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>104 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#with public accessors (Getters and Setters)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>105 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">p1.printPrivate()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>106 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>107 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#print("The private member: {0}" .format(p1.__privateVar))</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>108 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this won't work.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>109 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>110 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>111 </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <green>Python built-in functions for classes/instances:</green>
        <br/><br/>
        <code>issubclass(sub, sup)</code><br/>
        It's a <purple>boolean</purple> <red>function</red> that <purple>returns</purple> <purple>true</purple> 
        if the given <red>subclass</red> sub is indeed a <red>subclass</red> of the 
        superclass sup.
        <br/><br/>
        <code>isinstance(obj, Class)</code><br/>
        Its a <purple>boolean</purple> <red>function</red> that <purple>returns</purple> <purple>true</purple> if 
        the <code>obj</code> is an <red>instance</red> of <red>class</red> <red>Class</red> or is an 
        <red>instance</red> of a <red>subclass</red> of <red>Class</red>.
        <br/></inheritance>
        <abstraction>*General-Programming-Knowledge*
            <br/>
            <green>Abstraction in Python:</green>
            <br/><br/>
            <azure>Abstraction</azure> in <red>Python</red> refers to the <azure>process</azure> of <azure>creating</azure> 
            <azure>abstract</azure> 
            <red>classes</red> and <red>methods</red> that provide a blueprint for other 
            <red>classes</red> to <red>inherit</red> from.
            <br/><br/>
            It <azure>allows</azure> us to define common <purple>attributes</purple> and behaviors that can be <azure>shared</azure> among 
            multiple <red>classes</red>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of abstraction in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from abc import ABC, abstractmethod</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Defining abstract class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class democlass(ABC):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Defining abstract method:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    @abstractmethod</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def method1(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("abstract method")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Defining concrete method:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def method2(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("concrete method")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Defining concrete class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class concreteclass(democlass):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def method1(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#Calling parent class method:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        super().method1()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">obj = concreteclass()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">obj.method1()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">obj.method2()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstraction>
        <generic-programming>*General-Programming-Knowledge*
            <br/>
            <green>Generic-Programming in Python:</green>
            <br/><br/>
            <red>Python</red> <red>generics</red> are like hints in <red>Python</red>. They came out in <red>Python</red> 3.5
            and newer versions. 
            <br/>
            They let you say what <purple>type</purple> of things your <purple>variables</purple>, 
            <red>functions</red>, and results are. 
            <br/>
            It helps you <azure>write</azure> down what kind of things your 
            <azure>code</azure> is dealing with, but it doesn't make the <red>computer</red> check it 
            while running the <azure>code</azure>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of Python 3 generics with functions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from typing import TypeVar, List</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">T = TypeVar('T')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def element(items: List[T]) -&gt; T:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return items[0]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># Usage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(element([1, 2, 3])) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(element(['a', 'b', 'c']))  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># 1</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># a</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of Python 3 generics with classes:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from typing import TypeVar, Iterable</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Declare type variable</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">T = TypeVar('T')  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def process_data(data: Iterable[T]) -&gt; None:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for item in data:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment># Check if the object has a quack method, then call it</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        if hasattr(item, 'quack') and callable(item.quack):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            item.quack()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        else:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            print(f"This object of type {type(item).__name__} doesn't quack like a duck!")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example class</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Duck:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def quack(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Quack!")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Another class with similar behavior</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class AnotherBird:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def quack(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Quack!")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Using duck typing with process_data function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">duck_obj = Duck()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">another_bird_obj = AnotherBird()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Both objects "quack" like a duck</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">duck_list = [duck_obj, another_bird_obj]  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#We can pass duck_list to process_data because </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#both objects have a quack method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">process_data(duck_list)   </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># OUTPUT: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># Quack!</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># Quack!</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></generic-programming>
        <variable-arguments-lists>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of variable arguments in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def Print(*argv):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for arg in argv:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print(arg)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Print('Hello', 'Welcome')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></variable-arguments-lists>
        <simple-data-types>In <red>programming</red>, <purple>data</purple> <purple>type</purple> is an important concept.
            <br/><br/>
            <purple>Variables</purple> can <azure>store</azure> <purple>data</purple> of different <purple>types</purple>, and different 
            <purple>types</purple> can do different things.
            <br/><br/>
            <green>Data types in Python:</green>
            <br/><br/>
            <indigo>Python has the following built-in data types:</indigo><br/>
            <code>Text Type:        str</code><br/>
            <code>Numeric Types:    int, float, complex</code><br/>
            <code>Sequence Types:   list, tuple, range</code><br/>
            <code>Mapping Type:     dict</code><br/>
            <code>Set Types:        set, frozenset</code><br/>
            <code>Boolean Type:     bool</code><br/>
            <code>Binary Types:     bytes, bytearray, memoryview</code><br/>
            <code>None Type:        NoneType</code><br/>
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of data-types in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#str</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = "Hello World"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#int</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = 20</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#float</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = 20.5</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#complex</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = 1j</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#list</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = ["apple", "banana", "cherry"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#tuple</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = ("apple", "banana", "cherry")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#range</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = range(6)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#dict</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = {"name" : "John", "age" : 36}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#set</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = {"apple", "banana", "cherry"}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#frozenset</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = frozenset({"apple", "banana", "cherry"})</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#bool</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = True</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#bytes</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = b"Hello"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#bytearray</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = bytearray(5)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#memoryview</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = memoryview(bytes(5))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#NoneType</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = None</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(x))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></simple-data-types>
        <complex-data-types>The complex <purple>data</purple> <purple>type</purple> in <red>Python</red> is used to represent numbers with both 
            <red>real</red> and imaginary parts. It is written in the 
            form of <code>a + bj</code>, where <code>a</code> 
            represents the <red>real</red> part and <code>b</code> represents the imaginary part.</complex-data-types>
        <loops><red>Python</red> <red>programming</red> <red>language</red> provides two <purple>types</purple> of <azure>loops</azure>: <azure>For</azure> <azure>loop</azure> and 
            <azure>While</azure> <azure>loop</azure>
            <br/><br/>
            <azure>Loops</azure> in <red>Python</red> provides multiple ways for the execution:
            <br/><br/>
            <indigo>While Loop:</indigo>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of while loop execution:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">count = 0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while (count &lt; 3):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    count = count + 1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("Hello")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of while-else loop execution:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">count = 0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while (count &lt; 3):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    count = count + 1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("Hello")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">else:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("Goodbye")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of infinite while loop execution </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#using try-except blocks:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">fruits = ["apple", "orange", "kiwi"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">iter_obj = iter(fruits)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while True:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    try:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fruit = next(iter_obj)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print(fruit)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    except StopIteration:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        break</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
             <br/>
            <indigo>For Loop:</indigo>
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of for loop execution using range:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">n = 4</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for i in range(0, n):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(i)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of for loop execution using range:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">list = ["items", "inside", "the", "list"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for index in range(len(list)):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(list[index])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of for-else loop execution using range:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">list = ["items", "inside", "the", "list"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for index in range(len(list)):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(list[index])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">else:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("List ended.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of for loop execution as foreach:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">fruits = ["apple", "orange", "kiwi"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for fruit in fruits:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(fruit)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></loops>
        <collections>*General-Programming-Knowledge*
            <br/>
            <green>Collections in Python:</green>
            <br/><br/>
            <brown>Lists:</brown>
            <br/><br/>
            <purple>Lists</purple> are ordered and changeable <purple>collections</purple> which 
            <azure>allow</azure> duplicate <purple>values</purple>. 
            Ordered means that the items within a <purple>list</purple> have a 
            defined order, and that order will 
            not change. Changeable means that we can change, <azure>add</azure>, 
            and <purple>remove</purple> 
            items in a <purple>list</purple> after it has been <azure>created</azure>.
            <br/><br/>
            A <purple>list</purple> is like a <purple>vector</purple> (<azure>dynamic</azure> in length) and it can be accessed 
            in the same way, by index. The <purple>list</purple> <purple>collections</purple> are indexed 
            <azure>starting</azure> from 
            0, similar to any other <purple>collection</purple> from other <red>programming</red> <red>languages</red>.
            <br/><br/>
            In <red>Python</red> a <purple>list</purple> can be <azure>created</azure> using any <purple>type</purple> of <purple>data</purple>.
            The <azure>dynamic</azure> length of a <purple>list</purple>, <azure>allows</azure> <azure>appending</azure> new elements 
            at the end of the 
            <purple>list</purple>, so that the <purple>size</purple> would change automatically.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of working with lists in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Defining a list:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">CharList = ['M','e','s','s','a','g','e']</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print('The list is: {0}' .format(CharList))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Accessing an element of the list:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print('This is the 4th element {0}' .format(CharList[4]))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Changing an element of the list:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">CharList[4] = 'O'</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The new 4th element is: {0}" .format(CharList[4]))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Appending elements at the end of the list.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">CharList+= ['1', '2'] </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this is used for temporarily change.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The list now, looks like this: {0}" .format(CharList))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">CharList.append('3') </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this is used for permanent change. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The list now, looks like this: {0}" .format(CharList))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Slicing lists:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The sliced list is: {0}" .format(CharList[:5])) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#slicing a list can be done just like in case of strings.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Changing multiple items of the list:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">CharList[2:] = ['2', '3'] </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this synthax can only be used on lists, to add multiple</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#elements after a given index (will automatically erase </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#the rest of the elements after that index)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(CharList)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Emptying the list:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">CharList[:] = []</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(CharList)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of unpacking lists in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Unpacking is the process in which every</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#list element gets assigned to individual variable</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">item, name, price = ["Car", "Mustang Gt", "14000"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#This is an unpacked list, where each element is actually a variable.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("item: ", item, " name: ", name, " price: ", price);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The lists that have many more elements:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("\nThis is the second method: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">start, *middle, end = ["element1", "element2", "element3", "element4"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(start) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this will print the first element</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(*middle) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this will print all the middle elements</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(end) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this will print the last element</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of zipping/combining lists together:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Lst1 = ["Dragos", "Alan", "Robin"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Lst2 = ["Blake", "Walker", "Williams"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">names = zip(Lst1, Lst2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#names will be a new list, a 2-dimensional list </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#containing all the elements in Lst1 and Lst2 combined.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Iterating names:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for a,b in names:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("Name = ", a, b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <brown>Dictionaries:</brown>
            <br/><br/>
            <purple>Dictionaries</purple> are used to <azure>store</azure> <purple>data</purple> <purple>values</purple> in <code>key:value</code> pairs.
            A <purple>dictionary</purple> is a <purple>collection</purple> which is ordered, 
            changeable and do <azure>not</azure> <azure>allow</azure> duplicates.
            <br/><br/>
            Each <purple>key</purple> is separated from its <purple>value</purple> by a colon (<code>:</code>), 
            the items are separated by
            commas (<code>,</code>) and the whole thing is enclosed in curly braces <code>{}</code>. 
            <br/>
            An empty <purple>dictionary</purple>
            without any items is declared using only two curly braces such as: <code>{}</code>.
            <br/><br/>
            <purple>Keys</purple> are unique within a <purple>dictionary</purple> while 
            <purple>values</purple> may not be. The <purple>values</purple> of a
            <purple>dictionary</purple> can be of any <purple>type</purple>, but the <purple>keys</purple> must be of 
            an immutable <purple>data</purple> <purple>type</purple> such as <purple>strings</purple>, numbers, 
            or <purple>tuples</purple>.
            <br/><br/>
            An item can be accessed only with a valid <purple>key</purple> or index, 
            trying to access an item with invalid <purple>key</purple> or index will 
            result in an error.
            <br/><br/>
            <purple>Dictionary</purple> <purple>values</purple> have no restrictions. 
            They can be any arbitrary <red>Python</red> <red>objects</red>,
            either standard <red>objects</red> or user-defined <red>objects</red>. 
            However, the same is not <purple>true</purple> for the <purple>keys</purple>
            <br/><br/>
            <indigo>Important aspect: </indigo>
            <br/>
            More than one entry per <purple>key</purple> is <azure>not</azure> <azure>allowed</azure>. 
            Which means no duplicate <purple>key</purple> is <azure>allowed</azure>. 
            When duplicate <purple>keys</purple> are encountered during assignment, the last
            assignment wins.
            <br/><br/>
            <purple>Keys</purple> must be immutable. Which means you can use 
            <purple>strings</purple>, numbers or <purple>tuples</purple> as <purple>dictionary</purple>  
            <purple>keys</purple> but something like <code>['key']</code> is <azure>not</azure> <azure>allowed</azure>.
            <br/><br/>
            Example: <code>dict = {['Name']: 'Zara'}</code>
            <br/>
            This case is <azure>not</azure> <azure>allowed</azure> as the <purple>key</purple> provided is of <purple>type</purple> <purple>list</purple>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of working with dictionaries in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("dict['Name']: {0}" .format(dict['Name']))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("dict['Age']: {0}" .format(dict['Age']))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Updating the dictionary:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("\nAfter the update:")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">dict['Age'] = 8; <comment># update existing entry</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">dict['Name'] = "DPS School"; <comment># Add new entry</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("dict['Name']: {0}" .format(dict['Name']))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("dict['Age']: {0}" .format(dict['Age']))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Looping through the dictionary:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for name,key in dict.items(): </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#treat 'name' as the Name(from dictionary)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#and key as the Key(value from the dictionary)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("Key: ", key, "\t Name:", name)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Deleting dictionary items:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">del dict['Name']; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#remove entry with key 'Name'</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#After the deletion the item with key 'Name'</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#accessing it will result and error.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">dict.clear();     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#remove all entries in dict, the dictionary </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#will be empty.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">del dict ;        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#delete entire dictionary, it won't exist anymore.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of iterating through dictionaries:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Accessing elements of dictionary using indexes:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">i=0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">dict = {"name1": "John", "name2": "Allan", "name3": "Mark"}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Iterating through dictionary using while loop (for values):</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while(i&lt;len(dict)):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("While-loop Key: ", list(dict.keys())[i], \</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                  " While-loop Value: ", list(dict.values())[i])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    i+=1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Iterating through dictionary using while loop (for values):</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">i=0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while(i&lt;len(dict)):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("While-loop Value: ", list(dict.values())[i])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    i+=1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Iterating through dictionary using while loop (for values):</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">i=0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">while(i&lt;len(dict)):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("While-loop Key: ", list(dict.keys())[i])</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    i+=1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Iterating through dictionary using for loop (for keys and values):</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for n,k in dict.items():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("For-Loop key = ", n, " For-Loop Value = ", k)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Iterating through dictionary using for loop (for keys):</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for k in dict:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("For-Loop key = ", k)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Iterating through dictionary using for loop (for values):</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for k in dict.values():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("For-Loop Value = ", k)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Keep the console opened until the next button pressed:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("Enter anything to quit.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <purple>Dictionaries</purple> can also be converted to <purple>lists</purple> as the following 
            example demonstrates:
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example of splitting dictionaries to lists:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Dict = { "GOOGLE": 53.22, "FACEBOOK": 77.22, "TUMBLR": 33.2}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Splitting dictionary to lists:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Dict.values() =&gt; this will return a list with all the values in dictionary</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Dict.keys() =&gt; this will return a list with all the keys in the dictionary</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Zipping a dictionary:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">name = zip(Dict.values(), Dict.keys())</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The zipped dictionary will look like this:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#(33.2, 'TUMBLR'), (53.22, 'GOOGLE'), (77.22, 'FACEBOOK')</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The same would be in case of lists, 1-&gt;1, 2-&gt;2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#first element combined with first, second to second... etc</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The original dictionary is: ", Dict)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Sorting a zipped dictionary:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The sorted(by value) zipped dictionary is: ", sorted(name))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">name = name = zip(Dict.keys(), Dict.values())</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The sorted (by keys) zipped dictionary is: ", sorted(name))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <brown>Sets:</brown>
            <br/><br/>
            <purple>Sets</purple> are like <purple>lists</purple> that cannot contain duplicate elements.
            <br/>
            A <purple>set</purple> is one of 4 built-in <purple>data</purple> <purple>types</purple> in <red>Python</red> used 
            to <azure>store</azure> <purple>collections</purple> of <purple>data</purple>, 
            the other 3 are <purple>List</purple>, <purple>Tuple</purple>, and <purple>Dictionary</purple>, 
            all with different qualities and usage.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of working with sets in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">SetO = {"Fruits", "Vegetables", "Meal", "Drinks"}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("This is the set: ", SetO)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Printing item by item:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("\nThese are the items in the set: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">for item in SetO:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(item)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The size of Set is: " + str(len(SetO)))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <brown>Tuples:</brown>
            <br/><br/>
            A <purple>tuple</purple> is a <azure>sequence</azure> of immutable <red>Python</red> <red>objects</red>. 
            <purple>Tuples</purple> are 
            <azure>sequences</azure>, just like <purple>lists</purple>. 
            <br/><br/>
            The differences between <purple>tuples</purple> 
            and <purple>lists</purple> are:<br/>
            - <purple>tuples</purple> cannot be changed whereas <purple>lists</purple> can be changed;<br/>
            - <purple>tuples</purple> use parenthesis <code>()</code>, whereas <purple>lists</purple> use 
            square brackets <code>[]</code>.<br/>
            Immutable means <purple>constant</purple> once initialized it cannot be changed, meaning
            no item can be changed, <azure>added</azure> or <purple>removed</purple> from it.
            <br/><br/>
            <purple>Tuples</purple> can however be reinitialized with different <purple>values</purple>.
            <br/><br/>
            <purple>Tuples</purple> can be <azure>sliced</azure> meaning you are able to take <azure>portions</azure> of
            existing <purple>tuples</purple> to <azure>create</azure> new <purple>tuples</purple>.
            <br/><br/>
            New <purple>tuples</purple> can be <azure>created</azure> by <azure>adding</azure> 2 
            existing <purple>tuples</purple> together.
            <br/><br/>
            Any <purple>set</purple> of multiple <red>objects</red>, comma-separated, declared without identifying 
            symbols are by <azure>default</azure> <purple>set</purple> to <purple>tuples</purple>.
            <br/>
            <purple>Tuples</purple> can be accessed using indexes. 
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of working with tuples in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">tup1 = ('physics', 'chemistry', 1997, 2000);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">tup2 = (1, 2, 3, 4, 5 );</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">tup3 = "a", "b", "c", "d";</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#An empty tuple is declared like this:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">tup1 = ();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#To write a tuple containing a single value you have to </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">include a comma, even though there is only one value.</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">tup1 = (50,); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The tuple contain {0} elements: {1} " .format(len(tup1), tup1[0]))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Tuples can be reinitialized with other values.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">tup1 = (12, 34.56); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">tup2 = ('abc', 'xyz');</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Following action is not valid for tuples</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#tup1[0] = 100;</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#So let's create a new tuple as follows:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">tup3 = tup1 + tup2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (tup3)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Tuples can be DELETED as follows:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">del tup3</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#print(tup3) -&gt; this will result an error, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#tup3 won't exist anymore after its deletion</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">tup3 = tup1 + tup2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Tuples can use the same operation just as lists:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("\nExample: tup3[2] = {0}, tup3[-2] = {1}" .format(tup3[2], tup3[-2]))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("Slicing tuples: {0}" .format(tup3[:2]))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("Slicing tuples: {0}" .format(tup3[2:]))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Any set of multiple objects, comma-separated, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#declared without identifying symbols are by </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#default set to tuples.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Examples:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x, y = 1, 2;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></collections>
        <collection-methods><green>Collection Methods in Python:</green>
            <br/><br/>
            <red>Python</red> has a <purple>set</purple> of built-in <red>methods</red> that can be used on <purple>collections</purple>.
            <br/><br/>
            <green>List methods:</green>
            <br/><br/>
            <code>append()</code><br/>
            Used for <azure>adding</azure> elements to the end of the <purple>List</purple>. 
            <br/><br/>
            <code>copy()</code><br/>
            It <purple>returns</purple> a shallow copy of a <purple>list</purple>
            <br/><br/>
            <code>clear()</code><br/>
            This <red>method</red> is used for <purple>removing</purple> all items from the <purple>list</purple>. 
            <br/><br/>
            <code>count()</code><br/>
            These <red>methods</red> <azure>count</azure> the elements.
            <br/><br/>
            <code>extend()</code><br/>
            <azure>Adds</azure> each element of an <purple>iterable</purple> to the end of the <purple>List</purple>
            <br/><br/>
            <code>index()</code><br/>
            <purple>Returns</purple> the lowest index where the element appears. 
            <br/><br/>
            <code>insert()</code><br/>
            <azure>Inserts</azure> a given element at a given index in a <purple>list</purple>. 
            <br/><br/>
            <code>pop()</code><br/>
            <purple>Removes</purple> and <purple>returns</purple> the last <purple>value</purple> from the <purple>List</purple> or the given index <purple>value</purple>.
            <br/><br/>
            <code>remove()</code><br/>
            <purple>Removes</purple> a given <red>object</red> from the <purple>List</purple>. 
            <br/><br/>
            <code>reverse()</code><br/>
            Reverses <red>objects</red> of the <purple>List</purple> in place.
            <br/><br/>
            <code>sort()</code><br/>
            Sort a <purple>List</purple> in ascending, descending, or user-defined order
            <br/><br/>
            <code>min()</code><br/>
            Calculates the minimum of all the elements of the <purple>List</purple>
            <br/><br/>
            <code>max()</code><br/>
            Calculates the maximum of all the elements of the <purple>List</purple>
            <br/><br/>
            <green>Dictionary methods:</green>
            <br/><br/>
            <code>clear()</code><br/>
            <purple>Removes</purple> all the elements from the <purple>dictionary</purple>
            <br/><br/>
            <code>copy()</code><br/>
            <purple>Returns</purple> a copy of the <purple>dictionary</purple>
            <br/><br/>
            <code>fromkeys()</code><br/>
            <purple>Returns</purple> a <purple>dictionary</purple> with the specified <purple>keys</purple> and <purple>value</purple>
            <br/><br/>
            <code>get()</code><br/>
            <purple>Returns</purple> the <purple>value</purple> of the specified <purple>key</purple>
            <br/><br/>
            <code>items()</code><br/>
            <purple>Returns</purple> a <purple>list</purple> containing a <purple>tuple</purple> for each <purple>key</purple> <purple>value</purple> pair
            <br/><br/>
            <code>keys()</code><br/>
            <purple>Returns</purple> a <purple>list</purple> containing the <purple>dictionary's</purple> <purple>keys</purple>
            <br/><br/>
            <code>pop()</code><br/>
            <purple>Removes</purple> the element with the specified <purple>key</purple>
            <br/><br/>
            <code>popitem()</code><br/>
            <purple>Removes</purple> the last <azure>inserted</azure> <purple>key</purple>-<purple>value</purple> pair
            <br/><br/>
            <code>setdefault()</code><br/>
            <purple>Returns</purple> the <purple>value</purple> of the specified <purple>key</purple>. If the <purple>key</purple> does not exist: 
            <azure>insert</azure> the <purple>key</purple>, with the specified <purple>value</purple>
            <br/><br/>
            <code>update()</code><br/>
            <azure>Updates</azure> the <purple>dictionary</purple> with the specified <purple>key</purple>-<purple>value</purple> pairs
            <br/><br/>
            <code>values()</code><br/>
            <purple>Returns</purple> a <purple>list</purple> of all the <purple>values</purple> in the <purple>dictionary</purple>
            <br/><br/>
            <green>Set methods:</green>
            <br/><br/>
            <code>add()</code><br/>
            <azure>Adds</azure> an element to the <purple>set</purple>
            <br/><br/>
            <code>clear()</code><br/>
            <purple>Removes</purple> all the elements from the <purple>set</purple>
            <br/><br/>
            <code>copy()</code><br/>
            <purple>Returns</purple> a copy of the <purple>set</purple>
            <br/><br/>
            <code>difference()</code><br/>
            <purple>Returns</purple> a <purple>set</purple> containing the difference between two or more <purple>sets</purple>
            <br/><br/>
            <code>difference_update()</code><br/>
            <purple>Removes</purple> the items in this <purple>set</purple> that are also included in another, specified <purple>set</purple>
            <br/><br/>
            <code>discard()</code><br/>
            <purple>Remove</purple> the specified item
            <br/><br/>
            <code>intersection()</code><br/>
            <purple>Returns</purple> a <purple>set</purple>, that is the intersection of two other <purple>sets</purple>
            <br/><br/>
            <code>intersection_update()</code><br/>
            <purple>Removes</purple> the items in this <purple>set</purple> that are not present in other, 
            specified set(s)
            <br/><br/>
            <code>isdisjoint()</code><br/>
            <purple>Returns</purple> whether two <purple>sets</purple> have a intersection or not
            <br/><br/>
            <code>issubset()</code><br/>
            <purple>Returns</purple> whether another <purple>set</purple> contains this <purple>set</purple> or not
            <br/><br/>
            <code>issuperset(()</code><br/>
            <purple>Returns</purple> whether this <purple>set</purple> contains another <purple>set</purple> or not
            <br/><br/>
            <code>pop()</code><br/>
            <purple>Removes</purple> an element from the <purple>set</purple>
            <br/><br/>
            <code>remove()</code><br/>
            <purple>Removes</purple> the specified element
            <br/><br/>
            <code>symmetric_difference()</code><br/>
            <purple>Returns</purple> a <purple>set</purple> with the symmetric differences of two <purple>sets</purple>
            <br/><br/>
            <code>symmetric_difference_update()</code><br/>
            <azure>Inserts</azure> the symmetric differences from this <purple>set</purple> and another
            <br/><br/>
            <code>union()</code><br/>
            <purple>Return</purple> a <purple>set</purple> containing the <purple>union</purple> of <purple>sets</purple>
            <br/><br/>
            <code>update()</code><br/>
            <azure>Update</azure> the <purple>set</purple> with the <purple>union</purple> of this <purple>set</purple> and others
            <br/><br/>
            <green>Tuple methods:</green>
            <br/><br/>
            <code>count()</code><br/>
            <purple>Returns</purple> the number of times a specified <purple>value</purple> occurs in a <purple>tuple</purple>
            <br/><br/>
            <code>index()</code><br/>
            <azure>Searches</azure> the <purple>tuple</purple> for a specified <purple>value</purple> and <purple>returns</purple> the 
            position of where it was found
            <br/></collection-methods>
        <dynamic-memory-allocation><green>Dynamic memory allocation in Python:</green>
            <br/><br/>
            The <azure>memory</azure> is <azure>allocated</azure> to the <red>objects</red> at the <azure>run</azure> time. <br/>
            The <purple>heap</purple> is used to <red>implement</red> <azure>dynamic</azure> <azure>memory</azure> management. 
            <br/><br/>
            Everything in <red>Python</red> is an <red>object</red> which means the <azure>memory</azure> is
            <azure>allocated</azure> <azure>dynamically</azure> and is managed by the 
            <red>Python</red> <azure>Memory</azure> Management.
            <br/><br/>
            <red>Python</red> <azure>deletes</azure> unneeded <red>objects</red> (built-in <purple>types</purple> or 
            <red>class</red> <red>instances</red>) automatically to free the <azure>memory</azure> space.
            <br/><br/>
            <red>Python's</red> <purple>garbage</purple> <purple>collector</purple> <azure>runs</azure> during program execution 
            and is triggered when an <red>object's</red> <purple>reference</purple> <azure>count</azure> reaches zero. 
            An <red>object's</red> <purple>reference</purple> <azure>count</azure> changes as the number of aliases 
            that <purple>point</purple> to it changes.
            <br/></dynamic-memory-allocation>
        <read-from-file>*General-Programming-Knowledge*
            <green>Read files in Python:</green>
            <br/><br/>
            The <code>read()</code> <red>method</red> <azure>reads</azure> a <purple>string</purple> from an <azure>opened</azure> <purple>file</purple>. 
            <br/>
            It is important to note that <red>Python</red> <purple>strings</purple> can contain <purple>binary</purple> <purple>data</purple>, 
            apart from text <purple>data</purple>.
            <br/><br/>
            When <azure>reading</azure>/<azure>writing</azure> <purple>characters</purple> from a <purple>file</purple> the <purple>pointer</purple>/<purple>cursor</purple> 
            will move across the
            content of a <purple>file</purple>, and if it reaches the end, it will need to be reseted 
            using <code>seek()</code> <red>function</red>, before being able to <azure>read</azure>/<azure>write</azure> again.
            <br/><br/>
            The <red>method</red> <code>tell()</code> <purple>returns</purple> the current position of the 
            <purple>pointer</purple>/<purple>cursor</purple> within the <purple>file</purple>.
            <br/><br/>
            Passing an <red>argument</red> to the <code>read()</code> <red>method</red> will ensure that everything is 
            <azure>read</azure> until to the given position within the <purple>file</purple> content.
            <br/><br/>
            Example: <code>MyFile.read(11)</code> 
            <br/>
            Only the first 11 <purple>characters</purple> will be extracted from the <purple>file</purple>.
            <br/><br/>
            The <code>close()</code> <red>method</red> of a <purple>file</purple> <red>object</red>, flushes 
            any unwritten information and <azure>closes</azure> the <purple>file</purple> <red>object</red>, 
            after which no more <azure>reading</azure> or <azure>writing</azure> can be done. 
            <br/><br/>
            <red>Python</red> automatically <azure>closes</azure> a <purple>file</purple> when the <purple>reference</purple> <red>object</red> of 
            a <purple>file</purple> is reassigned to another <purple>file</purple>.
            <br/><br/>
            It is a good practice to use the <code>close()</code> <red>method</red> to <azure>close</azure> a <purple>file</purple> 
            after finishing <purple>operating</purple> on the <purple>file</purple>.
            <br/><br/>
            In order to <azure>open</azure> a <purple>file</purple> the <code>open()</code> <red>method</red> it is used. 
            <br/><br/>
            The <code>open()</code> <red>method</red> takes 2 <red>arguments</red>:<br/>
            - the filepath of the <purple>file</purple> to be <azure>opened</azure>;<br/>
            - the mode for <azure>opening</azure>;<br/>
            <br/>
            Example: <code>open("file.txt", "w")</code><br/>
            This will <azure>open</azure> a <purple>file</purple> named file.txt placed in the same 
            directory as the <code>.py</code> <azure>script</azure>.
            <br/><br/>
            <green>Modes for opening a file:</green>
            <br/><br/>
            The other available modes for <azure>opening</azure> a <purple>file</purple> are:
            <br/><br/>
            <code>"r"</code> - <azure>Opens</azure> a <purple>file</purple> for <azure>reading</azure> only. 
            <br/>
            The <purple>file</purple> <purple>pointer</purple>/<purple>cursor</purple> is placed at the beginning of the <purple>file</purple>. 
            This is the <azure>default</azure> mode. It throws an error if 
            the <purple>file</purple> does not exist.
            <br/><br/>
            <code>"w"</code> - <azure>Opens</azure> a <purple>file</purple> for <azure>writing</azure> only. 
            <br/>
            Overwrites the <purple>file</purple> if the <purple>file</purple> exists.
            If the <purple>file</purple> does not exist, <azure>creates</azure> a new <purple>file</purple> for <azure>writing</azure>.
            <br/><br/>
            <code>"rb"</code> - <azure>Opens</azure> a <purple>file</purple> for <azure>reading</azure> only in <purple>binary</purple> format. 
            <br/>
            The <purple>file</purple> <purple>pointer</purple>/<purple>cursor</purple> is placed
            at the beginning of the <purple>file</purple>. 
            This is the <azure>default</azure> mode.
            <br/><br/>
            <code>"rb+"</code> - <azure>Opens</azure> a <purple>file</purple> for both <azure>reading</azure> and <azure>writing</azure> in 
            <purple>binary</purple> format. 
            <br/>
            The <purple>file</purple> <purple>pointers</purple> placed at the beginning of the <purple>file</purple>.
            <br/><br/>
            <code>"wb"</code> - <azure>Opens</azure> a <purple>file</purple> for <azure>writing</azure> only in <purple>binary</purple> format. 
            <br/>
            Overwrites the <purple>file</purple> if the <purple>file</purple> exists. 
            If the <purple>file</purple> does not exist, 
            <azure>creates</azure> a new <purple>file</purple> for <azure>writing</azure>.
            <br/><br/>
            <code>"w+"</code> - <azure>Opens</azure> a <purple>file</purple> for both <azure>writing</azure> and <azure>reading</azure>.
            <br/>
            Overwrites the existing <purple>file</purple> if
            the <purple>file</purple> exists. 
            If the <purple>file</purple> does not exist, <azure>creates</azure> a new <purple>file</purple> for <azure>reading</azure>
            and <azure>writing</azure>.
            <br/><br/>
            <code>"wb+"</code> - <azure>Opens</azure> a <purple>file</purple> for both <azure>writing</azure> and <azure>reading</azure> in 
            <purple>binary</purple> format. 
            <br/>
            Overwrites the existing <purple>file</purple> if 
            the <purple>file</purple> exists. 
            If the <purple>file</purple> does not exist, <azure>creates</azure> a
            new <purple>file</purple> for <azure>reading</azure> and <azure>writing</azure>.
            <br/><br/>
            <code>"a"</code> - <azure>Opens</azure> a <purple>file</purple> for <azure>appending</azure>. <br/>
            The <purple>file</purple> <purple>pointer</purple>/<purple>cursor</purple> is at the end of the <purple>file</purple>
            if the <purple>file</purple> exists. 
            The <purple>file</purple> is <azure>opened</azure> in 
            the <azure>append</azure> mode. If the <purple>file</purple> does
            not exist, it <azure>creates</azure> a new <purple>file</purple> for <azure>writing</azure>.
            <br/><br/>
            <code>"ab"</code> - <azure>Opens</azure> a <purple>file</purple> for <azure>appending</azure> in <purple>binary</purple> format. 
            <br/>
            The <purple>file</purple> <purple>pointer</purple>/<purple>cursor</purple> is at the
            end of the <purple>file</purple> if the <purple>file</purple> exists.
            The <purple>file</purple> is <azure>opened</azure> in the <azure>append</azure> mode.
            If the <purple>file</purple> does not exist, 
            it <azure>creates</azure> a new <purple>file</purple> for <azure>writing</azure>.
            <br/><br/>
            <code>"a+"</code> - <azure>Opens</azure> a <purple>file</purple> for both <azure>appending</azure> and <azure>reading</azure>.
            <br/>
            The <purple>file</purple> <purple>pointer</purple>/<purple>cursor</purple> is at the
            end of the <purple>file</purple> if the <purple>file</purple> exists.
            The <purple>file</purple> <azure>opens</azure> in the <azure>append</azure> mode. If the
            <purple>file</purple> does not exist, it <azure>creates</azure> a new <purple>file</purple> 
            for <azure>reading</azure> and <azure>writing</azure>.
            <br/><br/>
            <code>"ab+"</code> - <azure>Opens</azure> a <purple>file</purple> for both <azure>appending</azure> and <azure>reading</azure> 
            in <purple>binary</purple> format. 
            <br/>
            The <purple>pointer</purple>/<purple>cursor</purple> within the <purple>file</purple> is poiting to the end of the 
            <purple>file</purple> if the <purple>file</purple> exists. 
            If the <purple>file</purple> does not exist, it <azure>creates</azure> 
            a new <purple>file</purple> for <azure>reading</azure> and <azure>writing</azure>.
            <br/><br/>
            <green>File object attributes:</green>
            <br/><br/>
            The <purple>file</purple> <red>object</red> contains several <purple>attributes</purple>:
            <br/><br/>
            <code>file.closed</code><br/>
            <purple>Returns</purple> <code>true</code> if <purple>file</purple> is <azure>closed</azure>, <code>false</code> 
            otherwise.
            <br/><br/>
            <code>file.mode</code><br/>
            <purple>Returns</purple> the access mode with which the <purple>file</purple> was 
            <azure>opened</azure>.
            <br/><br/>
            <code>file.name</code><br/> 
            <purple>Returns</purple> name of the <purple>file</purple>.
            <br/><br/>
            <code>file.softspace</code><br/>
            <purple>Returns</purple> a <purple>boolean</purple> that indicates whether a space <purple>character</purple> 
            needs to be printed before another <purple>value</purple> when using the print <azure>statement</azure>.
            <br/><br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of reading content from files</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">MyFile.write("This program is written in Python language.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The string above will be written after the files gets closed (in the next line)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">MyFile.close();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">MyFile = open("file.txt", "r")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Msg = MyFile.read(11) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Only the first 11 character will be extracted from the file.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(Msg)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Msg = MyFile.read(11) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#This will print the next 11 character in the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#since the cursor wasn't restarted.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(Msg)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Check current position</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">position = MyFile.tell();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("Current file position : {0}"  .format(position))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">position = MyFile.seek(0, 0); </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this will restart the cursor to the beginning of the file.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Msg = MyFile.read(11)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(Msg)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import os </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#needed for the os functions.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Syntax: os.rename(current_file_name, new_file_name)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#This function will rename a file:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Getting the current file name:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The current file name is: {0}" .format(MyFile.name))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The attribute .name shows the name of the current file loaded.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">MyFile.close() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#closing the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Check if a file exists</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if os.path.isfile("file1.txt"): </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    os.remove("file1.txt") </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#remove the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">os.rename("file.txt", "file1.txt")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#renaming the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Renaming the file with the name of an </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#existing file (at the same path) will</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#throw an exception.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">MyFile = open("file1.txt", "r")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The current file name is: {0}" .format(MyFile.name))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Changing the name of the file will work only </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#if the file is closed, and not being</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#processed by another programs.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Removing a directory:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">os.chdir(r"C:\Users\Black2\Desktop\python") </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Changing the current directory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Check if a directory exists</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if os.path.exists(r"C:\Users\Black2\Desktop\python\file dir"):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    os.rmdir(r"C:\Users\Black2\Desktop\python\file dir") </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#removing the directory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Creating a directory:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">os.mkdir("file dir")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The os.getcwd() method displays the current working directory.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("The current working directory is: {0}" .format(os.getcwd()))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Renaming directories:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Check if a directory exists:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if os.path.exists(r"C:\Users\Black2\Desktop\python\directory dir2"):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    os.rmdir(r"C:\Users\Black2\Desktop\python\directory dir2") </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#removing the directory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>81  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">os.rename(r"C:\Users\Black2\Desktop\python\directory dir",</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>82  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">             r"C:\Users\Black2\Desktop\python\directory dir2")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>83  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#renaming the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>84  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>85  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">MyFile.close()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>86  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#closing the file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>87  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>88  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">os.rmdir(r"C:\Users\Black2\Desktop\python\directory dir2")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>89  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#removing the directory</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>90  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>91  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>92  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></read-from-file>
        <write-to-file>*General-Programming-Knowledge*
            <br/>
            <green>Writing to files in Python:</green>
            <br/><br/>
            The <code>write()</code> <red>method</red> <azure>writes</azure> any <purple>string</purple> to an <azure>open</azure> <purple>file</purple>.
            The <code>write()</code> <red>method</red> does not <azure>add</azure> a <purple>newline</purple> <purple>character</purple> ('\n')
            <br/><br/>
            It is important to note that
            <red>Python</red> <purple>strings</purple> can have <purple>binary</purple> <purple>data</purple> and not just text.
            <br/><br/>
            When <azure>reading</azure>/<azure>writing</azure> <purple>characters</purple> from a <purple>file</purple> the <purple>pointer</purple>/<purple>cursor</purple> 
            will move across the
            content of a <purple>file</purple>, and if it reaches the end, it will need to be reseted 
            using <code>seek()</code> <red>function</red>, before being able to <azure>read</azure>/<azure>write</azure> again.
            <br/><br/>
            The <code>close()</code> <red>method</red> of a <purple>file</purple> <red>object</red>, flushes 
            any unwritten information and <azure>closes</azure> the <purple>file</purple> <red>object</red>, 
            after which no more <azure>reading</azure> or <azure>writing</azure> can be done. 
            <br/><br/>
            <red>Python</red> automatically <azure>closes</azure> a <purple>file</purple> when the <purple>reference</purple> <red>object</red> of 
            a <purple>file</purple> is reassigned to another <purple>file</purple>.
            <br/><br/>
            It is a good practice to use the <code>close()</code> <red>method</red> to <azure>close</azure> a <purple>file</purple> 
            after finishing <purple>operating</purple> on the <purple>file</purple>.
            <br/><br/>
            In order to <azure>open</azure> a <purple>file</purple> the <azure>open</azure>() <red>method</red> it is used. 
            <br/><br/>
            The <code>open()</code> <red>method</red> takes 2 <red>arguments</red>:<br/>
            <br/>
            - the filepath of the <purple>file</purple> to be <azure>opened</azure>;<br/>
            - the mode for <azure>opening</azure>;
             <br/><br/>
            Example: <code>open("file.txt", "w")</code><br/>
            This will <azure>open</azure> a <purple>file</purple> named file.txt placed in the same 
            directory as the <code>.py</code> <azure>script</azure>.
            <br/><br/>
            <brown>Writing to a file using TXT format:</brown>
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of writing to a file in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Opening a file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">file1 = open('myfile.txt', 'w')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">L = ["This is Delhi \n", "This is Paris \n", "This is London \n"]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">s = "Hello\n"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Writing a string to file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">file1.write(s)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Writing multiple strings</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#at a time</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">file1.writelines(L)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Closing file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">file1.close()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Checking if the data is</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#written to file or not</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">file1 = open('myfile.txt', 'r')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(file1.read())</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">file1.close()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <brown>Writing to a file using XML format:</brown>
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of writing to XML file</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import os</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import sys</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import xml.etree.ElementTree</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#import used for XML formatting</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Defining a person class:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Person:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self, surname:str, firstname:str, age: int):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.surname = surname</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.age = age</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.firstname = firstname</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __repr__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return self.surname+ " " + self.firstname + " " + str(self.age)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Creating a list of persons:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">people = [</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Person("Geere", "Richard", 64),</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Person("Walker", "Alan", 24),</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Person("Manson", "Mary", 34),</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Person("Manson", "Deny", 36),</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Person("Menance", "Denise", 54),</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                Person("Reyes", "Antonio", 22),</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            ]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Define a function to write to an xml file:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def write_xml(list, filename):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Format the content of the list to XML format</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    root  = xml.etree.ElementTree.Element("people")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for pers in list:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        node = xml.etree.ElementTree.Element("people", age = str(pers.age))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        surname = xml.etree.ElementTree.SubElement(node, 'surname')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        firstname = xml.etree.ElementTree.SubElement(node, 'firstname')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        surname.text = pers.surname</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        firstname.text = pers.firstname</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        root.append(node)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    tree = xml.etree.ElementTree.ElementTree(root)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Writing to the file:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    try:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        tree.write(filename, "UTF-8")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    except EnvironmentError as err:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("{0}: import error: {1}".format(</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            os.path.basename(sys.argv[0]), err))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return False</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return True</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Calling write_xml function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">write_xml(people, "file.xml")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></write-to-file>
        <serialization>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of serialization in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import pickle</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Object to serialize  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">data = [1, 2, 3, 4, 5]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Serialize object to a file  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">with open('data.pkl', 'wb') as file:  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">pickle.dump(data, file) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></serialization>
        <deserialization>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of deserialization in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import pickle</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Deserialize object from the file  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">with open('data.pkl', 'rb') as file:  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">loaded_data = pickle.load(file)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(loaded_data)    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></deserialization>
        <enums>*General-Programming-Knowledge*
            <green>Enums in Python:</green>
            <br/><br/>
            <purple>Enumerations</purple> in <red>Python</red> are <red>implemented</red> by using the <red>module</red> named 
            "<purple>enum</purple>".
            <br/><br/>
            <purple>Enumerations</purple> are <azure>created</azure> using <red>classes</red>. 
            <purple>Enums</purple> have names and <purple>values</purple> 
            associated with them.
            <br/><br/>
            <purple>Enums</purple> can be displayed as <purple>string</purple> or repr.<br/>
            <purple>Enums</purple> can be checked for their <purple>types</purple> using <purple>type</purple>().<br/>
            The "name" keyword is used to display the name of the <purple>enum</purple>
            <purple>member</purple>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of enums in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from enum import Enum</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Season(Enum):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    SPRING = 1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    SUMMER = 2</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    AUTUMN = 3</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    WINTER = 4</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(Season.SPRING)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(Season.SPRING.name)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(Season.SPRING.value)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(type(Season.SPRING))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(repr(Season.SPRING))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(list(Season))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></enums>
        <constructors>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of constructor in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Employee:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Constructor definition:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print('Employee created.')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Instantiation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">obj = Employee()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">del obj</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></constructors>
        <instantiation>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of instantiation in Python: </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Person:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Defining a constructor:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self, name, age):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.name = name</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.age = age</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Instantiation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">person1 = Person("John", 25)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(person1.name)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(person1.age)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></instantiation>
        <destructors>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of destructor in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class Employee:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Constructor definition:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print('Employee created.')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Destructor definition:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __del__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print('Destructor called, Employee deleted.')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Instantiation:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">obj = Employee()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">del obj</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></destructors>
        <function-overloading>*General-Programming-Knowledge*
            <br/>
            <green>Function overloading in Python:</green>
            <br/><br/>
            In <red>Python</red> <red>function</red> <red>overloading</red> works different as <azure>compared</azure> to other 
            <red>OOP</red> <red>programming</red>
            <red>languages</red>: the <red>methods</red> can be <red>overloaded</red> but only the 
            latest defined <red>method</red> can be used.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of function overloading in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#First product takes 2 arguments:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def product(a, b):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p = a * b</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(p)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Second product method 3 arguments:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def product(a, b, c):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p = a * b*c</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(p)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Uncommenting the below line shows an error</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#product(4, 5)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#This line will call the second product method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">product(4, 5, 5)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <green>Overloading behaviour in a single function:</green>
            <br/><br/>
            A <red>method</red> can be <red>implemented</red> in such a way that it responds differently
            <red>based</red> on the <red>arguments</red> passed to it. This will result in a behaviour
            which is similarly obtained via <red>method</red> <red>overloading</red> in other <red>programming</red>
            <red>languages</red>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of efficient overloading</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#behavior:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Function to take multiple arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def add(datatype, *args):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    #if datatype is int</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#initialize answer as 0</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if datatype == 'int':</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        answer = 0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    #if datatype is str</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#initialize answer as ''</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if datatype == 'str':</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        answer = ''</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Traverse through the arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for x in args:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#This will do addition if the</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#arguments are int. Or concatenation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        #if the arguments are str</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        answer = answer + x</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(answer)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Integer</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">add('int', 5, 6)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#String</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">add('str', 'Hello ', 'Python')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <green>Overloading via decorator:</green>
            <br/><br/>
            <red>Method</red> <red>overloading</red> can also be achieved by using a <purple>decorator</purple>. 
            The <red>method</red> everloading via <purple>decorator</purple> <azure>allows</azure> using all the 
            defined versions of the <red>method</red>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Overloading via decorator:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from multipledispatch import dispatch</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#import dispatch</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">@dispatch(int, int)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def product(first, second):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    result = first*second</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(result)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">@dispatch(int, int, int)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def product(first, second, third):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    result = first * second * third</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(result)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">@dispatch(float, float, float)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def product(first, second, third):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    result = first * second * third</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(result)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#calling product method with 2 arguments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">product(2, 3)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#the output will be 6</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#calling product method with 3 arguments but all int</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">product(2, 3, 2)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#the output will be 12</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#calling product method with 3 arguments but all float</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">product(2.2, 3.4, 2.3)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#the output will be 17.985999999999997</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></function-overloading>
        <operator-overloading>*General-Programming-Knowledge*
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of operator overloading in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class complex:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self, a, b):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.a = a</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.b = b</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     <comment>#overloading the + operator for addition:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __add__(self, other):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return self.a + other.a, self.b + other.b</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Ob1 = complex(1, 2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Ob2 = complex(2, 3)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Using the overloaded operator we can now</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#perform addition on complex objects:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">Ob3 = Ob1 + Ob2</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(Ob3)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
        <br/>
        <green>Python Operators for Overloading:</green>
        <br/><br/>
        <purple>Operator</purple>:<code>      </code>Magic <red>Method</red>:<br/>
        <code>+             __add__(self, other)</code><br/>
        <code>–             __sub__(self, other)</code><br/>
        <code>*             __mul__(self, other)</code><br/>
        <code>/             __truediv__(self, other)</code><br/>
        <code>/</code><code>/            __floordiv__(self, other)</code><br/>
        <code>%             __mod__(self, other)</code><br/>
        <code>**            __pow__(self, other)</code><br/>
        <code>&gt;&gt;            __rshift__(self, other)</code><br/>
        <code>&lt;&lt;            __lshift__(self, other)</code><br/>
        <code>&amp;             __and__(self, other)</code><br/>
        <code>|             __or__(self, other)</code><br/>
        <code>^             __xor__(self, other)</code><br/></operator-overloading>
        <concurrent-programming>*General-Programming-Knowledge*
            <br/>
            <green>Multithreading in Python:</green>
            <br/><br/>
            In <red>Python</red>: <azure>multithreading</azure> is the action of executing <azure>tasks</azure> <azure>simultaneously</azure> 
            (in <azure>parallel</azure>) in order to increase the speed of execution.
            <br/><br/>
            <green>GIL or Global Interpreter Lock:</green>
            <br/><br/>
            <red>Python</red> <purple>Global</purple> <purple>Interpreter</purple> <purple>Lock</purple> or <red>GIL</red> is an important 
            part of <azure>multithreading</azure> <red>programming</red>. 
            <br/><br/>
            <red>Python</red> <purple>Global</purple> <purple>Interpreter</purple> <purple>Lock</purple> it's a mutex or a <purple>type</purple> 
            of <azure>process</azure> lock used when working with multiple <azure>processes</azure>. 
            It <azure>allows</azure> only one <azure>thread</azure> to hold the control of 
            the <red>Python</red> interpreter. 
            This means that only one <azure>thread</azure> can be in a state of 
            execution at any <purple>point</purple> in time. 
            <br/><br/>
            The impact of the <red>GIL</red> isn’t visible to developers who execute 
            <azure>single</azure>-<azure>threaded</azure> programs but it can be a performance bottleneck in 
            <azure>CPU</azure>-bound and <azure>multi</azure>-<azure>threaded</azure> <azure>code</azure>.
            <br/><br/>
            <red>Python</red> uses <purple>reference</purple> <azure>counting</azure> for <azure>memory</azure> management. 
            It means that 
            <red>objects</red> <azure>created</azure> in <red>Python</red> have a <purple>reference</purple> <azure>count</azure> <purple>variable</purple> that 
            keeps track of the number of <purple>references</purple> that <purple>point</purple> to the <red>object</red>. 
            <br/>
            When this <azure>count</azure> reaches zero and no <purple>variable</purple> is <purple>referencing</purple> the 
            <red>object</red> <azure>stored</azure> in the <purple>heap</purple> <purple>memory</purple>, 
            the <purple>heap</purple> <purple>memory</purple> occupied by the <red>object</red> is released 
            (deallocated).
            <br/><br/>
            The problem was that this <purple>reference</purple> <azure>count</azure> <purple>variable</purple> needed <purple>protection</purple> 
            from <azure>race</azure> <azure>conditions</azure> where two <azure>threads</azure> increase or decrease 
            its <purple>value</purple> 
            <azure>simultaneously</azure>. If this happens, it can cause either leaked <azure>memory</azure> that 
            is never released or, even worse, incorrectly release of the
            the <azure>memory</azure> while a <purple>reference</purple> to that <red>object</red> still exists. 
            This can cause crashes or other "weird" bugs within the 
            <red>Python</red> programs.
            <br/><br/>
            <brown>GIL was introduced in order to fix these issues.</brown>
            <br/><br/>
            Generally, <red>Python</red> uses a <azure>single</azure> <azure>thread</azure> to <azure>run</azure> a single <azure>process</azure>.
            We get the same performance result of the <azure>single</azure>-<azure>threaded</azure> and 
            <azure>multithreading</azure> <azure>processes</azure> using the <red>GIL</red>. 
            It restricts achieving <azure>multithreading</azure> in <red>Python</red> because it prevents 
            the <azure>threads</azure> and works as a <azure>single</azure> <azure>thread</azure>.
            <br/><br/>
            <green>Python-related Multithreading Drawbacks:</green>
            <br/><br/>
            1. One <red>GIL</red> is used for all <azure>threads</azure>, and <azure>threads</azure> are limited by 
            <red>GIL</red>;
            <br/><br/>
            2. <azure>Multithreading</azure> has no effect for <azure>CPU</azure>-bound <azure>tasks</azure> due to 
            the <red>GIL</red>, 
            meaning we'll notice no improvements in the performance when it comes to these sort 
            of <azure>tasks</azure>;
            <br/>
            <azure>CPU</azure>-bound <azure>tasks</azure> are those that require a significant amount of computational 
            resource.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of multithreading in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import threading </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#used for threading</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import time </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#used for time</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def calculateSquare(numberList):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for n in numberList:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print(str(n) + " * " + str(n) + " = " + str(n*n))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        time.sleep(0.2) <comment>#this will add a 0.2 seconds delay</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def calculateCube(numberList):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for n in numberList:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print(str(n) + " * " + str(n) + " * " + str(n) + " = " + str(n*n*n))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        time.sleep(0.2) <comment>#this will add a 0.2 seconds delay</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Creating a list:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">numberList = [2,4,5,6,12,34]</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Creating threads:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread1 = threading.Thread(target=calculateSquare, args =(numberList,))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread2 = threading.Thread(target=calculateCube, args =(numberList,))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">t_before = time.time() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this will get the time before starting the threads</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">calculateSquare(numberList)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">calculateCube(numberList)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">t_after = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("Example 1: No threading - time for execution: " </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    + str(t_after-t_before) + " seconds.\n")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The following thread example works as calling </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#the 2 functions without threading (similar to the example above),</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#because the second thread needs to wait until the first thread </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#finishes its execution just like the functions in the example </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#above do.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Get current time:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">t1_before = time.time() <comment># this will get the time before starting the threads</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread1.start()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread1.join() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#wait for the thread1 to finish its work.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread2.start()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread2.join() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#wait for the thread2 to finish its work.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">t1_after = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("Example 2: Inefficient threading - time for execution: " </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        + str(t1_after-t1_before) + " seconds.\n")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The following way is faster but printing is a mess </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#(because the 2 functions are executed in parallel).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#After finishing, the thread needs to be reinitialized.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Reinintializing threads:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread1 = threading.Thread(target=calculateSquare, args =(numberList,))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread2 = threading.Thread(target=calculateCube, args =(numberList,))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">t2_before = time.time() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#this will get the time before starting the threads.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread1.start()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread2.start()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread1.join() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#wait for the thread1 to finish its work.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">thread2.join() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#wait for the thread2 to finish its work.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">t2_after = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("Example 3: Good threading - time for execution: " </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    + str(t2_after-t2_before) + " seconds.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <green>Multiprocessing in Python:</green>
            <br/><br/>
            By using <azure>multiprocessing</azure> in <red>Python</red> the 
            <purple>Global</purple> <purple>Interpreter</purple> <purple>Lock</purple> limitations can be overcome.
            <br/><br/>
            <azure>Multiprocessing</azure> refers to the ability of a <red>system</red> to support more than 
            one <azure>processor</azure> at the same time. Applications in a <azure>multiprocessing</azure> <red>system</red> 
            are broken to smaller routines that <azure>run</azure> <azure>independently</azure>. The <purple>operating</purple> <red>system</red> 
            <azure>allocates</azure> these <azure>threads</azure> to the <azure>processor</azure> <azure>cores</azure> improving the performance 
            of the <red>system</red>.
            <br/><br/>
            The <code>Pool class</code> in <red>Python's</red> <azure>multiprocessing</azure> <red>module</red> provides 
            convenient means of managing a pool of worker <azure>processes</azure>. It comes with 
            built-in <red>methods</red> that offer <purple>structured</purple> ways to distribute <azure>tasks</azure> 
            among these <azure>processes</azure>.
            <br/><br/>
            The <code>Pool class</code> represents a pool of worker <azure>processes</azure>. It has 
            <red>methods</red> which <azure>allows</azure> 
            <azure>tasks</azure> to be offloaded/distributed to the worker <azure>cores</azure>/<azure>processes</azure> 
            in few different ways. 
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of multiprocessing in Python 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import multiprocessing </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#used for multiprocessing</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import time </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#used for time</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def PrintHello():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    i=0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    while(i&lt;50):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Hello " + str(i))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        time.sleep(0.2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        i+=1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def PrintHi():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    i=0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    while(i&lt;50):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Hi " + str(i))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        time.sleep(0.2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        i+=1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Functions used with ".pool and .map" needs </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#to take an extra argument</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The Python Multiprocessing Pool provides </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#reusable worker processes in Python.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def Funct(n):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    i=0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    while(i&lt;50):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Hello " + str(i))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        time.sleep(0.2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        i+=1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#If the script is being ran standalone:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if __name__ == "__main__":</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    t_before = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p1 = multiprocessing.Process(target=PrintHello, args=())</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p2 = multiprocessing.Process(target=PrintHi, args=())</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p1.start()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p2.start()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p1.join() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#wait for the process to finish</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p2.join() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Wait for the process to finish</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    t_after = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("Example 1. Time for execution: " + str(t_after - t_before))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Executing single process:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    t_before = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p1 = multiprocessing.Process(target=PrintHello, args=())</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p1.start()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p1.join() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#wait for the process to finish</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    t_after = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("Example 2: Without Pooling and Mapping - time for execution: " </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            + str(t_after - t_before))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Pooling and mapping processes:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Functions used for "pooling and mapping" needs to </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#take an extra argument for</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#iteration (how many times to run the same function).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    t_before = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p1 = multiprocessing.Pool()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    p1.map(Funct, range(1)) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#run this function for 1 time.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#The extra argument specifies how many times the </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#function should be runned.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    t_after = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("Example 2: With Pooling and Mapping - time for execution: " </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        + str(t_after - t_before))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    input("Press any key to quit.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></concurrent-programming>
        <namespaces>*General-Programming-Knowledge*
            <br/>
            <green>Namespaces in Python:</green>
            <br/><br/>
            <red>Python</red> <purple>namespaces</purple> are <purple>collections</purple> of different 
            <red>objects</red> that are associated with 
            unique names whose lifespan depends on the <red>scope</red> of a <purple>variable</purple>.
            <br/>
            A <purple>variable</purple> is only available from inside the region it is <azure>created</azure>. 
            This is called <red>scope</red>.
            <br/><br/>
            The <red>scope</red> is a 
            region from where we can access a particular <red>object</red>.
            <br/><br/>
            There are three levels 
            of <red>scopes</red>: built-in (outermost), 
            <purple>global</purple>, and local.
            <br/><br/>
            <brown>Built-in scope:</brown>
            <br/><br/>
            The built-in <red>scope</red> is automatically loaded by <red>Python</red> when you <azure>run</azure> a 
            program or <azure>script</azure>. 
            It contains names that are built into <red>Python</red>, such as 
            keywords, <red>functions</red>, <red>exceptions</red>, 
            and other <purple>attributes</purple>. 
            <br/><br/>
            <brown>Global scope:</brown>
            <br/><br/>
            A <purple>variable</purple> <azure>created</azure> in the main body of the <red>Python</red> 
            <azure>code</azure> is a <purple>global</purple> <purple>variable</purple> and belongs to the <purple>global</purple> <red>scope</red>.
            <purple>Global</purple> <purple>variables</purple> are available from within any <red>scope</red>, 
            <purple>global</purple> and local.
            The <purple>global</purple> keyword makes the <purple>variable</purple> <purple>global</purple>.
            <br/><br/>
            <brown>Local scope:</brown>
            <br/><br/>
            A <purple>variable</purple> <azure>created</azure> inside a <red>function</red> belongs to the local <red>scope</red> 
            of that <red>function</red>, and can only be used inside that <red>function</red>.
            The nonlocal keyword is used to work with <purple>variables</purple> 
            inside nested <red>functions</red>. A nested <red>function</red> is a <red>function</red> defined within a <red>function</red>.
            <br/><br/>
            The nonlocal keyword makes the <purple>variable</purple> belong to the outer <red>function</red>.
            <br/><br/>
            <purple>Variables</purple> are names (<purple>identifiers</purple>) that map to <red>objects</red>. 
            A <purple>namespace</purple> is a <purple>dictionary</purple> of <purple>variable</purple> names (<purple>keys</purple>)
            and their corresponding <red>objects</red> (<purple>values</purple>).
            <br/><br/>
            A <red>Python</red> <azure>statement</azure> can access <purple>variables</purple> in a 
            local <purple>namespace</purple> and in the <purple>global</purple> <purple>namespace</purple>. 
            If a local and a <purple>global</purple> <purple>variable</purple> have the same name,
            the local <purple>variable</purple> shadows the <purple>global</purple> <purple>variable</purple>.
            <br/><br/>
            <red>Python</red> makes educated guesses on whether <purple>variables</purple> are 
            local or <purple>global</purple>. It assumes that any <purple>variable</purple> <purple>assigned</purple> 
            with a <purple>value</purple> within a <red>function</red> is local.
            Therefore, in order to <purple>assign</purple> a <purple>value</purple> to a <purple>global</purple> <purple>variable</purple> 
            within a <red>function</red>, you must first use the <purple>global</purple> specifier.
            <br/><br/>
            Within <red>Python</red> <purple>namespaces</purple> and <red>scopes</red> are in a tight relationship. 
            For example: 
            the <purple>global</purple> <purple>namespace</purple> can be seen as a <purple>collection</purple> of <purple>global</purple> <purple>variables</purple> 
            which have 
            <purple>global</purple> <red>scope</red>, meaning they can be accessed from anywhere in the program. 
            The <purple>global</purple>
            <purple>namespace</purple> contains local <purple>namespaces</purple> for each <red>function</red>/<red>method</red>/<azure>loop</azure> an 
            other entities
            defining local <red>scopes</red>.
            <br/><br/>
            <red>Scope</red> refers to the <azure>coding</azure> region from which a particular <red>Python</red> <red>object</red> 
            is accessible. 
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of namespace and scopes in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#var1 is in the global namespace</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#meaning var1 has global scope:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">var1 = 5</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def some_func():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#var2 is in the local namespace </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#meaning var1 has local scope:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    var2 = 6</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def some_inner_func():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#var3 is in the nested local namespace</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#meaning var3 has nested local scope:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        var3 = 7</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></namespaces>
        <exception-handling>*General-Programming-Knowledge*
            <br/>
            <green>Exception handling in Python:</green>
            <br/><br/>
            An <red>exception</red> is an event, which occurs during the execution of a program 
            that disrupts the normal flow of the program's
            instructions. In general, when a <red>Python</red> <azure>script</azure> encounters a situation 
            that it cannot cope with, it raises an <red>exception</red>.
            <br/><br/>
            An <red>exception</red> is a <red>Python</red> <red>object</red> that represents an error.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of exception handling </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Handling exceptions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example 1:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">try:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    fh = open("file.txt", "a")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    fh.write("This line was added by Python Program.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">except IOError:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print ("Error: can't find file or read \</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        data from {0}" .format(fh.name))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">else:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print ("Written content in the file successfully!")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    fh.close()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example 2:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">try:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    fh = open("file.txt", "r")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    fh.read(12)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">except IOError:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print ("Error: can\'t find file or read data \</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        from {0}" .format(fh.name))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">finally:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print ("Not working!")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Raising an exception:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">level=1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if level &lt; 1:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      raise Exception('level &lt; 1')</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Creating user-defined exception:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example 3:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class MyError(Exception):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     def __init__(self, value):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         self.value = value</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     def __str__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">         return repr(self.value)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Catching user-defined exceptions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">try:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    raise MyError(2*2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">except MyError as e:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     print ("My exception occurred, value: \</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {0}" .format (e.value))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            <br/>
            <green>Python Exceptions:</green>
            <br/><br/>
            <code>Exception</code><br/>
            <red>Base</red> <red>class</red> for all <red>exceptions</red>.
            <br/><br/>
            <code>StopIteration</code><br/>
            Raised when the <code>next()</code> <red>method</red> of an iterator does not 
            <purple>point</purple> to any <red>object</red>.
            <br/><br/>
            <code>SystemExit</code><br/>
            Raised by the <code>sys.exit()</code> <red>function</red>.
            <br/><br/>
            <code>StandardError</code><br/>
            <red>Base</red> <red>class</red> for all built-in <red>exceptions</red> except <code>StopIteration</code> 
            and <code>SystemExit</code>.
            <br/><br/>
            <code>ArithmeticError</code><br/>
            <red>Base</red> <red>class</red> for all errors that occur for numeric calculation.
            <br/><br/>
            <code>OverflowError</code><br/>
            Raised when a calculation exceeds maximum limit for a numeric <purple>type</purple>.
            <br/><br/>
            <code>FloatingPointError</code><br/>
            Raised when a <purple>floating</purple> <purple>point</purple> calculation fails.
            <br/><br/>
            <code>ZeroDivisionError</code><br/>
            Raised when division or modulo by zero takes place for all numeric <purple>types</purple>.
            <br/><br/>
            <code>AssertionError</code><br/>
            Raised in case of failure of the Assert <azure>statement</azure>.
            <br/><br/>
            <code>AttributeError</code><br/>
            Raised in case of failure of <purple>attribute</purple> <purple>reference</purple> or assignment.
            <br/><br/>
            <code>EOFError</code><br/>
            Raised when there is no input from either the <code>raw_input()</code> or 
            <code>input()</code> <red>function</red> and the end of <purple>file</purple> is reached.
            <br/><br/>
            <code>ImportError</code><br/>
            Raised when an import <azure>statement</azure> fails.
            <br/><br/>
            <code>KeyboardInterrupt</code><br/>
            Raised when the user interrupts program execution, usually by pressing 
            Ctrl+C.
            <br/><br/>
            <code>LookupError</code><br/>
            <red>Base</red> <red>class</red> for all lookup errors.
            <br/><br/>
            <code>IndexError</code><br/>
            Raised when an index is not found in a <azure>sequence</azure>.
            <br/><br/>
            <code>KeyError</code><br/>
            Raised when the specified <purple>key</purple> is not found in the <purple>dictionary</purple>.
            <br/><br/>
            <code>NameError</code><br/>
            Raised when an <purple>identifier</purple> is not found in the local or <purple>global</purple> <purple>namespace</purple>.
            <br/><br/>
            <code>UnboundLocalError</code><br/>
            Raised when trying to access a local <purple>variable</purple> in a <red>function</red> or <red>method</red> but 
            no <purple>value</purple> has been <purple>assigned</purple> to it.
            <br/><br/>
            <code>EnvironmentError</code><br/>
            Same as above
            <br/><br/>
            <code>IOError</code><br/>
            Raised when an input/output <purple>operation</purple> fails, such as the print 
            <azure>statement</azure> or the <code>open()</code> <red>function</red> when trying to <azure>open</azure>
            a <purple>file</purple> that does not exist.
            <br/><br/>
            <code>IOError</code><br/>
            Same as above.
            <br/><br/>
            <code>SyntaxError</code><br/>
            Raised when there is an error in <red>Python</red> syntax.
            <br/><br/>
            <code>IndentationError</code><br/>
            Raised when indentation is not specified properly.
            <br/><br/>
            <code>SystemError</code><br/>
            Raised when the interpreter finds an internal problem, but when 
            this error is encountered the <red>Python</red> interpreter does not exit.
            <br/><br/>
            <code>SystemExit</code><br/>
            Raised when <red>Python</red> interpreter is quit by using the <code>sys.exit()</code> 
            <red>function</red>. If not handled in the <azure>code</azure>, causes the interpreter to exit.
            <br/><br/>
            <code>TypeError</code><br/>
            Raised when an <purple>operation</purple> or <red>function</red> is attempted that is invalid 
            for the specified <purple>data</purple> <purple>type</purple>.
            <br/><br/>
            <code>ValueError</code><br/>
            Raised when the built-in <red>function</red> for a <purple>data</purple> <purple>type</purple> has the valid 
            <purple>type</purple> of <red>arguments</red>, but the <red>arguments</red> have invalid <purple>values</purple> specified.
            <br/><br/>
            <code>RuntimeError</code><br/>
            Raised when a generated error does not fall into any category.
            <br/><br/>
            <code>NotImplementedError</code><br/>
            Raised when an <azure>abstract</azure> <red>method</red> that needs to be <red>implemented</red> in an 
            <red>inherited</red> <red>class</red> is not actually <red>implemented</red>.
            <br/></exception-handling>
        <bitwise-operators>*General-Programming-Knowledge*
            <br/>
            <brown>Python bitwise operators work only on integers.</brown>
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of using bitwise </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#operators in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">a=60</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">b=13</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("a:",a, "b:",b, "a&amp;b:",a&amp;b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("a:",a, "b:",b, "a|b:",a|b)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("a:", bin(a))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("b:", bin(b))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#OUTPUT:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#a: 60 b: 13 a&amp;b: 12</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#a: 60 b: 13 a|b: 61</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#a: 0b111100</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#b: 0b1101</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></bitwise-operators>
        <default-parameters>*General-Programming-Knowledge*
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of default arguments/parameters</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Function with one default argument:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def PrintFunct (str="Default argument"):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print(str)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("This is PrintFunct: {0}" .format(PrintFunct()))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The function PrintFunct() from the print above </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#is called using default argument (no value is passed).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#when a function that uses more default arguments,</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#the variable name can be used to specify in</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#which variable the passed value should be stored.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def PrintFunct2 (str="Default argument", str2="Default argument2"):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("{0} + {1}" .format(str, str2))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("Calling PrintFunct2: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">PrintFunct2(str="First String")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></default-parameters>
        <interfaces>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of interface in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class PdfParser(TextExtractor):  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#This PdfParser will act as an interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def load_data_source(self, path: str, file_name: str) -&gt; str:  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#pass keyword specified that the  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#implementation will be added at later stage </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        pass  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def extract_text(self, file_path):  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#pass keyword specified that the  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#implementation will be added at later stage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        pass  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class EmlParser(TextExtractor):  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">     </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#This EmlParser will also act as an interface</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def load_data_source(self, path: str, file_name: str) -&gt; str:  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#pass keyword specified that the  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#implementation will be added at later stage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        pass  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def extract_email_text(self, file_path):  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#pass keyword specified that the  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#implementation will be added at later stage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        pass  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#the implementation in both interfaces will be added</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#at a later stage.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></interfaces>
        <random-generators>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of random generator in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from random import randint</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def RandomGenerator():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Getting a random number between 0 and 100</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    choice = randint(0, 100)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Printing the choice:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("The random number is: " + str(choice))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Calling the function:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">RandomGenerator()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("Press any key to quit.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></random-generators>
        <command-line-arguments>*General-Programming-Knowledge*
            <br/>
            <green>Command line arguments in Python:</green>
            <br/><br/>
            In <red>Python</red>: the <code>sys</code> <red>module</red> provides <red>functions</red> and <purple>variables</purple> 
            used to <azure>manipulate</azure> different parts of the <red>Python</red> <purple>Runtime</purple> <purple>Environment</purple>. 
            <br/><br/>
            This <red>module</red> also provides access to some <purple>variables</purple> used or <azure>maintained</azure> by the 
            <red>Python</red> Interpreter that <azure>allows</azure> direct interaction with it.
            <br/><br/>
            One such <purple>variable</purple> is <code>sys.argv</code> which is a <purple>list</purple>
            <azure>storing</azure> the name of the <azure>script</azure> <purple>file</purple> and the command line <red>arguments</red>:
            <br/>
            - <code>len(sys.argv)</code> provides the number of command line <red>arguments</red>.
            <br/>
            - <code>sys.argv[0]</code> is the name of the current <red>Python</red> <azure>script</azure>. 
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of working with command line</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#arguments in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import sys</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#when the script is being ran from this file do this, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#otherwise it means the file was imported by other </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#module and the statements in here should be ignored.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if __name__ == "__main__":</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#there is always gonna be at least one element in </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#sys.argv array. At index 0 is always stored the name </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#of the file.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if len(sys.argv) &gt; 1: </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("The script has the name "  + str(sys.argv[0]))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print ("The arguments which were passed are: " + str(sys.argv[1:]))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></command-line-arguments>
        <ternary-operator>*General-Programming-Knowledge*
            <green>Ternary operator in Python:</green>
            <br/><br/>
            <red>Python</red> modifies the syntax for using <purple>ternary</purple> <purple>operator</purple> by <azure>adding</azure> 
            keywords instead
            of <purple>operators</purple>. This increases <azure>readability</azure>:<br/>
            <code>?</code> <purple>operator</purple> is <azure>replaced</azure> by <code>if</code> keyword;<br/>
            <code>:</code> <purple>operator</purple> is <azure>replaced</azure> by <code>else</code> keyword;<br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of ternary operator in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">a = 10</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">b = 20</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#ternary operator</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">min = "a is minimum" if a &lt; b else "b is minimum"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(min)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></ternary-operator>
        <modular-programming>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of modular programming in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#FILE: module_with_functions.py</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#This is a module (any .py file can be a module).</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#These are the functions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def print_func( par ):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   print ("Hello : {0} " .format(par))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   return</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def CalculateSum (*Args):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    sum=0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for item in Args:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        sum+=item</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return sum</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>        

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of modular programming in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#FILE: file_working.py</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The next line will set the filepath:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">PYTHONPATH=r'C:\Users\Black2\Desktop\python\modular programming in python'</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The next line will import a specific module:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import module_with_functions</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Calling a function from the imported the module:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">module_with_functions.print_func("Hello")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("Sum of {0} and {1} is: {2}" .format(4,10, \</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    module_with_functions.CalculateSum(4,10)))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#There is possible to import a single function </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#from the whole module by using the following syntax:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from module_with_functions import print_func</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The effect is here: the fuction can be called without </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#mentioning the module, whereas in the example above it couldn't.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print_func("Python")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#The following syntax will import anything </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#from the mentioned module:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from module_with_functions import *</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("{0}+{1}={2}" .format(3,4,CalculateSum(3,4)))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Once again there was no need of mentioning </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#the module name when calling for CalculateSum()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></modular-programming>
        <string-methods><green>String methods in Python:</green>
            <br/><br/>
            <red>Python</red> has a <purple>set</purple> of built-in <red>methods</red> that you can use on <purple>strings</purple>.
            <br/><br/>
            All <purple>string</purple> <red>methods</red> <purple>returns</purple> new <purple>values</purple>. They do not change
            the original <purple>string</purple>.
            <br/><br/>
            <code>capitalize()</code><br/>
            Converts the first <purple>character</purple> to upper case.
            <br/><br/>
            <code>casefold()</code><br/>
            Converts <purple>string</purple> into lower case.
            <br/><br/>
            <code>center()</code><br/>
            <purple>Returns</purple> a centered <purple>string</purple>.
            <br/><br/>
            <code>count()</code><br/>
            <purple>Returns</purple> the number of times a specified <purple>value</purple> occurs in a <purple>string</purple>.
            <br/><br/>
            <code>encode()</code><br/>
            <purple>Returns</purple> an encoded version of the <purple>string</purple>.
            <br/><br/>
            <code>endswith()</code><br/>
            <purple>Returns</purple> <purple>true</purple> if the <purple>string</purple> ends with the specified <purple>value</purple>.
            <br/><br/>
            <code>expandtabs()</code><br/>
            <purple>Sets</purple> the tab <purple>size</purple> of the <purple>string</purple>.
            <br/><br/>
            <code>find()</code><br/>
            <azure>Searches</azure> the <purple>string</purple> for a specified <purple>value</purple> and <purple>returns</purple> the position 
            of where it was found.
            <br/><br/>
            <code>format()</code><br/>
            Formats specified <purple>values</purple> in a <purple>string</purple>.
            <br/><br/>
            <code>format_map()</code><br/>
            Formats specified <purple>values</purple> in a <purple>string</purple>.
            <br/><br/>
            <code>index()</code><br/>
            <azure>Searches</azure> the <purple>string</purple> for a specified <purple>value</purple> and <purple>returns</purple> the position 
            of where it was found.
            <br/><br/>
            <code>salnum()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are alphanumeric.
            <br/><br/>
            <code>salpha()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are in the alphabet.
            <br/><br/>
            <code>isascii()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are ascii <purple>characters</purple>.
            <br/><br/>
            <code>isdecimal()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are decimals.
            <br/><br/>
            <code>isdigit()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are digits.
            <br/><br/>
            <code>isidentifier()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if the <purple>string</purple> is an <purple>identifier</purple>.
            <br/><br/>
            <code>islower()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are lower case.
            <br/><br/>
            <code>isnumeric()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are numeric.
            <br/><br/>
            <code>isprintable()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are printable.
            <br/><br/>
            <code>isspace()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are whitespaces.
            <br/><br/>
            <code>istitle()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if the <purple>string</purple> follows the rules of a title.
            <br/><br/>
            <code>isupper()</code><br/>
            <purple>Returns</purple> <purple>True</purple> if all <purple>characters</purple> in the <purple>string</purple> are upper case.
            <br/><br/>
            <code>join()</code><br/>
            Converts the elements of an <purple>iterable</purple> into a <purple>string</purple>.
            <br/><br/>
            <code>ljust()</code><br/>
            <purple>Returns</purple> a left justified version of the <purple>string</purple>.
            <br/><br/>
            <code>lower()</code><br/>
            Converts a <purple>string</purple> into lower case.
            <br/><br/>
            <code>lstrip()</code><br/>
            <purple>Returns</purple> a left trim version of the <purple>string</purple>.
            <br/><br/>
            <code>maketrans()</code><br/>
            <purple>Returns</purple> a translation table to be used in translations.
            <br/><br/>
            <code>partition()</code><br/>
            <purple>Returns</purple> a <purple>tuple</purple> where the <purple>string</purple> is parted into three parts.
            <br/><br/>
            <code>replace()</code><br/>
            <purple>Returns</purple> a <purple>string</purple> where a specified <purple>value</purple> is <azure>replaced</azure> with a specified <purple>value</purple>.
            <br/><br/>
            <code>rfind()</code><br/>
            <azure>Searches</azure> the <purple>string</purple> for a specified <purple>value</purple> and <purple>returns</purple> the last position of 
            where it was found.
            <br/><br/>
            <code>rindex()</code><br/>
            <azure>Searches</azure> the <purple>string</purple> for a specified <purple>value</purple> and <purple>returns</purple> the last 
            position of where it was found.
            <br/><br/>
            <code>rjust()</code><br/>
            <purple>Returns</purple> a right justified version of the <purple>string</purple>.
            <br/><br/>
            <code>rpartition()</code><br/>
            <purple>Returns</purple> a <purple>tuple</purple> where the <purple>string</purple> is parted into three parts.
            <br/><br/>
            <code>rsplit()</code><br/>
            Splits the <purple>string</purple> at the specified separator, and <purple>returns</purple> a <purple>list</purple>.
            <br/><br/>
            <code>rstrip()</code><br/>
            <purple>Returns</purple> a right trim version of the <purple>string</purple>.
            <br/><br/>
            <code>split()</code><br/>
            Splits the <purple>string</purple> at the specified separator, and <purple>returns</purple> a <purple>list</purple>.
            <br/><br/>
            <code>splitlines()</code><br/>
            Splits the <purple>string</purple> at line <purple>breaks</purple> and <purple>returns</purple> a <purple>list</purple>.
            <br/><br/>
            <code>startswith()</code><br/>
            <purple>Returns</purple> <purple>true</purple> if the <purple>string</purple> <azure>starts</azure> with the specified <purple>value</purple>.
            <br/><br/>
            <code>strip()</code><br/>
            <purple>Returns</purple> a trimmed version of the <purple>string</purple>.
            <br/><br/>
            <code>swapcase()</code><br/>
            Swaps cases, lower case becomes upper case and vice versa.
            <br/><br/>
            <code>title()</code><br/>
            Converts the first <purple>character</purple> of each word to upper case.
            <br/><br/>
            <code>translate()</code><br/>
            <purple>Returns</purple> a translated <purple>string</purple>.
            <br/><br/>
            <code>upper()</code><br/>
            <purple>Returns</purple> a <purple>string</purple> into upper case.
            <br/><br/>
            <code>zfill()</code><br/>
            Fills the <purple>string</purple> with a specified number of 0 <purple>values</purple> at the beginning.
            <br/></string-methods>
        <datatype-conversions>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Converting integers to float:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># initializing string</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">s = "10010"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># printing string converting to int base 2</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c = int(s,2)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("After converting to integer base 2 : ", end="")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># printing string converting to float</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">e = float(s)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("After converting to float : ", end="")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (e)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Type conversion using hex(), ord(), orct():</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#initializing integer</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">s = '4'</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#printing character converting to integer</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c = ord(s)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("After converting character to integer : ",end="")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#printing integer converting to hexadecimal string</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c = hex(56)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("After converting 56 to hexadecimal string : ",end="")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#printing integer converting to octal string</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c = oct(56)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("After converting 56 to octal string : ",end="")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Type conversion using tuple(), set(), list():</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># initializing string</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">s = 'python'</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># printing string converting to tuple</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c = tuple(s)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("After converting string to tuple : ",end="")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># printing string converting to set</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c = set(s)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("After converting string to set : ",end="")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"> </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment># printing string converting to list</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">c = list(s)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("After converting string to list : ",end="")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print (c)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></datatype-conversions>
        <decorators>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of decorators in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import time</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def measure_time(fct):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if hasattr(fct, 'call_number') == False:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fct.call_number = 1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fct.call_time = 0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("Decorator call.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def proxy():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Proxy call.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        t = time.time()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fct()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fct.call_time += time.time() - t</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Function " + str(fct.__name__) + " : has executed within : " + str(time.time() - t))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Function calls " + str(fct.call_number))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Average duration: " + str(fct.call_time / fct.call_number))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        fct.call_number += 1</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return proxy</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#measure_time it's a decorator. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">@measure_time <comment>#this is equivalent to function = measure_time(function)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def function():</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    time.sleep(0.5)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    print("the function is executing.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">function()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></decorators>
        <optional-parameters>*General-Programming-Knowledge*</optional-parameters>
        <operators>*General-Programming-Knowledge*</operators>
        <abstract-classes>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of abstract classes and methods</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#FILE: program19 abstract classes and static functions.py</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from p19_abs_class import PUNCT as abstract, PUNCT</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#p = PUNCT()</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#instantiation cannot be done on abstract classes</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class LINE(PUNCT):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def abstract_method(self): </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#providing definition for abstract parent method</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("Abstract method is now redefined")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#creating static methods:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#the following method will be static. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Static methods are shared amongst all instances.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    @staticmethod </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def staticMe(): </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#static methods don't take self as argument</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print("\nThis is a static method\nAll " + \</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            "instances of the class share same method")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">l = LINE()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">l.abstract_method()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">l.staticMe()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#static methods can be invoked only with the class name</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">LINE.staticMe()</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress ENTER to exit.")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>

<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of abstract classes and methods</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#FILE: p19_abs_class.py</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">from abc import abstractmethod, ABC  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#importing this to be able to create </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#abstact methods</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">class PUNCT(ABC): <comment>#PUNCT will be abstract</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#constructor</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def __init__(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.x=0 <comment>#non-static field</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        self.y=0 <comment>#non-static field</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#the following decorator will make </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#the following method abstract:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    @abstractmethod </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    def abstract_method(self):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        pass </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#pass means implementation </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>#will to be provided later</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></abstract-classes>
        <pre-post-incrementation>In <red>Python</red>, the <code>++</code> <purple>increment</purple> <purple>operator</purple> does not exist.
            <br/>
            In order to <purple>increment</purple> a <purple>variable</purple> <code>+=</code> <purple>operator</purple> is being used.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of incrementing in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Initializing a variable </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x = 5</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Incrementing the variable by 1 </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Equivalent to x = x + 1 </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">x += 1 </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Displaying the result </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("Incremented value:", x) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></pre-post-incrementation>
        <regular-expressions>A <azure>regular</azure> <azure>expression</azure> is a special <azure>sequence</azure> of <purple>characters</purple> that helps 
            <azure>matching</azure> or finding other <purple>strings</purple> or <purple>sets</purple> of 
            <purple>strings</purple>, using a specialized syntax held in a pattern.
            <br/><br/>
            <green>Regular expressions in Python:</green>
            <br/><br/>
            The <red>re</red> <red>module</red> offers a <purple>set</purple> of <red>functions</red> that <azure>allow</azure> working with 
            <azure>regular</azure> <azure>expressions</azure>:
            <br/><br/>
            The <code>match()</code> <red>function</red> attempts to <azure>match</azure> <red>RE</red> (<azure>Regular</azure> <azure>Expression</azure>) 
            pattern to <purple>string</purple> with optional flags.
            <br/>
            It <purple>returns</purple> a <azure>match</azure> <red>object</red> on success, 
            <code>None</code> on failure. 
            <br/>
            The <code>search()</code> <red>function</red> <azure>searches</azure> for first occurrence of 
            <red>RE</red> pattern within <purple>string</purple> with optional flags.
            <br/>
            The <code>match()</code> checks for a <azure>match</azure> only at the beginning of the <purple>string</purple>, while 
            <code>search()</code> checks for a <azure>match</azure> anywhere in the <purple>string</purple>.
            <br/>
            The <code>sub()</code> <red>function</red> <azure>replaces</azure> all occurrences of the pattern in the 
            <purple>string</purple> with <code>repl</code>.
            <br/><br/>
            <brown>The match() function:</brown>
            <br/><br/>
            Syntax: <code>re.match(pattern, string, flags=0)</code> where:
            <br/><br/>
            <code>pattern</code><br/>
            This is the <azure>regular</azure> <azure>expression</azure> to be <azure>matched</azure>.
            <br/><br/>
            <code>string</code><br/>
            This is the <purple>string</purple>, which would be <azure>searched</azure> to <azure>match</azure> the pattern 
            at the beginning of <purple>string</purple>.
            <br/><br/>
            <code>flags</code><br/>
            You can specify different flags using <purple>bitwise</purple> OR (<code>|</code>). 
            <br/><br/>
            <brown>The sub() function:</brown>
            <br/><br/>
            Syntax: <code>re.sub(pattern, repl, string, count=0, flags=0)</code> where:
            <br/><br/>
            <code>pattern</code><br/>
            Denotes the <purple>string</purple>/pattern that needs to be <azure>replaced</azure>.
            <br/><br/>
            <code>repl</code><br/>
            Denotes the <purple>string</purple>/pattern with which the pattern is <azure>replaced</azure>.
            <br/><br/>
            <code>string</code><br/>
            Denotes the <purple>string</purple> on which the <code>re.sub()</code> <purple>operation</purple> will 
            be executed.
            <br/><br/>
            <code>count</code><br/>
            Denotes the number of replacements that should occur.
            <br/><br/>
            <code>flags</code><br/>
            Serves to modify the behavior of the <azure>regular</azure> <azure>expression</azure> <purple>operation</purple>.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of working with regular expresions</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">import re </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#This library is used for</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#regular expressions (re)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">line = "Cats are smarter than dogs"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#find something at the beginning of the string and </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#return a match object.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if matchObj:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   print ("matchObj.group() : {0}" .format(matchObj.group()))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   print ("matchObj.group(1) : {0}" .format (matchObj.group(1)))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   print ("matchObj.group(2) : {0}" .format(matchObj.group(2)))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">else:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   print ("No match!!")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">matchObj = re.match( "Cats", line, 0)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if matchObj:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   print ("matchObj.group() : {0}" .format(matchObj.group()))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   <comment>#print ("matchObj.group(1) : {0}" .format(matchObj.group(1)))</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   <comment>#print ("matchObj.group(2) : {0}" .format(matchObj.group(2)))</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">else:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   print ("No match!!")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">searchObj = re.search( r'dogs*', line, re.M|re.I) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#re* -&gt; Matches 0 or more occurrences of preceding expression.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if searchObj:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   print ("searchObj.group() : {0}" .format(searchObj.group()))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   <comment>#print ("searchObj.group(1) : {0}" .format (searchObj.group(1)))</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   <comment>#print ("searchObj.group(2) : {0}" .format(searchObj.group(2)))</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">else:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">   print ("No match!!")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">phone = "2004-959-559"</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#This is Phone Number"</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Delete Python-style comments</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">num = re.sub(r'<comment>#.*$', "", phone)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("Phone Num : {0}" .format(num))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Remove anything other than digits</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">num = re.sub(r'\D', "", phone)    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print ("Phone Num : {0}" .format(num))</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">input("\nPress any key to exit: ")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>   
            <br/>
            <green>Regular expressions available in Python:</green>
            <br/><br/>
            <code>^</code><code>           </code>
            <azure>Matches</azure> beginning of line.
            <br/><br/>
            <code>$</code><code>           </code>
            <azure>Matches</azure> end of line.
            <br/><br/>
            <code>.</code><code>           </code>
            <azure>Matches</azure> any single <purple>character</purple> except <purple>newline</purple>.
            Using <code>m</code> option <azure>allows</azure> it to <azure>match</azure> <purple>newline</purple> as well.
            <br/><br/>
            <code>[...]</code><code>       </code>
            <azure>Matches</azure> any single <purple>character</purple> in brackets.
            <br/><br/>
            <code>[^...]</code><code>      </code>
            <azure>Matches</azure> any single <purple>character</purple> not in brackets.
            <br/><br/>
            <code>re*</code><code>         </code>
            <azure>Matches</azure> 0 or more occurrences of preceding expression.
            <br/><br/>
            <code>re+</code><code>         </code>
            <azure>Matches</azure> 1 or more occurrence of preceding expression.
            <br/><br/>
            <code>re?</code><code>         </code>
            <azure>Matches</azure> 0 or 1 occurrence of preceding expression.
            <br/><br/>
            <code>re{ n}</code><code>      </code>
            <azure>Matches</azure> exactly <code>n</code> number of occurrences of preceding expression.
            <br/><br/>
            <code>re{ n,}</code><code>     </code>
            <azure>Matches</azure> <code>n</code> or more occurrences of preceding expression.
            <br/><br/>
            <code>re{ n, m}</code><code>   </code>
            <azure>Matches</azure> at least <code>n</code> and at most <code>m</code> occurrences 
            of preceding expression.
            <br/><br/>
            <code>a| b</code><code>        </code>
            <azure>Matches</azure> either <code>a</code> or <code>b</code>.
            <br/><br/>
            <code>(re)</code><code>        </code>
            Groups <azure>regular</azure> <azure>expressions</azure> and remembers <azure>matched</azure> text.
            <br/><br/>
            <code>(?imx)</code><code>      </code>
            Temporarily toggles on <code>i</code>, <code>m</code>, or <code>x</code> 
            options within a <azure>regular</azure> <azure>expression</azure>. 
            If in parentheses, only that area is affected.
            <br/><br/>
            <code>(?-imx)</code><code>     </code>
            Temporarily toggles off <code>i</code>, <code>m</code>, or <code>x</code>  options 
            within a <azure>regular</azure> <azure>expression</azure>. 
            If in parentheses, only that area is affected.
            <br/><br/>
            <code>(?: re)</code><code>     </code>
            Groups <azure>regular</azure> <azure>expressions</azure> without remembering <azure>matched</azure> text.
            <br/><br/>
            <code>(?imx: re)</code><code>  </code>
            Temporarily toggles on <code>i</code>, <code>m</code>, or <code>x</code> options 
            within parentheses.
            <br/><br/>
            <code>(?-imx: re)</code><code> </code>
            Temporarily toggles off <code>i</code>, <code>m</code>, or <code>x</code> options 
            within parentheses.
            <br/><br/>
            <code>(?</code><code>#</code><code>...)</code><code>      </code><azure>Comment</azure>.
            <br/><br/>
            <code>(?= re)</code><code>     </code>
            Specifies position using a pattern. Doesn't have a range.
            <br/><br/>
            <code>(?! re)</code><code>     </code>
            Specifies position using pattern negation. Doesn't have a range.
            <br/><br/>
            <code>(?&gt; re)</code><code>     </code>
            <azure>Matches</azure> <azure>independent</azure> pattern without backtracking.
            <br/><br/>
            <code>\w</code><code>          </code>
            <azure>Matches</azure> word <purple>characters</purple>.
            <br/><br/>
            <code>\W</code><code>          </code>
            <azure>Matches</azure> nonword <purple>characters</purple>.
            <br/><br/>
            <code>\s</code><code>          </code>
            <azure>Matches</azure> whitespace. Equivalent to <code>[\t\n\r\f]</code>.
            <br/><br/>
            <code>\S</code><code>          </code>
            <azure>Matches</azure> nonwhitespace.
            <br/><br/>
            <code>\d</code><code>          </code>
            <azure>Matches</azure> digits. Equivalent to <code>[0-9]</code>.
            <br/><br/>
            <code>\D</code><code>          </code>
            <azure>Matches</azure> nondigits.
            <br/><br/>
            <code>\A</code><code>          </code>
            <azure>Matches</azure> beginning of <purple>string</purple>.
            <br/><br/>
            <code>\Z</code><code>          </code>
            <azure>Matches</azure> end of <purple>string</purple>. If a <purple>newline</purple> exists, it <azure>matches</azure> just 
            before <purple>newline</purple>.
            <br/><br/>
            <code>\z</code><code>          </code>
            <azure>Matches</azure> end of <purple>string</purple>.
            <br/><br/>
            <code>\G</code><code>          </code>
            <azure>Matches</azure> <purple>point</purple> where last <azure>match</azure> finished.
            <br/><br/>
            <code>\b</code><code>          </code>
            <azure>Matches</azure> word boundaries when outside brackets. 
            <azure>Matches</azure> backspace <code>(0x08)</code> when inside brackets.
            <br/><br/>
            <code>\B</code><code>          </code>
            <azure>Matches</azure> nonword boundaries.
            <br/><br/>
            <code>\n</code>, <code>\t</code><code>       </code>
            <azure>Matches</azure> <purple>newlines</purple>, carriage <purple>returns</purple>, tabs, etc.
            <br/><br/>
            <code>\1...\9</code><code>     </code>
            <azure>Matches</azure> nth grouped subexpression.
            <br/><br/>
            <code>\10</code><code>         </code>
            <azure>Matches</azure> nth grouped subexpression if it <azure>matched</azure> already.
            Otherwise refers to the octal representation of a <purple>character</purple> <azure>code</azure>.
            <br/><br/>

            <brown>Option flags:</brown>
            <br/><br/>
            <code>re.I</code><code>      </code>
            Performs case-insensitive <azure>matching</azure>.
            <br/><br/>
            <code>re.L</code><code>      </code> Interprets words according to the current locale. 
            This interpretation affects the alphabetic group (<code>\w</code> and <code>\W</code>), 
            as well as word boundary behavior (<code>\b</code> and <code>\B</code>).
            <br/><br/>
            <code>re.M</code><code>      </code>
            Makes <code>$</code> <azure>match</azure> the end of a line (not just the end of the <purple>string</purple>).
            <br/>
            Also makes <code>^</code> <azure>match</azure> the <azure>start</azure> of any line 
            (not just the <azure>start</azure> of the <purple>string</purple>).
            <br/><br/>
            <code>re.S</code><code>      </code>
            Makes a period (dot) <azure>match</azure> any <purple>character</purple>, including a <purple>newline</purple>.
            <br/><br/>
            <code>re.U</code><code>      </code>
            Interprets letters according to the Unicode <purple>character</purple> <purple>set</purple>. 
            This flag affects the behavior of <code>\w</code>, <code>\W</code>, 
            <code>\b</code>, <code>\B</code>.
            <br/><br/>
            <code>re.X</code><code>      </code>
            Permits "cuter" <azure>regular</azure> <azure>expression</azure> syntax. It ignores whitespace 
            (except inside a <purple>set</purple> <code>[]</code> or when escaped by a backslash) 
            and treats unescaped <code>#</code> as a <azure>comment</azure> marker.
            <br/><br/>

            <brown>Character classes:</brown>
            <br/><br/>
            <code>[Pp]ython</code><code>      </code><azure>Match</azure> <code>"Python"</code> or 
            <code>"python"</code>.
            <br/><br/>
            <code>rub[ye]</code><code>        </code><azure>Match</azure> <code>"ruby"</code> or 
            <code>"rube"</code>.
            <br/><br/>
            <code>[aeiou]</code><code>        </code><azure>Match</azure> any one lowercase vowel.
            <br/><br/>
            <code>[0-9]</code><code>          </code><azure>Match</azure> any digit - same as 
            <code>[0123456789]</code>.
            <br/><br/>
            <code>[a-z]</code><code>          </code><azure>Match</azure> any lowercase ASCII letter.
            <br/><br/>
            <code>[A-Z]</code><code>          </code><azure>Match</azure> any uppercase ASCII letter.
            <br/><br/>
            <code>[a-zA-Z0-9]</code><code>    </code><azure>Match</azure> any of the above.
            <br/><br/>
            <code>[^aeiou]</code><code>       </code><azure>Match</azure> anything other than a lowercase vowel.
            <br/><br/>
            <code>[^0-9]</code><code>         </code><azure>Match</azure> anything other than a digit.
            <br/><br/>

            <brown>Special Character Classes:</brown>
            <br/><br/>
            <code>.</code><code>       </code><azure>Match</azure> any <purple>character</purple> except <purple>newline</purple>.
            <br/><br/>
            <code>\d</code><code>      </code><azure>Match</azure> a digit: <code>[0-9]</code>.
            <br/><br/>
            <code>\D</code><code>      </code><azure>Match</azure> a nondigit: <code>[^0-9]</code>.
            <br/><br/>
            <code>\s</code><code>      </code><azure>Match</azure> a whitespace <purple>character</purple>: <code>[ \t\r\n\f]</code>.
            <br/><br/>
            <code>\S</code><code>      </code><azure>Match</azure> nonwhitespace: <code>[^ \t\r\n\f]</code>.
            <br/><br/>
            <code>\w</code><code>      </code><azure>Match</azure> a single word <purple>character</purple>: <code>[A-Za-z0-9_]</code>.
            <br/><br/>
            <code>\W</code><code>      </code><azure>Match</azure> a nonword <purple>character</purple>: <code>[^A-Za-z0-9_]</code>.
            <br/><br/>

            <brown>Repetition Cases:</brown>
            <br/><br/>
            <code>ruby?</code><code>      </code><azure>Match</azure> <code>"rub"</code> or <code>"ruby"</code>: the 
            <code>y</code> is optional.
            <br/><br/>
            <code>ruby*</code><code>      </code><azure>Match</azure> <code>"rub"</code> plus 0 or more 
            <code>y</code>'s.
            <br/><br/>
            <code>ruby+</code><code>      </code><azure>Match</azure> <code>"rub"</code> plus 1 or more 
            <code>y</code>'s.
            <br/><br/>
            <code>\d{3}</code><code>      </code><azure>Match</azure> exactly 3 digits.
            <br/><br/>
            <code>\d{3,}</code><code>     </code><azure>Match</azure> 3 or more digits.
            <br/><br/>
            <code>\d{3,5}</code><code>    </code><azure>Match</azure> 3, 4, or 5 digits.
            <br/><br/></regular-expressions>
        <recursion>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of recursion in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def try_recursion(k):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if(k&gt;0):</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        result = k+try_recursion(k-1)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        print(result)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else:</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        result = 0</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return result</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print("\n\nRecursion Example Results")</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">try_recursion(6)</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></recursion>
        <reflection>*General-Programming-Knowledge*
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of reflection in Python:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">def reverse(sequence):  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    sequence_type = type(sequence)  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    empty_sequence = sequence_type()  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if sequence == empty_sequence:  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return empty_sequence  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    rest = reverse(sequence[1:])  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    first_sequence = sequence[0:1]  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>#Combine the result  </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    final_result = rest + first_sequence </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">      </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return final_result  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(reverse([10, 20, 30, 40]))  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">print(reverse("Reflection in Python"))  </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></reflection>
        <lambda-anonymous-functions><green>Lambda/Anonymous Functions in Python:</green>
            <br/><br/>
            In <red>Python</red> the <red>functions</red> declared using the 
            <azure>lambda</azure> keyword are called anonymous 
            because they are declared with a no-name within in a single line.
            <br/>
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>#Example of lambda/anonymous functions:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">sum = lambda arg1, arg2: arg1 + arg2; </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code></lambda-anonymous-functions>
    </manifest>
    <manifest>
        <name>AutoSAR</name>
        <description><green>What is an ECU?</green>
            <br/><br/>
            The <azure>ECU</azure> also known as the <red>Electronic</red> <red>Control</red> <red>Unit</red> or as some refer to as “Engine Control Units” (<red>Electronic</red> <red>Control</red> <red>Unit</red> 
            is actual correct term) is a <red>computer</red> within  a vehicle that controls how other components work.  In a nutshell it is a 
            <red>computer</red> with software installed and this software can be <purple>removed</purple>, changed, upgraded just like any other <red>computer</red>.
            <br/><br/>
            <img class="database_image" src="./website_resources/local/database/pictures/ecu.png" alt="ecu picture"/>
            <br/><br/>
            It has input sensors where information about the <red>car</red> is sent back to the <azure>ECU</azure> and output sensors to send information 
            out to the components to tell them how to behave.  
            <br/><br/>
            If the <red>car</red> was a human, the <azure>ECU</azure> would be the brain, it has input 
            sensors (nerves) telling the brain information about where our parts of body are (for example if we are in an 
            uncomfortable position), but also has output sensors to tell the body what to do (for example moving our legs into a 
            more comfortable position). 
            <br/><br/>
            A <red>concrete</red> example of how an <azure>ECU</azure> <purple>operates</purple> in a vehicle would be controlling the fuelling into the engine.  
            The <azure>ECU</azure> would receive information about how much fuel is entering the chamber of the engine and will send out 
            instructions to reduce it or raise it if it senses it not currently at the correct flow. 
            <br/><br/>
            <green>What is AutoSAR?</green>
            <br/><br/>
            <purple>AUTOSAR</purple> is an <azure>open</azure> <red>system</red> architecture for automotive software development and provides standards for developing common 
            automotive software applications. It is a growing and evolving standard that defines a <purple>layered</purple> architecture for the software.
            <br/><br/>
            <purple>AUTOSAR</purple> (AUTomotive <azure>Open</azure> <red>System</red> ARchitecture) is primarily focused on the development of software architecture for 
            <red>Electronic</red> <red>Control</red> <red>Units</red> (<azure>ECUs</azure>),  but its applications extend beyond just <azure>ECUs</azure>. 
            <br/><br/>
            Here’s a breakdown of its uses:
            <br/><br/>
            <brown>ECUs:</brown>
            <br/>
            The primary focus of <purple>AUTOSAR</purple> is to standardize the software architecture for <azure>ECUs</azure>, which are critical 
            components in vehicles that control various <red>functions</red> (like engine management, safety <red>systems</red>, etc).
            <br/><br/>
            <brown>Software Components:</brown>
            <br/>
            <purple>AUTOSAR</purple> facilitates the development of <azure>reusable</azure> <red>software</red> <red>components</red> that can be integrated into different <azure>ECUs</azure>, 
            promoting interoperability among various manufacturers.
            <br/><br/>
            <brown>Vehicle Networks:</brown>
            <br/>
            <purple>AUTOSAR</purple> also plays a role in defining communication protocols and standards for vehicle networks, <azure>allowing</azure> different 
            <azure>ECUs</azure> to communicate effectively.
            <br/><br/>
            <brown>Safety and Security:</brown>
            <br/>
            It provides guidelines and frameworks for developing safety-critical <red>systems</red>, which are essential for modern vehicles, 
            especially with the rise of autonomous driving technologies.
            <br/><br/>
            <brown>Integration with Other Systems:</brown>
            <br/>
            While its primary focus is on <azure>ECUs</azure>, <purple>AUTOSAR</purple> can also be integrated with other automotive <red>systems</red>, such as infotainment 
            and telematics, enhancing the overall vehicle architecture.
            <br/><br/>
            The classic <purple>AUTOSAR</purple> platform <azure>runs</azure> on a microcontroller and is divided into 3 main <purple>layers</purple>:
            
                <enum><purple>Basic</purple> <purple>Software</purple> Architecture - It is common to any <purple>AUTOSAR</purple> <azure>ECU</azure>.</enum>
                <enum><purple>AUTOSAR</purple> <purple>Runtime</purple> <purple>Environment</purple></enum>
                <enum><purple>Application</purple> <purple>Layer</purple></enum>
            
            <br/>
            <img class="database_image" src="./website_resources/local/database/pictures/autosar_architecture.png" alt="autosar_architecture"/>
            <br/><br/>
            <green>Basic Software Architecture (BSW)</green>
            <br/><br/>
            <purple>Basic</purple> <purple>Software</purple> Architecture (BSW) is the lowest <purple>layer</purple> of 3 main <purple>layers</purple>. It is the <purple>layer</purple> in direct contact with the hardware part 
            (the microcontroller).
            <br/><br/>
            <purple>AUTOSAR</purple> <purple>Basic</purple> <purple>Software</purple> Architecture consists of hundreds of software <red>modules</red> <purple>structured</purple> in different sublayers (<azure>Services</azure> <azure>Layer</azure>, <azure>ECU</azure> <azure>Abstraction</azure> <azure>Layer</azure>, 
            <azure>Microcontroller</azure> <azure>Abstraction</azure> <azure>Layer</azure>, <azure>Complex</azure> <azure>Drivers</azure>, <purple>Operating</purple> <red>System</red>) and 
            it is common to any <purple>AUTOSAR</purple> <azure>ECU</azure>. This means the supplier who has designed BSW can <azure>share</azure> it with other suppliers that are 
            working on <azure>ECUs</azure> of engine, gearbox, etc.
            <br/><br/>
            <green>Runtime Environment Layer (RTE)</green>
            <br/><br/>
            <purple>AUTOSAR</purple> <purple>Runtime</purple> <purple>Environment</purple> is a middleware <purple>layer</purple> of the <purple>AUTOSAR</purple> software architecture between the BSW and the application 
            <purple>layer</purple> and provides communication services for the application software.
            <br/><br/>
            The purpose of <red>RTE</red> is to act as the middle-man between the <red>software</red> <red>components</red>. Example: if we have 2 <red>software</red> <red>components</red> 
            <purple>SWC</purple> <purple>A</purple> and <azure>SWC</azure> <azure>B</azure>, in order for <purple>SWC</purple> <purple>A</purple> to use some <purple>variables</purple> or <red>functions</red> from <azure>SWC</azure> <azure>B</azure>, the components <purple>SWC</purple> <purple>A</purple> it will have to connect 
            to the <red>RTE</red> which then will connect <purple>SWC</purple> <purple>A</purple> to <azure>SWC</azure> <azure>B</azure> through a series of <red>interfaces</red> for <azure>Reading</azure>/<azure>Writing</azure>.
            <br/><br/>
            <purple>Runtime</purple> <purple>Environment</purple> <purple>Layer</purple> (<red>RTE</red>) is an <red>implementation</red> <red>based</red> on the <azure>abstract</azure> concept of <red>Virtual</red> <red>Function</red> <red>Bus</red> (<azure>VFB</azure>).
            <br/><br/>
            The <red>Virtual</red> <red>Function</red> <red>Bus</red> (<azure>VFB</azure>) serves as a communication <purple>layer</purple> that <azure>allows</azure> different <red>software</red> <red>components</red> to 
            interact with each other 
            in a standardized way. It <azure>abstracts</azure> the underlying hardware and software complexities, enabling easier 
            integration and communication.
            <br/><br/>
            If <purple>SWC</purple> <purple>A</purple> and <azure>SWC</azure> <azure>B</azure> were two people trying to communicate, then <red>RTE</red> is their postman while <azure>VFB</azure> is their mailbox.
            This means <azure>VFB</azure> provides <purple>addresses</purple> which <azure>allows</azure> <red>RTE</red> to deliver the <purple>data</purple> to the right receiver. <red>RTE</red> handles
            sorting and routing ensuring that <purple>data</purple> travels the right way from one SWC to the other, and <red>RTE</red> also ensures that
            <purple>data</purple> arrives at the right time, in case of <azure>asynchronous</azure> <red>functions</red>. 
            <br/><br/>
            In case of <azure>asynchronous</azure> <red>functions</red>, once the <red>function</red> generates the <purple>data</purple>, it passes the <purple>data</purple> to the <red>RTE</red>, then the 
            <red>RTE</red> keeps the <purple>data</purple> <azure>stored</azure> until the receiver will come to <purple>collect</purple> it. 
            <br/><br/>
            In case of <azure>synchronous</azure> <red>functions</red>, once the <red>function</red> generates the <purple>data</purple>, it calls in for <red>RTE</red> <purple>API</purple>, which provides access 
            to the receiver, and the sender ensure that the receiver has the <purple>data</purple> when it becomes available.
            As an analogy, imagine that the sender calls in the <red>RTE</red> which is a cab, the <red>RTE</red> brings the sender to the receiver's destination
            then the <red>RTE</red> (cab) gives the <purple>key</purple> to the receivers house, and the sender enters the receivers house, and leaves the <purple>data</purple>, 
            then locks the door behind it, and it resumes its normal duties. 
            <br/><br/>
            The synchrounous SWCs causes <azure>blocking</azure> / delays because it has to do all this extra work. 
            <br/><br/>
            Several factors influence whether to use <azure>synchronous</azure> or <azure>asynchronous</azure> communication in SWCs:
            <br/><br/>
            <indigo>Timing Requirements:</indigo>
            <br/>
            If the application requires immediate responses, <azure>synchronous</azure> communication is preferred.
            For less time-sensitive <purple>operations</purple>, <azure>asynchronous</azure> communication is more suitable.
            <br/><br/>
            <indigo>Data Dependency:</indigo>
            <br/>
            If the sender's <purple>operation</purple> depends on the receiver's response, <azure>synchronous</azure> is necessary.
            If the <purple>operations</purple> can proceed <azure>independently</azure>, <azure>asynchronous</azure> is ideal.
            <br/><br/>
            <indigo>System Architecture:</indigo>
            <br/>
            The overall design of the <red>system</red> and how components interact can dictate the choice.
            For example, in a <azure>multi</azure>-<azure>core</azure> environment, <azure>asynchronous</azure> communication can help manage load and improve 
            performance.
            <br/><br/>
            <indigo>Error Handling:</indigo>
            <br/>
            <azure>Synchronous</azure> communication can simplify <red>error</red> <red>handling</red> since the sender waits for a response.
            <azure>Asynchronous</azure> communication may require more complex error management strategies.
            <br/><br/>
            <indigo>Performance Considerations:</indigo>
            <br/>
            <azure>Synchronous</azure> calls can introduce delays, especially if the receiver is busy.
            <azure>Asynchronous</azure> calls can improve throughput by <azure>allowing</azure> multiple <purple>operations</purple> to occur <azure>simultaneously</azure>.
            <br/><br/>
            <green>Application Layer</green>
            <br/><br/>
            The <purple>application</purple> <purple>layer</purple> is the highest <purple>layer</purple> of the <purple>AUTOSAR</purple> software architecture and supports custom functionalities 
            <red>implementation</red>. This <purple>layer</purple> consists of the specific <red>software</red> <red>components</red> and many applications which perform specific 
            <azure>tasks</azure> as per instructions.
            <br/><br/>
            The <purple>AUTOSAR</purple> <purple>application</purple> <purple>layer</purple> consists of three components which are: application <red>software</red> <red>components</red>, <azure>ports</azure> of software 
            components, and <azure>port</azure> <red>interfaces</red>.
            <br/><br/>
            <purple>AUTOSAR</purple> ensures standardized <red>interfaces</red> for the <red>software</red> <red>components</red> within the <purple>application</purple> <purple>layer</purple> and these software 
            components help in generating simple applications to support the vehicle <red>functions</red>.
            <br/><br/>
            <brown>Virtual Function Bus (VFB)</brown>
            <br/><br/>
            Imagine a city with roads (<azure>VFB</azure>) connecting different buildings (SWCs). Each building has doorways (<azure>ports</azure>) that <azure>allow</azure> 
            people (<purple>data</purple>) to enter and exit. The doorways have specific rules (<red>interfaces</red>) about who can enter and what they can
            bring (<purple>data</purple> <purple>types</purple>). Connectors act as the pathways between doorways, <azure>allowing</azure> people to move between buildings.
            <br/><br/>
            The communication between the <red>software</red> <red>components</red> is enabled via specific <azure>ports</azure> using a <red>Virtual</red> <red>Function</red> <red>Bus</red> (<azure>VFB</azure>).
            <br/>
            These <azure>ports</azure> facilitate communication between the <red>software</red> <red>components</red> within the <purple>Application</purple> <purple>Layer</purple>, between the 
            <red>software</red> <red>components</red> within the <purple>Basic</purple> <purple>Software</purple> <purple>Layer</purple>, and also across these 2 different <purple>layers</purple> together. This means
            you can connect from anywhere to anywhere.
            <br/><br/>
            The above-explained architecture of <purple>AUTOSAR</purple> is its classic platform, which supports <red>real</red>-<red>time</red> requirements and 
            safety constraints. <red>Based</red> on the microcontroller, the classic platform is capable of supporting applications in the 
            <purple>field</purple> of networking and security by <azure>allowing</azure> <azure>ECUs</azure> to access vehicle sensors and actuators.</description>
        <ecu-communication><azure>ECUs</azure> are the brains behind various <red>functions</red> in vehicles, and they communicate through specific networks. 
            Modern vehicles can have over 100 <azure>ECUs</azure>, each responsible for different <azure>tasks</azure>, such as engine management, 
            transmission control, safety <red>systems</red>, and infotainment.
            <br/><br/>
            The communication through the <azure>ECU</azure> networks is performed primarily serial. 
            This means while 2 devices communicate, the others are waiting for the <red>bus</red> to get free (in recessive state).
            <br/><br/>
            While <azure>parallel</azure> communication can theoretically <azure>allow</azure> multiple devices to communicate <azure>simultaneously</azure>, it is less 
            common in automotive applications due to complexity and cost. <azure>Parallel</azure> communication requires more wires, 
            which can lead to increased weight and potential interference.
            <br/><br/>
            <indigo>Half-Duplex Communication:</indigo> Many serial communication <red>systems</red>, like CAN, <purple>operate</purple> in a 
            half-duplex mode, meaning that <purple>data</purple> can 
            flow in both directions, but not at the same time. This <azure>allows</azure> for <azure>efficient</azure> communication without the 
            need for multiple channels. 
            <br/><br/>
            This means that while one device is sending <purple>data</purple>, the other must wait until 
            the transmission is complete before it can respond or send its own <purple>data</purple>. CAN employs a unique <red>bus</red> <azure>arbitration</azure> 
            <red>method</red> to manage which device gets to send <purple>data</purple> when multiple devices want to communicate at the same time. 
            This is crucial for preventing <purple>data</purple> collisions.
            <br/><br/>
            <green>Broadcasting:</green>
            <br/><br/>
            When one <azure>ECU</azure> sends a message, all other <azure>ECUs</azure> on the <red>bus</red> can receive it, 
            <azure>allowing</azure> for <azure>efficient</azure> communication. Since all the <purple>data</purple> transmitted from the <azure>ECUs</azure> is available on the <red>bus</red>, the
            <azure>ECUs</azure> can be programmed to filter messages <red>based</red> on specific criteria, such as message <purple>identifiers</purple>. 
            This means they only <azure>process</azure> messages that are relevant to their <red>function</red>.
            <br/><br/>
            A <purple>PDU</purple> (<purple>Protocol</purple> <purple>Data</purple> <purple>Unit</purple>) is typically seen as a message in higher-level communication protocols, containing 
            the <purple>data</purple> and control information needed for a full communication exchange.
            In lower-level protocols like CAN, a <purple>PDU</purple> can be seen as the <purple>data</purple> part within a <red>frame</red>, but it’s still part of 
            the larger <purple>structure</purple>.
            <br/><br/>
            <green>Message Structure:</green>
            <br/> <br/>
            The <purple>data</purple> is transmitted by <azure>ECUs</azure> in the form of messages, which include:
            <br/><br/>
            <brown>Identifier:</brown> 
             <br/>
            A message <purple>identifier</purple> is a unique <purple>identifier</purple> <purple>assigned</purple> to each message transmitted over the 
            network. It serves several important purposes:
            
            <enum><indigo>Priority Assignment:</indigo> The message <purple>identifier</purple> determines the priority of the message. 
            <br/>
            In <red>CAN</red> <red>networks</red>, lower numerical <purple>values</purple> indicate higher priority. This means that if two messages are sent <azure>simultaneously</azure>, 
            the one with the lower <purple>identifier</purple> will take precedence.</enum>
            <enum><indigo>Message Routing:</indigo> The <purple>identifier</purple> helps in routing messages to the appropriate <azure>ECUs</azure>. 
            Each <azure>ECU</azure> can be programmed to listen for specific <purple>identifiers</purple>, ensuring that it only <azure>processes</azure> relevant messages.</enum>
            <enum><indigo>Data Association:</indigo> Each <purple>identifier</purple> is associated with specific <purple>data</purple>, <azure>source</azure>, and destination nodes. 
            This association <azure>allows</azure> <azure>ECUs</azure> to understand the context of the <purple>data</purple> being transmitted. 
            <br/><br/>
            The message <purple>identifier</purple> is used by <azure>ECUs</azure> to filter the messages from the <red>bus</red>. 
            If an <azure>ECU</azure> receives a message from the <red>bus</red> it will first check if the message is meant to be <azure>processed</azure> by its software or not.
            <br/>
            If the message is not meant for the <azure>ECU</azure> which received it then it will be <azure>blocked</azure> by its network driver.
<code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example of ECU message filtering mechanism*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdio.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdint.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdbool.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Define the CAN message structure</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">typedef struct </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    uint32_t id;      <comment>// Message ID</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    uint8_t data[8];  <comment>// Data payload (data field)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} CAN_Message;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Function to check if a message is intended for this ECU</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">bool isMessageForECU(CAN_Message *msg, uint32_t ecu_id) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Check if the message ID matches the ECU's ID</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return (msg-&gt;id == ecu_id);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Function to process incoming CAN messages</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void processCANMessage(CAN_Message *msg, uint32_t ecu_id) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (isMessageForECU(msg, ecu_id)) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Process the message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printf("Processing message with ID: %u\n", msg-&gt;id);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Add your message handling logic here</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Block the message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        printf("Blocked message with ID: %u\n", msg-&gt;id);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Example ECU ID</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    uint32_t ecu_id = 0x123;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Simulated incoming CAN messages</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    CAN_Message incomingMessages[] = {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {0x123, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}},</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {0x456, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}},</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {0x123, {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}},</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    };</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Process each incoming message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (int i = 0; i &lt; sizeof(incomingMessages) / sizeof(incomingMessages[0]); i++) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        processCANMessage(&amp;incomingMessages[i], ecu_id);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr></table></box></code>
            </enum>
            
            <br/>
            <brown>Data Field:</brown> 
             <br/>Contains the actual <purple>data</purple> being transmitted. It is also referred to as <red>payload</red>. The <purple>Data</purple> <purple>Field</purple> may contain 
             sensor <purple>data</purple>, control <azure>signals</azure>, status information, or any other <purple>type</purple> of 
             information that needs to be exchanged between <azure>ECUs</azure>. 
             <br/><br/>
             <indigo>Example:</indigo> within a <purple>PDU</purple> the actual <purple>data</purple> being transmitted is typically 
             given by a <purple>collection</purple> of <azure>signals</azure>.
            <br/><br/>
            <brown>Control Information:</brown> 
            <br/>
            Helps manage the flow of <purple>data</purple> and ensures that messages are received correctly. 
            The control information consists of following elements:
            <br/>
            
                <enum><indigo>Checksum/CRC:</indigo> A <purple>value</purple> used for error-checking to ensure the integrity of the <purple>data</purple>. 
                It helps verify that the message has not been corrupted during transmission.
                <br/><br/>
                Example of simple <red>checksum</red> calculation algorithm: 
                <br/>
                <code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>/*Example 1: Simple Checksum Calculation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>Here's a basic example of how to calculate a checksum for a data payload*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdint.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint8_t calculateChecksum(uint8_t* data, uint8_t length) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    uint8_t checksum = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (uint8_t i = 0; i &lt; length; i++) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        checksum += data[i]; <comment>// Sum all bytes</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return checksum; <comment>// Return the checksum</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example usage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint8_t data[] = {0x01, 0x02, 0x03, 0x04};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint8_t checksum = calculateChecksum(data, sizeof(data));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr></table></box></code>
                <br/>
                <indigo>Checksum:</indigo> 
                <br/>
                Primarily detects single-<purple>bit</purple> errors and is less effective at identifying multiple-<purple>bit</purple> errors.
                It may fail to detect errors if they cancel each other out (e.g., if two <purple>bits</purple> are flipped).
                <br/><br/>
                Example of simple <red>CRC</red> calculation algorithm: 
                <br/>
                <code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Example 2: CRC Calculation</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//For a more robust integrity check, you can use CRC. </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>//Here’s a simple implementation of CRC-8:</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdint.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint8_t calculate_crc8(uint8_t* data, uint8_t length) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    uint8_t crc = 0xFF; <comment>// Initial value 255 in decimal or 0b11111111 (8 bits of 1)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//for each byte in data</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    for (uint8_t i = 0; i &lt; length; i++) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        crc ^= data[i]; <comment>// XOR with the current byte</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>//for each bit in CRC</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        for (uint8_t j = 0; j &lt; 8; j++) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            <comment>//if MSB is 1</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            if (crc &amp; 0b10000000) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>/*Complex calculations bit by bit for determining unique fingerprint CRC-8 for data*/</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                crc = (crc &lt;&lt; 1) ^ 49; <comment>// CRC-8 calculation using CRC-8 polynomial</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//The value 0x31 (decimal 49) is crucial in CRC-8 calculations, </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//and it represents the CRC-8 polynomial.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                <comment>//It processes each bit of the CRC value.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                crc = crc &lt;&lt; 1;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">            }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//The CRC-8 algorithm is a mathematical process that generates a unique "fingerprint" for the data.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>//CRC-8 can be used for messages of any length.</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return crc; <comment>// Return the CRC value</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example usage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint8_t data[] = {(uint8_t)("H"), (uint8_t)("e"), (uint8_t)("l"), (uint8_t)("l"), (uint8_t)("o")}; <comment>//Actual message: 'Hello'</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint8_t crcValue = calculate_crc8(data, sizeof(data));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr></table></box></code>
                <br/>
                <indigo>CRC-8 / CRC-16:</indigo> 
                <br/>
                Can detect multiple-<purple>bit</purple> errors and is more robust against burst errors (where several <purple>bits</purple> are corrupted in a <azure>sequence</azure>).
                It can identify errors that a simple <red>checksum</red> might miss.
                
                    <enum><indigo>CRC-8:</indigo>  Suitable for detecting simple errors in short messages. 
                    It can handle single-<purple>bit</purple> errors and some burst errors but is less effective for longer <purple>data</purple>.
                    </enum>
                    <enum><indigo>CRC-16:</indigo> Offers a higher level of error detection, making it better for 
                    longer messages. It can detect more complex error patterns, including multiple-<purple>bit</purple> errors 
                    and longer burst errors. 
                    <br/>
                    It takes slightly longer to <red>compute</red> <azure>compared</azure> to <purple>CRC</purple>-<purple>8</purple> but provides a more robust error-checking 
                    mechanism, which is crucial for applications where <purple>data</purple> integrity is paramount.
                    </enum>
                
                <br/>
                Example of <purple>Data</purple> <purple>Integrity</purple> <purple>Check</purple> within <azure>ECU</azure>:
                <br/>
                <code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdint.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdbool.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">bool checkDataIntegrity(uint8_t* receivedData, uint8_t length, uint8_t expectedChecksum) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    uint8_t calculatedChecksum = calculateChecksum(receivedData, length);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return (calculatedChecksum == expectedChecksum); <comment>// Return true if valid</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example usage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint8_t receivedData[] = {0x01, 0x02, 0x03, 0x04};</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint8_t expectedChecksum = calculateChecksum(receivedData, sizeof(receivedData));</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">bool isDataValid = checkDataIntegrity(receivedData, sizeof(receivedData), expectedChecksum);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                </td></tr></table></box></code>
                <br/>
                <indigo>NOTE:</indigo> For <azure>ECUs</azure> (<red>Electronic</red> <red>Control</red> <red>Units</red>) to validate the <red>Checksum</red> / <red>CRC</red> (<red>Cyclic</red> <red>Redundancy</red> <red>Check</red>), 
                they need access to the same <red>function</red> or algorithm used for the their calculation.
                <br/>
                Hence, In many automotive applications, <red>CRC</red> algorithms are standardized (like <purple>CRC</purple>-<purple>8</purple>, <purple>CRC</purple>-<purple>16</purple>, etc.), 
                ensuring that all <azure>ECUs</azure> in a <red>system</red> can communicate reliably. This standardization helps in <azure>maintaining</azure> 
                compatibility across different manufacturers and models.
                </enum>
                <enum><indigo>Control Flags:</indigo>
                Indicators that provide additional information about the message, such as whether it is 
                a request or a response, or if it contains critical <purple>data</purple>.
                </enum>
                <enum><indigo>Timestamp:</indigo>
                Information about when the message was sent, which can be crucial for time-sensitive <purple>operations</purple>.
                </enum>
                <enum><indigo>Sequence Number / Sequence Counter:</indigo> 
                    <enum><indigo>Sequence Counter:</indigo> This is a simple <azure>counter</azure> that <purple>increments</purple> with each message sent. 
                    It's primarily used to track the order of messages in a <azure>stream</azure>, but it doesn't necessarily 
                    guarantee that all messages are received.
                    <br/><br/>
                    Example of <azure>Sequence</azure> <azure>Counter</azure> <red>Implementation</red>:
                    <br/>
                    <code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdint.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdbool.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Define CAN message structure</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">typedef struct </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    uint8_t id;  <comment>// Message ID</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    uint8_t data[8]; <comment>// Data payload</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    uint16_t sequenceNumber; <comment>// Sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} CANMessage;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Global variable for the sequence counter</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint16_t sequenceCounter = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Function to get the next sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint16_t getNextSequenceNumber() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return sequenceCounter++;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Function to send a CAN message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void sendCANMessage(CANMessage message) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Replace this with your actual CAN bus sending function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// ... send message using CAN bus API ...</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Function to receive a CAN message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">void receiveCANMessage() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Replace this with your actual CAN bus receiving function</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// ... receive message using CAN bus API ...</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>34  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>35  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Function to validate the received sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>36  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">bool validateSequenceNumber(uint16_t receivedSequenceNumber) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>37  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>38  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (receivedSequenceNumber == sequenceCounter) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>39  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>40  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        sequenceCounter++; <comment>// Increment for next message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>41  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return true; <comment>// Valid sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>42  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>43  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>44  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>45  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return false; <comment>// Invalid sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>46  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>47  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>48  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>49  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example usage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>50  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">int main() </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>51  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>52  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    CANMessage message;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>53  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    message.id = 0x123; <comment>// Example message ID</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>54  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    message.data[0] = 0x01; <comment>// Example data</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>55  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    message.sequenceNumber = getNextSequenceNumber();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>56  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>57  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Send the message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>58  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    sendCANMessage(message);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>59  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>60  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Receive a message (replace with your actual CAN bus receiving function)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>61  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    CANMessage receivedMessage = receiveCANMessage();</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>62  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// ... receive message using CAN bus API ...</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>63  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>64  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Validate the received sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>65  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    bool isValid = validateSequenceNumber(receivedMessage.sequenceNumber);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>66  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>67  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (isValid) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>68  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>69  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Process the message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>70  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// ... </comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>71  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>72  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>73  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>74  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// Handle the error (e.g., resend request)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>75  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        <comment>// ...</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>76  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>77  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>78  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    return 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>79  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>80  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    </td></tr></table></box></code>
                    
                    </enum>
                    <enum>
                    <indigo>Sequence Number:</indigo> This is a more robust <purple>identifier</purple> that often incorporates additional 
                    <purple>logic</purple> to ensure the integrity of message order. It might use a combination of <azure>counter</azure> 
                    and other information to detect lost or out-of-order messages.
                    <br/><br/>
                    Example of <azure>Sequence</azure> <azure>Number</azure> with Validation
                    <br/>
                    <code><box><table><tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>0   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>1   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdint.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>2   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">#include &lt;stdbool.h&gt;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>3   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>4   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Global variable to store the expected sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>5   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint16_t expectedSequenceNumber = 0;</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>6   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>7   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Function to validate the received sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>8   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">bool validateSequenceNumber(uint16_t receivedSequenceNumber) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>9   </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>10  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    if (receivedSequenceNumber == expectedSequenceNumber) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>11  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>12  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        expectedSequenceNumber++; <comment>// Increment for next message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>13  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return true; <comment>// Valid sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>14  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    } </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>15  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>16  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    {</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>17  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">        return false; <comment>// Invalid sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>18  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    }</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>19  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>20  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>21  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;"><comment>// Example usage</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>22  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">uint16_t receivedSequenceNumber = 10; <comment>// Example received sequence number</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>23  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">
</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>24  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">bool isValid = validateSequenceNumber(receivedSequenceNumber);</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>25  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">if (isValid) </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>26  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>27  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Process the message</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>28  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">} </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>29  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">else </td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>30  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">{</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>31  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">    <comment>// Handle the error (e.g., resend request)</comment></td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>32  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">}</td></tr>
<tr><td style="width:46px; text-align:left; padding:0px;margin:0px; border: solid 1px rgba(0,0,0,0.1);"><lineNumber>33  </lineNumber></td><td style="text-align:left; padding:0px; margin:0px;">                    </td></tr></table></box></code>
                    </enum>
                
                </enum>
                <enum><indigo>Status Information:</indigo> <purple>Data</purple> that indicates the current state of the <azure>ECU</azure> or the <red>system</red> it controls, 
                such as error <azure>codes</azure> or operational status.
                </enum>
                <enum><indigo>Priority Level:</indigo> Some messages may include a priority level to determine the urgency of the message, 
                which can affect how it is <azure>processed</azure> in a multi-<azure>ECU</azure> environment.
                </enum>
            
            <br/></ecu-communication>
        <ecu-networks>In a network: <azure>ECUs</azure> are connected through various <purple>data</purple> <red>buses</red>, <azure>allowing</azure> them to send and receive messages. 
            Each <azure>ECU</azure> can <azure>read</azure> <purple>data</purple> from the <red>bus</red> and respond accordingly. 
            <br/><br/>
            Various Sensors and Actuators are also connected 
            within the <azure>ECU</azure> Networks. The <purple>data</purple> can be transmitted and received amongst multiple <azure>ECUs</azure> or between an <azure>ECU</azure> and 
            various Sensors / Actuators. 
            <br/><br/>
            <indigo>Difference between Sensors and Actuators:</indigo>
            <br/>
            Sensors are like the "eyes and ears" of a <red>system</red>. They detect and measure physical <azure>quantities</azure> from the environment.
            <br/>
            Actuators are like the "muscles" of a <red>system</red>. They respond to <azure>signals</azure> from a control <red>system</red> by 
            producing physical motion or changing a physical state.
            <br/><br/>
            <green>Components of ECU Networks:</green>
            <br/><br/>
            <brown>Electronic Control Units (ECUs)</brown>
            <br/>
            These are specialized computers that control different <red>functions</red> in a vehicle, such as engine management, transmission, 
            and safety <red>systems</red>.
            <br/><br/>
            <brown>Communication Protocols</brown>
            <br/>
            <azure>ECUs</azure> communicate using various protocols, which define how <purple>data</purple> is transmitted. The most common protocols include:
            
                <enum><indigo>Controller Area Network (CAN):</indigo> A robust vehicle <red>bus</red> standard that <azure>allows</azure> <azure>ECUs</azure> to 
                communicate with each other without a host <red>computer</red>. It is designed for <red>real</red>-<red>time</red> applications where low latency is crucial.
                <br/>
                CAN typically supports speeds up to 1 Mbps. 
                It is used for: fuel injection <red>system</red>, ignition <red>system</red>, emissions control, <purple>breaking</purple> <red>system</red> etc. 
                <br/><br/>
                The <red>CAN</red> <red>bus</red> enables quick and reliable <azure>sharing</azure> of information between the car's brakes and engine. 
                For <red>instance</red>, in anti-lock braking <red>systems</red> (ABS), the <purple>CAN</purple> <purple>protocol</purple> helps in coordinating 
                the braking force applied to each wheel.
                <br/>
                <red>CAN</red> <red>FD</red> (Flexible <purple>Data</purple>-rate) enhances the capabilities of the traditional <purple>CAN</purple> <purple>protocol</purple> by <azure>allowing</azure> for 
                higher <purple>data</purple> rates and larger <red>payloads</red>.
                </enum>
                <enum><indigo>Ethernet:</indigo> supports much higher speeds, ranging from 100 Mbps to 10 Gbps and beyond, 
                making it suitable for high-bandwidth applications. <red>Ethernet</red> generally uses a star topology 
                and can support a more complex network <purple>structure</purple> with switches and routers.</enum>
                <enum><indigo>FlexRay:</indigo> A high-speed <red>bus</red> that supports time-triggered communication, often used in safety-critical applications. 
                Supports <purple>data</purple> rates of up to 10 Mbps. It utilizes a time-triggered communication <red>method</red>, <azure>allowing</azure> for deterministic 
                <purple>data</purple> transmission. This means that messages are sent at predefined times, ensuring reliability and <azure>synchronization</azure>.</enum>
                <enum><indigo>Local Interconnect Network (LIN):</indigo> A simpler, lower-cost network used for less critical <red>functions</red>. 
                <br/>
                <red>LIN</red>, typically supports <purple>data</purple> rates up to 20 Kbps, 
                making it suitable for simpler applications where high speed is not critical such as: window lifts, seat adjustments, 
                and interior lighting. </enum>
                <enum><indigo>Media Oriented Systems Transport (MOST):</indigo> Primarily used for multimedia applications in vehicles, enabling high-speed <purple>data</purple> 
                transmission for audio, video, and other media content. It <purple>operates</purple> on a peer-to-peer basis, <azure>allowing</azure> multiple devices to 
                communicate <azure>simultaneously</azure></enum>
            
            <br/>
            <brown>Data Buses</brown>
            <br/>
            All <azure>ECUs</azure> are connected to a single <purple>data</purple> line, known as a <red>bus</red>. This <red>bus</red> <azure>allows</azure> information to be transmitted between 
            <azure>ECUs</azure>. 
            <br/>
            For example:
            In a <red>CAN</red> <red>bus</red>, messages are sent as packets, and each <azure>ECU</azure> can listen to the <red>bus</red> and respond to messages relevant to 
            its application.
            <br/><br/>
            <green>How Communication Works:</green>
            <br/><br/>
            <indigo>Message Transmission</indigo>
            <br/>
            When an <azure>ECU</azure> needs to send <purple>data</purple> (like engine temperature), it <azure>creates</azure> a message and places it on the <red>bus</red>.
            Other <azure>ECUs</azure> on the network can <azure>read</azure> this message and respond accordingly.
            <br/><br/>
            <indigo>Priority and Arbitration</indigo>
            <br/>
            In a <red>CAN</red> <red>network</red>, messages have different priorities. If two messages are sent <azure>simultaneously</azure>, 
            the one with the higher priority will be transmitted first.
            <br/><br/>
            <indigo>Error Handling</indigo>
            <br/>
            <azure>ECU</azure> networks are designed with error detection and correction mechanisms to ensure reliable communication. 
            If a message is corrupted, the receiving <azure>ECU</azure> can request a retransmission.
            <br/><br/>
            <brown>Transmission of messages:</brown>
            <br/><br/>
            A message can also be formed from multiple <red>frames</red>, when the transmission of whole message is not possible. 
            <br/>
            Example: In CAN (<red>Controller</red> <red>Area</red> <red>Network</red>), the standard <red>frame</red> format <azure>allows</azure> for a <purple>Data</purple> <purple>Field</purple> of only up to 8 <purple>bytes</purple>. 
            <br/><br/>
            A <red>CAN</red> <red>Frame</red> is an actual <purple>PDU</purple>/message for <purple>CAN</purple> <purple>protocol</purple> in <purple>AUTOSAR</purple> which consists of following:
            <br/><br/>
            <indigo>Identifier:</indigo> 11-<purple>bit</purple> or 29-<purple>bit</purple> ID (depending on standard or extended format).<br/>
            <indigo>Control Field:</indigo> <purple>Data</purple> length <azure>code</azure> (DLC), which specifies the length of the <purple>Data</purple> <purple>Field</purple>.<br/>
            <indigo>Data Field:</indigo> This can contain up to 8 <purple>bytes</purple> of actual <purple>data</purple> being transferred.<br/>
            <indigo> CRC:</indigo> For error checking.<br/>
            <indigo>Acknowledgment:</indigo> A <purple>signal</purple> confirming successful reception of the <red>frame</red>.
            <br/><br/>
            In this case: to send larger messages (i.e., <purple>PDUs</purple> larger than 8 <purple>bytes</purple>), the <purple>CAN</purple> <purple>protocol</purple> uses a mechanism known as 
            segmentation and reassembly. 
            <br/><br/>
            Larger <purple>PDUs</purple> (such as those needed for diagnostic messages or large <purple>data</purple> transfers) 
            can be sent by <purple>breaking</purple> the <purple>data</purple> into smaller chunks. These chunks are sent across multiple <red>frames</red>, 
            and the receiving <azure>ECU</azure> must reassemble the <purple>data</purple> back into the original message.
            <br/><br/>
            This segmentation and reassembly is typically done using higher-<purple>layer</purple> protocols like ISO-TP (ISO 15765-2) or 
            UDS (Unified Diagnostic Services), which define how the <purple>data</purple> is split into multiple <red>frames</red>.
            <br/><br/>
            <brown>Steps for Segmentation and Reassembly:</brown>
            <br/><br/>
            <indigo>Segmentation:</indigo>
            <br/>
            The <purple>PDU</purple> is split into smaller pieces, each fitting within the 8-<purple>byte</purple> <purple>data</purple> <purple>field</purple> limit of the <red>CAN</red> <red>frame</red>.
            Each segment is sent as a separate <red>CAN</red> <red>frame</red>, and these <red>frames</red> are linked using specific <purple>identifiers</purple> (such as a 
            <azure>Sequence</azure> <azure>Number</azure> and a Unique Message <purple>Identifier</purple>).
            <br/><br/>
            <indigo>Transmission of Multiple Frames:</indigo>
            <br/>
            The first <red>CAN</red> <red>frame</red> will carry the initial part of the <purple>data</purple>, while the subsequent <red>frames</red> carry the remaining chunks.
            A special control <purple>byte</purple> (such as a <azure>Sequence</azure> <azure>Number</azure>) is included in the <azure>header</azure> of each <red>frame</red> to help the receiving <azure>ECU</azure> 
            reassemble the full message.
            <br/><br/>
            <indigo>Reassembly:</indigo>
            <br/>
            The receiving <azure>ECU</azure> listens for each <red>frame</red>, identifies the <azure>Sequence</azure> using the Control Information, and reassembles the <purple>data</purple> 
            into the original <purple>PDU</purple> once all the <red>frames</red> are received.
            <br/>
            The receiving <azure>ECU</azure> may also check for any errors or missing <red>frames</red>.
            <br/><br/>
            <brown>Example of Multi-Frame Transmission:</brown>
            <br/><br/>
            Suppose a diagnostic message requires 20 <purple>bytes</purple> of <purple>data</purple>.
            <br/>
            This <purple>data</purple> would be split into 3 <red>frames</red>:
            <br/><br/>
            The first <red>frame</red> would carry the first 8 <purple>bytes</purple>.<br/>
            The second <red>frame</red> would carry the next 8 <purple>bytes</purple>.<br/>
            The third <red>frame</red> would carry the remaining 4 <purple>bytes</purple>.
            <br/><br/>
            Each of these <red>frames</red> would have <purple>identifiers</purple> or <azure>Sequence</azure> <azure>Numbers</azure> that <azure>allow</azure> the receiving <azure>ECU</azure> to know how to 
            reassemble the <purple>data</purple>.
            <br/><br/>
            <purple>PDUs</purple> larger than 8 <purple>bytes</purple> can be transmitted in a single <red>frame</red> through <red>CAN</red> <red>FD</red> 
            (Flexible <purple>Data</purple>-rate) protocol, which <azure>allows</azure> for larger <purple>data</purple> <red>payloads</red> and higher <purple>data</purple> 
            transfer rates with a <purple>Data</purple> <purple>Field</purple> <purple>size</purple> of up to 64 <purple>bytes</purple>.
            <br/></ecu-networks>
        <can-protocol>The CAN (<red>Controller</red> <red>Area</red> <red>Network</red>) protocol is a robust vehicle <red>bus</red> standard designed to 
            facilitate <azure>efficient</azure> communication primarily between <red>Electronic</red> <red>Control</red> <red>Units</red> (<azure>ECUs</azure>) in 
            automotive and industrial applications.
            <br/><br/>
            A simple CAN (<red>Controller</red> <red>Area</red> <red>Network</red>) typically consists of two wires. 
            <red>CAN</red> <red>High</red> (<red>CANH</red>) - the wire which carries the high voltage level of the <purple>signal</purple> and <azure>CAN</azure> <azure>Low</azure> (<azure>CANL</azure>) - the wire which 
            carries the low voltage level of the <purple>signal</purple>.
            
                <enum>The two wires are essential for proper 
                communication between devices on the network.</enum>
                <enum>Often, these wires are twisted together to reduce electromagnetic 
                interference, which helps <azure>maintain</azure> <purple>signal</purple> integrity.</enum>
                <enum>At each end of the <red>CAN</red> <red>bus</red>, termination resistors are 
                usually <azure>added</azure> to prevent <purple>signal</purple> <red>reflections</red>.</enum>
                <enum>
                In some cases, a four-wire configuration might be used to include additional wires for power and ground.
                </enum>
            
            <img class="database_image" src="./website_resources/local/database/pictures/simple_can_network.png" alt="autosar architecture"/>
            <br/><br/>
            You can think of the schematic above as this: 
            <br/><br/>
            The Microcontroller is the brain, it has the <azure>CPU</azure> which <azure>runs</azure> the <purple>Operating</purple> <red>System</red> controlling every <red>function</red> of 
            the <azure>ECU</azure>. The <purple>CAN</purple> <purple>Controller</purple> is the communication specialist, it encodes inner-thoughts to sentences, 
            and the <red>CAN</red> <red>Transceiver</red> is the translator (the vocal cord) which provides the means for
            the brain to communicate effectively with the outside world (the <red>CAN</red> <red>bus</red>). 
            <br/><br/>
            <green>Information Transmission in CAN:</green>
            <br/><br/>
            The transmission of information through the CAN (<red>Controller</red> <red>Area</red> <red>Network</red>) utilizes a differential <azure>signaling</azure> 
            <red>method</red> between the <red>CAN</red> <red>High</red> (<red>CANH</red>) and <azure>CAN</azure> <azure>Low</azure> (<azure>CANL</azure>) wires.
            
                <enum><indigo>Differential Signaling:</indigo>
                The <red>CAN</red> <red>bus</red> uses a differential wired-AND <azure>signaling</azure> technique. This means that the information is transmitted as a 
                difference in voltage between the two wires.
                When <purple>data</purple> is sent, one wire (<red>CANH</red>) carries a higher voltage, while the other wire (<azure>CANL</azure>) carries a lower voltage.
                </enum>
                <enum><indigo>Dominant and Recessive States:</indigo>
                When a dominant <purple>bit</purple> is transmitted, <red>CANH</red> rises to approximately 3.5V, and <azure>CANL</azure> drops to about 1.5V. 
                This <azure>creates</azure> a differential voltage of 2 volts (3.5V - 1.5V).
                <br/>
                In the recessive state, both wires are at the same voltage level, typically around 2.5V. 
                This indicates that no <purple>data</purple> is being transmitted.
                </enum>
                <enum><indigo>Bit Transmission:</indigo>
                The <purple>bits</purple> are sent as high/low <azure>signals</azure>, which can be visualized as pulses or waves traveling down the wires. 
                The transition between dominant and recessive states encodes the <purple>data</purple> being transmitted.
                </enum>
                <enum><indigo>Error Detection:</indigo>
                The differential nature of the <azure>signaling</azure> helps in error detection. If there is a fault in one of the wires, 
                the <red>system</red> can still interpret the <purple>data</purple> correctly by <azure>comparing</azure> the voltage levels of <red>CANH</red> and <azure>CANL</azure>.
                </enum>
               <enum><indigo>Robustness:</indigo>
                This <red>method</red> of transmission is highly robust against electromagnetic interference, making it ideal for automotive and 
                industrial applications where reliability is crucial.
                </enum>
            
            <br/>
            CAN uses a <purple>bit</purple>-<red>oriented</red> protocol: Instead of sending 8 <purple>bytes</purple> at once, CAN transmits <purple>data</purple> <purple>bit</purple> by <purple>bit</purple>. 
            So, for an 8-<purple>byte</purple> message, you'd be sending 64 individual <purple>bits</purple> (8 <purple>bytes</purple> * 8 <purple>bits</purple>/<purple>byte</purple>).
            <br/>
            <br/>
            In other words we send out 64 pairs of <red>CANH</red> and <azure>CANL</azure>.
            <br/><br/>
            
            The time needed to send the 8-<purple>byte</purple> message through the <red>bus</red> can be calculated as follows:
            
                <enum>The speed of the <red>CAN</red> <red>bus</red> can vary, but a common speed is 500 kbps (kilobits per second).</enum>
                <enum>
                At 500 kbps, the time to transmit a single <purple>bit</purple> is calculated as 1/speed:
                <br/>
                1/500 000 = 2 microseconds
                </enum>
                <enum>
                Time needed to transmit the whole message would be: 
                <br/>
                    2 microseconds * 64 = 128 microseconds.
                </enum>
            
            <br/>
            <green>Key Features of the CAN Protocol:</green>
            <br/><br/>
            <brown>Multi-Master Configuration:</brown>
            <br/><br/>
            All nodes (<azure>ECUs</azure>) on the network can send and receive messages, <azure>allowing</azure> for a decentralized communication <red>system</red>.
            <br/><br/>
            <brown>Carrier-Sense Multiple Access with Collision Detection (CSMA/CD):</brown>
            <br/><br/>
            CAN uses a <red>method</red> to manage access to the <red>bus</red>, ensuring that if two nodes (<azure>ECUs</azure>) attempt to send messages 
            <azure>simultaneously</azure>, the one with the higher priority will continue while the other will back off.
            <br/><br/>
            <brown>Message Prioritization:</brown>
            <br/><br/>
            Each message has a unique <purple>identifier</purple> that determines its priority. Lower numerical <purple>values</purple> indicate higher 
            priority, <azure>allowing</azure> critical messages to be transmitted first.
            <br/><br/>
            <brown>Error Detection and Handling:</brown>
            <br/><br/>
            CAN includes several mechanisms for error detection, such as <red>Checksums</red> / <red>CRC</red> and <purple>Acknowledgment</purple> (<purple>ACK</purple>) <purple>bits</purple>, ensuring 
            reliable communication. If an error is detected, the message is retransmitted.
            <br/><br/>
            The acknowledgement (<purple>ACK</purple>) <purple>bit</purple> is used to confirm the reception of the message. 
            So the <azure>ECU</azure> receiving the message sends out a reply that the reception was successful.
            <br/><br/>
            <indigo>How does Acknowledgement (ACK) Bit work?</indigo>
            <br/>
            
                <enum>When a sender transmits a <azure>data</azure> <azure>frame</azure>, it includes an Acknowledgement (<purple>ACK</purple>) <purple>bit</purple> at the end of the <red>frame</red>. 
                </enum>
                <enum>Each <azure>ECU</azure> that successfully receives the <azure>data</azure> <azure>frame</azure> checks for errors. If the <red>frame</red> is received without errors, 
                the receiving <azure>ECU</azure> <purple>sets</purple> the Acknowledgement (<purple>ACK</purple>) <purple>bit</purple> to a dominant state (<purple>logic</purple> 0). 
                </enum>
                <enum>The <purple>ACK</purple> <purple>bit</purple> is dominant, meaning that if at least one <azure>ECU</azure> acknowledges 
                the message, the <purple>ACK</purple> <purple>bit</purple> will be recognized as dominant. 
                </enum>
                <enum>If no <azure>ECU</azure> acknowledges the message (i.e., all nodes (<azure>ECUs</azure>) detect an error), 
                the <purple>ACK</purple> <purple>bit</purple> remains in a recessive state (<purple>logic</purple> 1).
                </enum>
                <enum>The sender monitors the <red>bus</red> for the <purple>ACK</purple> <purple>bit</purple>. If it detects the dominant 
                state, it knows that at least one <azure>ECU</azure> has successfully received the message. If it does not detect the dominant state, 
                it assumes that there was an error in transmission. 
                </enum>
                <enum>If the sender does not receive an <purple>acknowledgment</purple>, it may retransmit the message, depending on the 
                <red>error</red> <red>handling</red> strategy <red>implemented</red>.
                </enum>
            
            <br/>
            <indigo>Importance of the Acknowledgement (ACK) Bit</indigo>
            <br/>
            The <purple>ACK</purple> <purple>bit</purple> ensures that messages are acknowledged, which is vital for <azure>maintaining</azure> the integrity of 
            communication in a network with multiple nodes. It helps in identifying transmission errors, <azure>allowing</azure> 
            for corrective actions to be taken.
            <br/><br/>
            These basic errors get detected by <purple>CAN</purple> <purple>Controller</purple>, but alongside these features more complex mechanisms such as: 
            <purple>E2E</purple> <purple>Protection</purple> 
            can be <purple>layered</purple> on top in order to enhance safety. Mechanisms such as: <purple>E2E</purple> (<purple>End</purple> <purple>to</purple> <purple>End</purple>) <purple>Protection</purple> are <red>implemented</red> 
            and handled within the higher <purple>Basic</purple> <purple>Software</purple> <purple>Layers</purple>.
            <br/><br/>
            <green>Broadcast Communication:</green>
            <br/><br/>
            Messages are broadcasted to all nodes (<azure>ECUs</azure>) on the network, meaning that every <azure>ECU</azure> can "hear" all transmissions. 
            This is <azure>efficient</azure> for applications where multiple devices need to respond to the same <purple>data</purple>.
            <br/><br/>
            If the information that the <azure>ECU</azure> "hears" on the <red>bus</red> is not meant for its <red>functioning</red>, then the messages will be <azure>blocked</azure> by its 
            <purple>CAN</purple> <purple>Controller</purple> / <azure>CAN</azure> <azure>Driver</azure> and it will not reach the upper software <purple>layers</purple>.
            This filtering is performed using the Unique <purple>Identifiers</purple> from the <purple>PDU</purple> / <red>Frame</red>.
            <br/><br/>
            <brown>Difference between Message/PDU and Frame</brown>
            <br/><br/>
            Both <red>Frames</red> and Message/<purple>PDUs</purple> can be used to reffer to the same thing.
            <br/><br/>
            In a <red>CAN</red> <red>network</red>, messages transferred across the network are referred to as <red>frames</red>. 
            Each <red>frame</red> contains essential information that <azure>allows</azure> <azure>ECUs</azure> to communicate effectively. 
            <br/><br/>
            When the transmission of a Message/<purple>PDU</purple> within a single <red>frame</red> is not possible due to the <purple>size</purple> limitations 
            (8 <purple>bytes</purple> for <purple>Data</purple> <purple>Field</purple>), 
            the Message/<purple>PDU</purple> can be transmitted across multiple <red>frames</red>, in segmented parts. This <azure>process</azure> is called 
            "Segmentation and Reassembly".
            <br/><br/>
            A <purple>Protocol</purple> <purple>Data</purple> <purple>Unit</purple> (<purple>PDU</purple>) is a <red>generic</red> term used to describe a unit of <purple>data</purple> specified in a protocol at any <purple>layer</purple> of 
            the OSI model. It represents the <purple>data</purple> that is transmitted over a network and can vary in <purple>structure</purple> depending on the 
            protocol being used.
            <br/><br/>
            A <red>frame</red> is a specific <purple>type</purple> of <purple>PDU</purple> used at the <purple>data</purple> link <purple>layer</purple> of the OSI model. It is a <purple>structured</purple> unit of 
            <purple>data</purple> that includes not only 
            the <red>payload</red> (the actual <purple>data</purple>) but also control information necessary for <purple>data</purple> transmission.
            <br/><br/>
            In other words: A Message/<purple>PDU</purple> is a term used to reffer to the packed <purple>data</purple> within the <azure>ECU</azure>, where as the <red>Frame</red> is term used 
            to reffer to the packed <purple>data</purple> travelling through the <red>bus</red> from one <azure>ECU</azure> to another. So once a transmitted <purple>PDU</purple> has left the <azure>ECU</azure> 
            it turns into a <red>Frame</red>, then the <red>Frame</red> is <azure>read</azure> by the recipient <azure>ECU</azure> and turns back into a Message/<purple>PDU</purple>.
            <br/><br/>
            If the Message/<purple>PDU</purple> was receiving across multiple <red>frames</red>, it will be reassembled back together into a single 
            unit once all the <red>frames</red> carrying the segmented parts of the Message/<purple>PDU</purple> were received.
            <br/><br/>
            <brown>Data Rates:</brown>
            <br/><br/>
            CAN supports <purple>data</purple> rates up to 1 Mbps, making it <azure>efficient</azure> for many applications.  
            A rate of 1 megabit per second (Mbps) means that the network can send 1 million <purple>bits</purple> of <purple>data</purple> every second.
            <br/><br/>
            At 1 Mbps, the <purple>CAN</purple> <purple>protocol</purple> can transfer up to 8 <purple>bytes</purple> of <purple>data</purple> per <red>frame</red>. This is the maximum <red>payload</red> <purple>size</purple> for a standard <red>CAN</red> <red>frame</red>, 
            which is suitable for many automotive and industrial applications. 
            <br/><br/>
            While 1 Mbps is effective for many applications, 
            it can be a limiting factor for <red>systems</red> that require higher <purple>data</purple> throughput. This is where <red>CAN</red> <red>FD</red> (Flexible <purple>Data</purple>-rate) 
            comes into play, <azure>allowing</azure> for higher speeds (up to 5 Mbps) and larger <purple>data</purple> <red>payloads</red>.
            <br/><br/>
            <brown>Bus Speed:</brown>
            <br/><br/>
            <azure>Bus</azure> <azure>speed</azure>, often referred to as the <azure>baud</azure> <azure>rate</azure>, is the rate at which the <red>bus</red> can transmit <purple>bits</purple>. 
            It is <azure>closely</azure> related to the <purple>Data</purple> Rate but can differ due to protocol <azure>overhead</azure>.
            <br/><br/>
            The <azure>bus</azure> <azure>speed</azure> is generally aligned with the <purple>data</purple> rate, but the effective <purple>data</purple> 
            transfer can be lower due to factors like:
            <br/><br/>
            <indigo>Protocol Overhead:</indigo> refers to the extra <purple>data</purple> that is transmitted alongside the actual user <purple>data</purple> 
            in a network communication. In our case: The additional <purple>bits</purple> used for error checking and message <red>framing</red> are sent within
            the same <red>frame</red> alongside the <purple>Data</purple> <purple>Field</purple>.
            <br/><br/>
            <indigo>Network Length:</indigo> Longer <red>bus</red> lengths can reduce the effective speed due to <purple>signal</purple> degradation. 
            While <purple>signal</purple> degradation doesn't directly slow down the speed of light at which the <purple>signal</purple> travels through the 
            <red>cable</red>, it does effectively reduce the <purple>data</purple> transfer rate, making it appear as if the <purple>signal</purple> is moving slower.
            <br/><br/>
            <azure>Baud</azure> <azure>rate</azure> represents the number of symbols (like 0s and 1s) that can be transmitted per second over the <red>bus</red>.
            <br/>
            <azure>Bus</azure> <azure>speed</azure> describes the overall transmission capability of the <red>bus</red>, which is directly related to the <azure>baud</azure> <azure>rate</azure>.
            <br/><br/>
            <green>Types of CAN Frames</green>
            <br/><br/>
            <indigo>Data Frame:</indigo>
            <br/>
            The most common <purple>type</purple>, used to transmit <purple>data</purple> from one <azure>ECU</azure> to another.
            <br/><br/>
            <indigo>Remote Frame:</indigo>
            <br/>
            Requests <purple>data</purple> from another <azure>ECU</azure> without carrying any <purple>data</purple> itself. 
            
                <enum>When an <azure>ECU</azure> needs <purple>data</purple> from another <azure>ECU</azure>, it sends a <azure>Remote</azure> <azure>Frame</azure>. 
                This <azure>remote</azure> <azure>frame</azure> includes the <purple>identifier</purple> of the <azure>data</azure> <azure>frame</azure> it wants to receive. 
                </enum>
                <enum>Upon receiving the <azure>Remote</azure> <azure>Frame</azure>, 
                the targeted <azure>ECU</azure> recognizes the request and prepares to send the corresponding <azure>Data</azure> <azure>Frame</azure>.
                The <azure>Data</azure> <azure>Frame</azure> will then be transmitted back to the requesting <azure>ECU</azure>, containing the requested information.
                </enum>
            
            <br/>
            <indigo>Error Frame:</indigo>
            <br/>
            Indicates that an error has occurred in the transmission, prompting corrective actions. The <azure>Error</azure> <azure>Frame</azure> consists of 
            a 6-<purple>bit</purple> <purple>field</purple> that indicates the presence of an error. It is transmitted as a series of dominant <purple>bits</purple> (0s) or 
            recessive <purple>bits</purple> (1s), depending on the <purple>type</purple> of error detected and a delimiter that indicates the end of the <azure>Error</azure> <azure>Frame</azure>.
            
                <enum>Each node (<azure>ECU</azure>) on the <red>CAN</red> <red>bus</red> continuously monitors the messages being transmitted. If a node detects an error 
                (such as a <purple>bit</purple> error, format error, or <purple>acknowledgment</purple> error), it triggers the transmission of an <azure>Error</azure> <azure>Frame</azure>.
                </enum>
                <enum>
                Once an <azure>Error</azure> <azure>Frame</azure> is generated, it is immediately sent onto the <red>CAN</red> <red>bus</red>. All other nodes on the network 
                recognize this <red>frame</red> and take appropriate action, such as stopping their current transmission and preparing 
                to retransmit the message that caused the error.
                </enum>
                <enum>
                After the <azure>Error</azure> <azure>Frame</azure> is sent, the node (<azure>ECU</azure>) that detected the error will enter an error state. There are different 
                error states (active, passive, and <red>bus</red>-off) that determine how the node (<azure>ECU</azure>) will behave in future communications.
                </enum>
            
            <br/>
            <indigo>Overload Frame:</indigo>
            <br/>
            Used to <purple>signal</purple> that a node (<azure>ECU</azure>) is temporarily unable to <azure>process</azure> incoming messages. 
            An <azure>Overload</azure> <azure>Frame</azure> is transmitted when a node (<azure>ECU</azure>) needs more time to <azure>process</azure> incoming messages. 
            This can occur if:
            
                <enum>The node (<azure>ECU</azure>) is busy <azure>processing</azure> previous messages.</enum>
                <enum>The node's buffer is full, and it cannot accept new messages at that moment.</enum></can-protocol>
        <can-transceiver>The <red>CAN</red> <red>Transceiver</red> acts as a bridge between the <red>CAN</red> <red>bus</red> and the Microcontroller (MCU). 
            It converts the differential voltage <azure>signals</azure> on the <red>CAN</red> <red>High</red> (<red>CANH</red>) and <azure>CAN</azure> <azure>Low</azure> (<azure>CANL</azure>) <red>lines</red> into a 
            single-ended digital <purple>signal</purple> that the Microcontroller (MCU) can understand.
            <br/><br/>
            <brown>Differential Signal Interpretation:</brown>
            <br/>
            The <red>transceiver</red> interprets the voltage levels as follows:
            
            <enum>Dominant State: When the voltage difference indicates a dominant <purple>bit</purple> (e.g., <red>CANH</red> at approximately 3.5V and <azure>CANL</azure> at about 
            1.5V), the <red>transceiver</red> recognizes this as a <purple>binary</purple> 0. This state indicates an active transmission from a node (<azure>ECU</azure>) so the communication
            is going through the <red>bus</red>.
            </enum>
            <enum>Recessive State: When both wires are at the same voltage level (around 2.5V), it is interpreted as a 
            <purple>binary</purple> 1. When no node (<azure>ECU</azure>) is actively sending <purple>data</purple>, the <red>bus</red> remains in the recessive state meaning No Communication is
            going through the <red>bus</red>.
            </enum>
            <enum>
            <red>Bus</red> Idle State: When there is no communication, the <red>bus</red> is in an idle state, which is characterized by 
            the recessive state (higher voltage on the <red>bus</red>). The <red>transceiver</red> continuously monitors the <red>bus</red> for 
            any changes in voltage.
            </enum>
            
            On the dominant state, both <purple>bit</purple> 0 and <purple>bit</purple> 1 can be transmitted. This is where things get a little tricky in 
            CAN communication. The dominant state (lower voltage) represents a <purple>bit</purple> 0. This is straightforward.
            <br/><br/>
            In order to transmit a <purple>bit</purple> 1, a node (<azure>ECU</azure>) doesn't actively pull the <red>bus</red> voltage down to the dominant state. 
            Instead, it <azure>allows</azure> the voltage to remain in the recessive state (higher voltage).
            <br/><br/>
            Think of it like this:
            <br/>
            Imagine a group of people shouting. When someone wants to say "yes" (<purple>bit</purple> 0), they shout loudly. 
            When they want to say "no" (<purple>bit</purple> 1), they don't shout. They simply remain silent, <azure>allowing</azure> the 
            background noise (recessive state) to continue.
            <br/><br/>
            <brown>Difference between Recessive State and a consecutive group of bits of value 1</brown>
            <br/><br/>
            If you send 111111111 on the <red>bus</red>, the <red>CAN</red> <red>Transceiver</red> will definitely know there's communication happening. 
            Here's why:
            
                <enum>The <purple>CAN</purple> <purple>protocol</purple> is designed to recognize patterns of <purple>bits</purple>. It's not just about individual <purple>bits</purple>; 
                it's about how they are arranged and timed.</enum>
                <enum>The <red>CAN</red> <red>Transceiver</red> is <purple>constantly</purple> monitoring the <red>bus</red>. It's looking for specific patterns of <purple>bits</purple> that <purple>signal</purple> 
                the <azure>start</azure> of a message, the <purple>data</purple> <purple>bits</purple> within the message, and the end of the message.
                </enum>
                <enum>
                A <purple>string</purple> of 1s, even if it's just a series of recessive states, is still a pattern that the CAN 
                <red>Transceiver</red> will recognize. It will know that a node (<azure>ECU</azure>) is actively holding the <red>bus</red> in the recessive 
                state for the duration of those <purple>bit</purple> times.
                </enum>
            
            So basically, whenever a node (<azure>ECU</azure>) sends a message on the CAN it <azure>starts</azure> transmitting with a distinguishable 
            <purple>binary</purple> <azure>sequence</azure> (<purple>SOF</purple> <purple>bit</purple>) and it ends the transmission with a different distinguishable <purple>binary</purple> <azure>sequence</azure> (<purple>EOF</purple> <purple>bit</purple>).

                <enum><indigo>Start of Frame (SOF):</indigo> This is a single dominant <purple>bit</purple> (0) that marks the beginning of a message. 
                Think of it like a "Hey, everyone, listen up!" <purple>signal</purple>.</enum>
                <enum><indigo>Data:</indigo> This is the actual message content, consisting of a series of <purple>bits</purple> representing the <purple>data</purple> 
                being transmitted.</enum>
                <enum><indigo>End of Frame (EOF):</indigo> This is a <azure>sequence</azure> of seven dominant <purple>bits</purple> (0s) followed by a recessive <purple>bit</purple> (1). 
                It's like a "That's all, folks!" <purple>signal</purple>.</enum>
            
            <brown>Digital Signal Outputting:</brown>
            <br/>
            The <red>transceiver</red> outputs a digital <purple>signal</purple> (high or low) to the Microcontroller (MCU) <red>based</red> on the interpreted 
            voltage levels. This digital <purple>signal</purple> can then be <azure>processed</azure> by the Microcontroller (MCU) for further actions, 
            such as <purple>data</purple> logging, control commands, or communication with other devices.
            <br/><br/>
            <brown>Error Detection Scenario in CAN Transceiver:</brown>
            <br/>
            Imagine a <red>CAN</red> <red>bus</red> with two wires, <red>CANH</red> and <azure>CANL</azure>, transmitting a dominant <purple>bit</purple> (1). 
            This means <red>CANH</red> should be at a higher voltage (around 3.5V) than <azure>CANL</azure> (around 1.5V).
            <br/><br/>
            <indigo>Fault:</indigo> Let's say there's a fault in the <red>CANH</red> wire, causing it to short-circuit to ground. 
            This would drop the voltage on <red>CANH</red> to 0V.
            <br/><br/>
            <indigo>With Differential Signaling:</indigo>
            <br/>
            The <red>CAN</red> <red>transceiver</red> <azure>compares</azure> the voltage levels of <red>CANH</red> and <azure>CANL</azure>. It sees that <red>CANH</red> is at 0V, and <azure>CANL</azure> is still at 1.5V.
            <br/>
            The <red>transceiver</red> recognizes this voltage difference as an error. It knows that the intended <purple>signal</purple> was a dominant <purple>bit</purple> (1), 
            even though the <red>CANH</red> wire is faulty.
            <br/><br/>
            This <azure>allows</azure> the <red>transceiver</red> to flag the error and potentially request a retransmission of the message.
            <br/><br/>
            <indigo>Without Differential Signaling:</indigo>
            <br/>
            A standard single-ended <red>system</red> would only see the voltage on <red>CANH</red> as 0V. It would incorrectly 
            interpret this as a recessive <purple>bit</purple> (0), even though the intended <purple>signal</purple> was a dominant <purple>bit</purple> (1).
            <br/><br/></can-transceiver>
        <can-controller-driver><brown>CAN Controller and CAN Driver</brown>
            <br/><br/>
            The <purple>CAN</purple> <purple>Controller</purple> is usually integrated within a Microcontroller Unit (MCU). This integration <azure>allows</azure> 
            the MCU to manage communication without needing additional hardware. Even if an MCU has an integrated 
            <purple>CAN</purple> <purple>Controller</purple>, it will still require an external <red>CAN</red> <red>Transceiver</red> to connect to the <red>CAN</red> <red>bus</red>.
            <br/><br/>
            <indigo>Serial Peripheral Interface (SPI)</indigo>
            <br/><br/>
            In case of <azure>ECUs</azure> which use external Controllers (which are not part of the Microcontroller), these controllers
            are usually connected using the <purple>SPI</purple> (<purple>Serial</purple> <purple>Peripheral</purple> <purple>Interface</purple>).
            <br/><br/>
            The number of <purple>SPI</purple> (<purple>Serial</purple> <purple>Peripheral</purple> <purple>Interface</purple>) pins on a microcontroller can vary depending on 
            the specific microcontroller model and its architecture. However, here are the typical 
            pins associated with <purple>SPI</purple> communication:
            <br/><br/>
            <brown>Common SPI Pins:</brown>
            
                <enum><indigo>MOSI (Master Out Slave In):</indigo> Carries <purple>data</purple> from the master to the slave.</enum>
                <enum><indigo>MISO (Master In Slave Out):</indigo> Carries <purple>data</purple> from the slave back to the master.</enum>
                <enum><indigo>SCK (Serial Clock):</indigo> Synchronizes <purple>data</purple> transmission between master and slave.</enum>
                <enum><indigo>SS (Slave Select):</indigo> Used by the master to select which slave device to communicate with.</enum>
            
            At least 4 pins are required for basic <purple>SPI</purple> communication (MOSI, MISO, SCK, and one SS pin).
            <br/><br/>
            If you have multiple slave devices, you will need an additional SS pin for each slave, which can 
            increase the total number of pins used.
            <br/><br/>
            For <red>instance</red>, a microcontroller with 3 slave devices would require:
            <br/>
            4 pins (MOSI, MISO, SCK, and one SS) + 3 additional SS pins = 7 pins in total.
            <br/><br/>
            Some microcontrollers may <azure>allow</azure> you to configure <purple>SPI</purple> using different pins, and some might have 
            dedicated hardware support for <purple>SPI</purple>, which can simplify the pin usage.
            <br/><br/>
            <brown>External CAN Controller connection through SPI:</brown>
            <br/><br/>
            <img class="database_image" src="./website_resources/local/database/pictures/external_can_controller.png" alt="external_can_controller"/>
            <br/><br/>
            Connecting an external <purple>CAN</purple> <purple>Controller</purple> to the Microcontroller using <purple>SPI</purple> instead of dedicated <purple>CAN</purple> <purple>Hardware</purple> <red>Interface</red> is 
            a choice <red>based</red> on the specifics of the project. Sometimes the built-in <purple>CAN</purple> <purple>Hardware</purple> <red>Interface</red> does not satisfy the project's specifics.
            <br/><br/>
            <purple>SPI</purple> can provide higher <purple>data</purple> rates <azure>compared</azure> to some built-in <red>interfaces</red>, which can be crucial for applications requiring fast communication.
            <br/>
            If the built-in <purple>CAN</purple> <purple>interface</purple> is complex or lacks certain functionalities, using an external <purple>CAN</purple> <purple>controller</purple> with <purple>SPI</purple> can simplify your design.
            <br/><br/>
            <green>CAN Driver</green>
            <br/><br/>
            Regardless if the <purple>CAN</purple> <purple>controller</purple> is built-in the microcontroller or external to the microcontroller, the <azure>CAN</azure> <azure>Driver</azure> controlling it will always 
            be part of the microcontroller.
            <br/><br/>
            The <purple>CAN</purple> <purple>Controller</purple> is controlled by a <azure>CAN</azure> <azure>Driver</azure>. The <azure>CAN</azure> <azure>Driver</azure> acts as an <red>interface</red> between the 
            <purple>Operating</purple> <red>System</red> (<purple>RTOS</purple>) (or <purple>Application</purple> <purple>Layer</purple>) and the <purple>CAN</purple> <purple>Controller</purple>. 
            <br/><br/>
            The <azure>CAN</azure> <azure>Driver</azure> may include <red>functions</red> through which the <red>CAN</red> <red>Transceiver</red> can be configured. For <red>instance</red> 
            the <azure>CAN</azure> <azure>Driver</azure> might be able to: 
            
                <enum>to adjust the <azure>baud</azure> <azure>rate</azure> used by <red>CAN</red> <red>Transceiver</red>;</enum>
                <enum>to enable or disable the <red>Transceiver</red>. This controls whether the <red>transceiver</red> is actively 
                listening for <purple>data</purple> or transmitting <purple>data</purple>. </enum>
                <enum>to <purple>set</purple> the <red>transceiver's</red> <purple>operating</purple> mode: This might include different modes for normal 
                <purple>operation</purple>, sleep mode, or a low-power mode.</enum>
                <enum>to configure the filters used by the <red>Transceiver</red>. These filters <azure>allow</azure> the <red>transceiver</red> to 
                selectively accept or reject incoming messages <red>based</red> on their ID.</enum> 
                <enum>to manage the errors handling for the <red>Transceiver</red>. The <azure>CAN</azure> <azure>Driver</azure> might provide <red>functions</red> to 
                check for errors, 
                report them to the <purple>RTOS</purple>, and potentially take corrective actions.</enum>
            
            <br/>
            The <azure>CAN</azure> <azure>Driver</azure> also provides the necessary <red>functions</red> to send and receive messages over the <red>CAN</red> <red>network</red>. These 
            <red>functions</red> may be used directly by the <purple>RTOS</purple> or may be called by <purple>RTOS</purple> through <red>interfaces</red> defined by <purple>CANIF</purple> <red>module</red>. 
            <br/>
            For example, the <purple>RTOS</purple> might call <red>functions</red> like 
            <code>CAN_Send(message)</code> to transmit messages or 
            <code>CAN_Receive()</code> to handle incoming messages.
            <br/><br/>
            
            The <purple>RTOS</purple> utilizes <red>functions</red> from the <azure>CAN</azure> <azure>Driver</azure> to handle errors reported on the <purple>CAN</purple> <purple>Controller</purple>, <azure>allowing</azure> for robust 
            error management in the <red>system</red>.
            <br/><br/>
            The <purple>CAN</purple> <purple>Controller</purple> can report several <purple>types</purple> of errors that are crucial for <azure>maintaining</azure> the integrity 
            of communication on the <red>CAN</red> <red>bus</red>. Some of the errors reported by <purple>CAN</purple> <purple>Controller</purple> are:
            
                <enum><indigo>Bit Error:</indigo> This occurs when the <purple>bit</purple> received does not <azure>match</azure> the <purple>bit</purple> transmitted. 
                It can happen 
                due to noise or interference on the <red>bus</red>.
                </enum>
                <enum><indigo>Form Error:</indigo> This error is detected when the format of a received <red>frame</red> is incorrect. 
                For example, if the 
                <red>frame</red> does not adhere to the expected <purple>structure</purple>, a form error is triggered.
                </enum>
                <enum><indigo>Stuff Error:</indigo> This happens when the <purple>bit</purple> stuffing rule is violated. In CAN, after five 
                consecutive <purple>bits</purple> of the 
                same <purple>value</purple>, a complementary <purple>bit</purple> is <azure>inserted</azure>. If this rule is not followed, a <red>stuff</red> <red>error</red> is reported.
                <br/><br/>
                <red>Bit</red> <red>Stuffing</red> <red>Process</red>: In CAN communication, if there are five consecutive <purple>bits</purple> of the same <purple>value</purple> (either all 0s or all 1s), 
                a stuff <purple>bit</purple> (the opposite <purple>value</purple>) is <azure>inserted</azure> to <purple>break</purple> the <azure>sequence</azure>.  
                If the receiver detects that a stuff <purple>bit</purple> was <azure>added</azure> incorrectly (i.e., it does not <azure>match</azure> the expected <purple>value</purple>), 
                it <purple>registers</purple> a <red>stuff</red> <red>error</red>.
                <br/>
                This means the receiver does not expect more 5 <purple>bits</purple> of same <purple>value</purple> in a row. If it detects such a <azure>sequence</azure> 
                it will raise an <red>Stuff</red> <red>Error</red>.
                <br/><br/>
                Example: A <azure>sequence</azure> such as: 10111111000 will raise a <red>Stuff</red> <red>error</red>. Because there are 6 <purple>bits</purple> of 1 in a row.
                <br/><br/>
                Without this <red>Stuffing</red> <red>Bit</red> mechanism the receiver will not be sure if the number of <purple>bits</purple> it <azure>read</azure> 
                from the communication is exactly the same number of <purple>bits</purple> sent by the <azure>source</azure>.
                <br/><br/>
                The <red>stuffing</red> <red>bits</red> are part of the <red>Frames</red> but NOT part of the <purple>PDUs</purple>.
                <br/><br/>
                It's the <purple>CANIF's</purple> job to decode the information, and turn it back into a <purple>PDU</purple>, hence <purple>removing</purple> the 
                <red>stuffing</red> <red>bits</red>.
                </enum>
                <enum><indigo>CRC Error:</indigo> The <red>Cyclic</red> <red>Redundancy</red> <red>Check</red> (<red>CRC</red>) is used to detect errors in the 
                transmitted <purple>data</purple>. If the <red>CRC</red> 
                calculated by the receiver does not <azure>match</azure> the <red>CRC</red> sent with the message, a <red>CRC</red> error is reported.
                </enum>
                <enum><indigo>Acknowledgment Error:</indigo> This error occurs when a transmitted message is not acknowledged 
                by any node on the <red>bus</red>. 
                Each node is expected to send an <purple>acknowledgment</purple> <purple>bit</purple> after receiving a message, and if this does not happen, 
                an <purple>acknowledgment</purple> error is flagged.</enum>
            
            <br/>
            The <azure>CAN</azure> <azure>Driver</azure> often uses mechanisms like semaphores or queues to synchronize access to the <red>CAN</red> <red>bus</red>, ensuring that 
            <azure>tasks</azure> do not interfere with each other during message transmission or reception.
            <br/><br/>
            <brown>How does the CAN Controller interract with the outside world?</brown>
            
                <enum>The <purple>CAN</purple> <purple>Controller</purple> can <azure>start</azure> a transmission when it detects an idle <red>bus</red>. This means that the <red>bus</red> is not 
                currently being used by any other node (<azure>ECU</azure>).</enum>
                <enum>If the <red>bus</red> is currently used by a different <azure>ECU</azure>. Our <azure>ECU</azure> can attempt to take over the <red>bus</red>
                by broadcasting our <red>CAN</red> <red>ID</red>. If we have higher priority (lower <red>CAN</red> <red>ID</red>) the <azure>ECU</azure> using the <red>bus</red> will have
                to abort its transmission, and free the <red>bus</red> for our <azure>ECU</azure>.
                </enum>
                <enum>When a node (<azure>ECU</azure>) wants to send a message, the <purple>CAN</purple> <purple>Controller</purple> encodes the message according to the 
                <purple>CAN</purple> <purple>protocol</purple>, which includes the <purple>Identifier</purple>, <purple>Data</purple>, and Control Information.</enum>
                <enum>The <purple>CAN</purple> <purple>Controller</purple> continuously monitors the <red>bus</red> for incoming messages. When it detects a message, 
                it decodes it and <azure>processes</azure> the <purple>data</purple>. It also checks for errors during transmission, ensuring that 
                the <purple>data</purple> received is valid. If an error is detected, the <purple>CAN</purple> <purple>Controller</purple> will <purple>signal</purple> this by sending an 
                <azure>error</azure> <azure>frame</azure> onto the <red>bus</red>. 
                <br/><br/>
                The <purple>CAN</purple> <purple>Controller</purple> <azure>maintains</azure> error <azure>counters</azure> to track the number of errors encountered. If the error 
                <azure>count</azure> exceeds a certain threshold, the controller may enter a <red>bus</red>-off state, where it temporarily 
                stops transmitting to prevent further issues on the <red>bus</red>.
                <br/><br/>
                In the event of a <red>bus</red>-off state, the <purple>CAN</purple> <purple>Controller</purple> will eventually attempt to recover by reinitializing 
                itself and resuming normal <purple>operation</purple> once the <red>bus</red> is clear and stable.
                </enum>
                <enum>
                In cases where multiple nodes (<azure>ECUs</azure>) attempt to transmit <azure>simultaneously</azure>, the <purple>CAN</purple> <purple>protocol</purple> uses a <red>method</red> called 
                <azure>arbitration</azure>. The <purple>CAN</purple> <purple>Controller</purple> uses the message <purple>identifier</purple> to determine which message has the highest 
                priority and <azure>allows</azure> that message to proceed while others wait.
                </enum>
                <enum>
                The <purple>CAN</purple> <purple>Controller</purple> can <purple>operate</purple> in different modes, such as normal mode, listen-only mode, and loopback 
                mode, depending on the application requirements.
                </enum>
            
            <br/></can-controller-driver>
        <can-interface><brown>CAN Interface (CanIf)</brown>
            <br/><br/>
            The <purple>RTOS</purple> manages multiple <azure>tasks</azure> that may need to send or receive CAN messages. When a <azure>task</azure> wants to send a 
            message over the <red>CAN</red> <red>network</red>, it calls directly or indirectly the appropriate <red>function</red> from <purple>CanIf</purple> <red>module</red> 
            which builds reliable <red>interfaces</red> by calling <red>functions</red> defined within the <azure>CAN</azure> <azure>Driver</azure>. 
            <br/><br/>
            <indigo>Concrete Example of Communication between ECUs:</indigo>
                <enum>SWC generates <purple>data</purple> that needs to be sent to external world through the <red>CAN</red> <red>network</red>.</enum>
                <enum>SWC passed the <purple>data</purple> to <red>RTE</red>, which <red>based</red> on the <red>system</red> description knows in which 
                    <purple>signal</purple> the <purple>data</purple> will end up. 
                    <br/><br/>
                    If the <purple>signal</purple> in which the <purple>data</purple> will be <azure>stored</azure> is meant to be sent to an external <azure>ECU</azure>, 
                    and if the external <azure>ECU</azure> receiving it is of different architecture, then 
                    <red>RTE</red> may convert the <purple>data</purple> (Ex: from Little Endian to Big Endian) to <azure>match</azure> 
                    the receiver <azure>ECU's</azure> architecture.
                </enum>
                <enum>Once <purple>data</purple> is converted, <red>RTE</red> maps the <purple>data</purple> to an <purple>RTOS</purple> Scheduling <azure>Task</azure>, 
                    which is responsible for managing the CAN communication.
                </enum>
                <enum><purple>RTOS</purple> <azure>Task</azure> passes the <purple>data</purple> to a <azure>Communication</azure> <azure>Stack</azure> <red>module</red> which will map it to a <purple>Signal</purple>.</enum>
                <enum><purple>CanIf</purple> <red>interface</red> as part of <azure>Communication</azure> <azure>Stack</azure>, takes over the <azure>updated</azure> <purple>Signal</purple> which 
                    may or may not be part of a <purple>Signal</purple> Group and packs it into a <purple>PDU</purple>.
                    <br/><br/>
                    <red>Based</red> on the <purple>size</purple> of the <purple>PDU</purple> / Message, the <purple>CanIf</purple> 
                    will determine if the segmentation is needed. On <red>CAN</red> <red>bus</red> we are only <azure>allowed</azure> to send messages up to 8 <purple>bytes</purple>. 
                    If the message to be sent is bigger than 8 <purple>bytes</purple>, it needs to be <azure>sliced</azure> into multiple <red>Frames</red>. 
                    <br/><br/>
                    Each <red>Frame</red> will contain the same message ID, <red>CAN</red> <red>ID</red> and <red>CRC</red>, a <azure>sequential</azure> <azure>SQC</azure> / <azure>SQN</azure> (<azure>Sequence</azure> <azure>Counter</azure> or 
                    <azure>Sequence</azure> <azure>Number</azure>) and only a <azure>portion</azure> of the actual <purple>data</purple>
                </enum>
                <enum>In order to perform segmentation <purple>CanIf</purple> will call a specific <red>function</red> from <red>CanTp</red> <red>module</red> to inform that 
                     a new CAN N-<purple>PDU</purple> <red>frame</red> has been received.
                     <br/><br/>
                     This is done through a reception indication <red>function</red>, which informs the <red>CanTp</red> <red>module</red> that it needs to 
                     handle the segmentation of the incoming <purple>data</purple>.
                     <br/><br/>
                     <red>CanTp</red> <red>module</red> will then <purple>break</purple> down the larger message into smaller <red>frames</red> that fit within the 8-<purple>byte</purple> limit.
                </enum>
                <enum><purple>CanIf</purple> then receives the <red>frames</red> from <red>CanTp</red>, and notifies the <azure>CAN</azure> <azure>Driver</azure> that everything is 
                    <purple>set</purple> for transmission.
                </enum>
                <enum><azure>CAN</azure> <azure>Driver</azure> monitors the activity on the <red>bus</red>.
                    <br/><br/>
                    Only if the <red>bus</red> is busy, the <azure>CAN</azure> <azure>Driver</azure> participates in the <azure>arbitration</azure> <azure>process</azure> to determine if 
                    it can send its message. 
                    <br/><br/>
                    This happens before the actual <red>frame</red> <purple>data</purple> is transmitted.                
                    <br/><br/>
                    Once <azure>CAN</azure> <azure>Driver</azure> wins the <azure>Arbitration</azure> <azure>Phase</azure> or once the <red>bus</red> gets freed, <azure>CAN</azure> <azure>Driver</azure>
                    will inform the <purple>CanIf</purple>, that the transmission can begin.
                </enum>
                <enum><purple>CanIf</purple> receives the notification from <azure>CAN</azure> <azure>Driver</azure>, and passes the first <red>frame</red> to the <azure>CAN</azure> <azure>Driver</azure>.</enum>
                <enum><azure>CAN</azure> <azure>Driver</azure> takes the <red>frame</red>, and informs the <red>CAN</red> <red>Transceiver</red> that <purple>data</purple> will be coming.</enum>
                <enum><red>CAN</red> <red>Transceiver</red> sends a distinguishable <purple>binary</purple> <azure>sequence</azure> (<purple>SOF</purple> <purple>bit</purple>) on the <red>bus</red>, which would 
                    reserve a slot for message transmission.
                </enum>
                <enum><azure>CAN</azure> <azure>Driver</azure> sends each <purple>bit</purple> within the <red>frame</red>, individually, to the <red>CAN</red> <red>Transceiver</red>.</enum>
                <enum><red>CAN</red> <red>Transceiver</red> receives the <purple>bit</purple> and turns it into voltage. 
                    A <purple>bit</purple> 0 is equivalent to a voltage difference greater than 0V between <red>CANH</red> and <azure>CANL</azure> 
                    This typically means having 4.5V on <red>CANH</red>, and 1.5V on <azure>CANL</azure>. 
                    <br/><br/>
                    A <purple>bit</purple> 1 is equivalent to a voltage difference near 0V. 
                    This typically means having 2.5V on each wire: <red>CANH</red> and <azure>CANL</azure>.
                    <br/><br/>
                    The <red>transceivers</red> use the voltage difference between the <red>CANH</red> and <azure>CANL</azure> to determine the <purple>bit</purple> <purple>value</purple>.
                    <br/><br/>
                    The <red>transceiver</red> might <azure>add</azure> <red>staffing</red> <red>bits</red> in their transmission if the same 5 <purple>bits</purple> are sent in a row.
                    This means that the <red>CAN</red> <red>Transceiver</red> will <azure>add</azure> an extra <purple>bit</purple> of opposite <purple>value</purple> after every 5 <purple>bits</purple> of 
                    the same <purple>value</purple>.
                </enum>
                <enum>While we are sending the message on the <red>bus</red>, <purple>bit</purple> by <purple>bit</purple>, <red>frame</red> by <red>frame</red>. All other <azure>ECUs</azure> listen, 
                    and wait for their 
                    turn to reach for the <red>bus</red> and send their messages.
                </enum>
                <enum>The listening <azure>ECUs</azure> will <azure>read</azure> our <purple>binary</purple> <purple>data</purple> and 
                     they will begin to <azure>write</azure> down every <purple>bit</purple> we send within that transmission.
                </enum>
                <enum>In case any other <azure>ECU</azure> with higher priority (lower <red>CAN</red> <red>Id</red>) 
                    within the network will request communication,
                    our message will be intrerrupted. 
                    <br/><br/>
                    Within a network: <azure>ECUs</azure> have <purple>static</purple> priority. Meaning that the priority 
                    it's <red>pre</red>-<red>defined</red> in the network design and doesn't change during communication.
                    <br/><br/>
                    Also the priority an <azure>ECU</azure> has in one network for <red>instance</red> CAN may be bigger than the same <azure>ECU</azure> has on 
                    a different network, for <red>instance</red>: <red>LIN</red>. This happens because on some network <azure>ECUs</azure> may transmit more important
                    <purple>PDUs</purple> or communicate with more important <azure>ECUs</azure> than on other networks.
                    <br/><br/>
                    While our <azure>ECU</azure> is transmitting, it continuously monitors the <red>bus</red>. If it detects a dominant level 
                    (a <purple>logical</purple> '0') when we are actually sending a recessive level (a <purple>logical</purple> '1'), 
                    this will indicate to us that another node (<azure>ECU</azure>) is trying to send a message. 
                    This is part of the <purple>CAN</purple> <purple>protocol's</purple> collision detection mechanism.
                    <br/><br/>
                    The <red>bus</red> will enter <azure>Arbitration</azure> <azure>Phase</azure>: meaning the <azure>ECU</azure> is both transmitting its own 
                    <red>CAN</red> <red>ID</red> and monitoring the <red>bus</red> for any dominant levels (<purple>logical</purple> '0').
                    <br/><br/>
                    As each <purple>bit</purple> of the <red>CAN</red> <red>ID</red> is transmitted by the other <azure>ECU</azure>, our <azure>ECU</azure> <azure>compares</azure> its own <purple>bit</purple> 
                    with the <purple>bit</purple> travelling through the <red>bus</red>.
                    <br/><br/>
                    This <azure>comparison</azure> <azure>starts</azure> from the <red>most</red> <red>significant</red> <red>bit</red> (<red>MSB</red>) of the <red>CAN</red> <red>ID</red> and proceeds 
                    towards the <azure>least</azure> <azure>significant</azure> <azure>bit</azure> (<azure>LSB</azure>).
                    <br/><br/>
                    The first <purple>bit</purple> where the IDs differ determines the priority. The <azure>ECU</azure> with the dominant <purple>bit</purple> 
                    (<purple>logical</purple> '0') in that position wins the <azure>arbitration</azure> and gets to continue transmitting. 
                    The <azure>ECU</azure> with the recessive <purple>bit</purple> (<purple>logical</purple> '1') loses the <azure>arbitration</azure> and stops transmitting.
                    <br/><br/>
                    The <azure>ECU</azure> transmitting <purple>bit</purple> 0 wins because lower <red>CAN</red> <red>ID</red> means higher priority.  This happens also 
                    because a dominant state <red>overrides</red> a recessive state (<purple>bit</purple> 1).
                </enum>
                <enum>
                    We will stop the transmission and free the <red>bus</red>.
                    Meaning, we <azure>read</azure> the intent of an <azure>ECU</azure> with higher priority (lower <red>CAN</red> <red>Id</red>) for transmission 
                    and now the <red>bus</red> will be reserved by that <azure>ECU</azure>.
                    
                    </enum>
                    <enum>
                    We will enter a wait state.
                    The <azure>ECU</azure> with which we were communicating will discard the received <purple>data</purple> since it's incomplete transmission.
                    <br/>
                    We will attempt to retransmit the <purple>data</purple> after a short delay.
                </enum>
                <enum>
                    The other <azure>ECU</azure> sends its message and frees the <red>bus</red>.
                </enum>
                <enum>
                    Once the <red>bus</red> gets free, we will restart our communication.
                </enum>
                <enum>
                    Once all the <red>frames</red> were sent, the <red>CAN</red> <red>Transceiver</red> will send a distinguishable <purple>binary</purple> <azure>sequence</azure> (<purple>EOF</purple> <purple>bit</purple>) 
                    which will notify the receipient <azure>ECU</azure> that the message is complete, and the <red>bus</red> will become free again.
                </enum>
                <enum>
                    On the receipient <azure>ECU</azure>, the <red>CAN</red> <red>Transceiver</red> translates the last <purple>bit</purple> for the <azure>CAN</azure> <azure>Driver</azure>. The <azure>CAN</azure> <azure>Driver</azure> 
                    now has all the <purple>data</purple> buffered and knows that the transmission has ended, and it will notify the <purple>CanIf</purple>.
                </enum>
                <enum>
                    <purple>CanIf</purple> will request each <red>frames</red> from the <azure>CAN</azure> <azure>Driver</azure> and will attempt to decode/assemble all pieces 
                    together. 
                    <br/><br/>
                    Decoding is the <azure>process</azure> of turning individual <red>frames</red> into a single <purple>PDU</purple> Unit. During decoding the <purple>CanIf</purple>
                    will <purple>remove</purple> <red>Staffing</red> <red>bits</red>, and <red>CAN</red> <red>ID</red> from each <red>frame</red>, as they are not supposed to be part of the <purple>PDU</purple>.
                    Also for each <red>frame</red> <purple>CanIf</purple> will check for <azure>SQC</azure> / <azure>SQN</azure> in order to determine the order in which to assemble
                    the <red>frames</red> into a single <purple>PDU</purple>. 
                    <br/><br/>
                    <red>Based</red> on the <azure>SQC</azure> / <azure>SQN</azure> the <red>frames</red> are put together and a <purple>PDU</purple> / Message is formed.
                </enum>
                <enum>
                    <purple>CanIf</purple> will attempt to validate the <purple>PDU</purple>/Message, by calculating the <red>CRC</red> for the message.
                    <br/><br/>
                    The <red>CRC</red> calculation is performed on the entire message <purple>data</purple>, including the <red>CAN</red> <red>ID</red> and 
                    other control <purple>fields</purple>.
                    <br/><br/>
                    The calculated <red>CRC</red> is then <azure>compared</azure> with the <red>CRC</red> received from our <azure>ECU</azure>. 
                    If the <red>CRCs</red> are identical, the message is valid.
                </enum>
                <enum>
                    If the <red>CRCs</red> are not identical. The other <azure>ECU</azure> will reserve the <red>bus</red>, and will send out an 
                    <azure>Error</azure> <azure>Frame</azure> meant for our <azure>ECU</azure>. We will receive
                    the <azure>Error</azure> <azure>Frame</azure>, and we will know the message intrerruption caused a problem in our transmission, 
                    and the message that reached the destination
                    is different from what we meant to send.
                    <br/><br/>
                    The <azure>Error</azure> <azure>Frame</azure> triggers error recovery mechanisms. The transmitting <azure>ECU</azure> might retry the 
                    transmission, or other <azure>ECUs</azure> might try to avoid sending messages to the problematic node.
                </enum>
                <enum>
                    Our <azure>ECU</azure> will retransmit the message. If the same scenario repeats multiple times, and we are unable 
                    to send the message properly, <red>based</red> on the requirement we might decide restart the 
                    <red>CAN</red> <red>Transceiver</red>, <purple>CAN</purple> <purple>Controller</purple>, or even 
                    the <azure>ECU</azure>, and same thing might happen with the receipient <azure>ECU</azure>. We will try again after that.
                </enum>
                <enum>
                    If the <red>CRCs</red> are identical, and the message is valid. <purple>CanIF</purple> will pass the <purple>PDU</purple> to <red>PduR</red> which
                    will decide upon its configuration whether the <purple>PDU</purple> needs to be routed to a different <azure>ECU</azure> (<azure>process</azure> 
                    known as gatewaying). 
                    <br/><br/>
                    If the <red>PduR</red> is not configured to route the received <purple>PDU</purple>, then the <purple>PDU</purple> is gonna be passed to <red>COM</red> <red>module</red>,
                    which will apply its acceptance criteria.
                    <br/><br/>
                    Meaning if the Unique Message ID of the <purple>PDU</purple> is within the predefined range that the 
                    <red>Com</red> <red>module</red> is configured to accept, then the <purple>PDU</purple> <azure>processing</azure> within the <azure>ECU</azure> continues, 
                    and the <purple>PDU</purple> is unpacked into <azure>signals</azure> and <purple>signal</purple> groups, and passed to the appropriate <red>Software</red> <red>Components</red>.
                    <br/><br/>
                    Otherwise the message will be <azure>blocked</azure>, as it's not meant for the receiving <azure>ECU</azure>.
                </enum>
            <br/>
            The same steps are taken in case of message reception. 
            <br/>
            When a message is received, the <azure>CAN</azure> <azure>Driver</azure> notifies <purple>CanIf</purple> which assembles the message and informs 
            directly or indirectly the <purple>RTOS</purple>, which can then pass the message to the appropriate <azure>task</azure> for <azure>processing</azure>.
            <br/><br/>
            <img class="database_image" src="./website_resources/local/database/pictures/ecu_communication.png" alt="autosar_architecture_ecus_communicating"/>
            <br/>
            Each Transport Protocol <red>implemented</red> within the <azure>ECU</azure> has it's own BusIF <red>module</red>. The BusIF <red>module</red> would <red>interface</red>
            all the existing communication channels within its topology.
            <br/><br/>
            This means <purple>CanIF</purple> <purple>can</purple> <purple>interface</purple> multiple <purple>CAN</purple> <purple>Controllers</purple>, each controlled by its own 
            <azure>CAN</azure> <azure>Driver</azure> and every Controller/Driver pair would be <purple>operating</purple> individually as separate communication channel.
            <br/><br/>
            So regardless of how many CAN communication channels are <red>implemented</red>, there should only be one <purple>CanIF</purple> <red>module</red> <red>interfacing</red> them.
            <br/>
            <img class="database_image" src="./website_resources/local/database/pictures/canif_mutiple_can_controllers.png" alt="canif_multiple_can_channels"/></can-interface>
        <can-collision-detection><purple>CAN</purple> <purple>protocol's</purple> collision detection mechanism enables a node (<azure>ECU</azure>) which is transmitting <purple>data</purple> to detect 
            if another node is trying to send <purple>data</purple> while the <red>bus</red> is already in use. The collision detection on <red>CAN</red> <red>network</red>
            happens through the <azure>Arbitration</azure>. 
            <br/><br/>
            <azure>Arbitration</azure> is the <azure>process</azure> by which multiple <azure>ECUs</azure> on the <red>CAN</red> <red>bus</red> compete to transmit a 
            message. It's a <purple>bit</purple> like a traffic light where only one <red>car</red> can go through at a time.
            <br/><br/>
            Before our <azure>ECU</azure> begins to transmit, it sends a distinguishable <purple>binary</purple> <azure>sequence</azure> (<purple>SOF</purple> <purple>bit</purple>), notifying all 
            other nodes, that we are going to communicate, and the <red>bus</red> will become busy.
            <br/><br/>
            While we are transmitting, we are <purple>constantly</purple> monitoring the <red>bus</red>. We will be able to detect a collision 
            only when the <purple>value</purple> we are transmitting on the <red>bus</red>, is different than the <purple>value</purple> going through the <red>bus</red>. 
            This would mean that some other node, has interfered with our communication and has overwrite what we were sending.
            But this detection is done only when the <purple>value</purple> we are sending is different that the <purple>value</purple> transmitted by the 
            other node. 
            <br/><br/>
            This means if our <azure>ECU</azure> and the other <azure>ECU</azure> send same <purple>values</purple>, we won't detect any collision, 
            and neither will the other <azure>ECU</azure>.
            <br/><br/>
            If both <azure>ECUs</azure> are sending the same <purple>data</purple>, there's no need for a <azure>collision</azure> <azure>resolution</azure> <azure>process</azure>. The <purple>CAN</purple> <purple>protocol</purple> 
            avoids unnecessary delays and ensures smooth <purple>data</purple> transmission.
            <br/><br/>
            This scenario often occurs when <azure>ECUs</azure> are broadcasting messages that contain information that's relevant to 
            all nodes on the <red>bus</red>. For example, a message containing the current speed of the vehicle might be sent by 
            multiple <azure>ECUs</azure>, and it's important that all nodes receive this information.
            <br/><br/>
            The <azure>Collision</azure> <azure>Resolution</azure> <azure>Process</azure> is the <azure>process</azure> of handling collisions. 
            It includes the <azure>arbitration</azure> <azure>phase</azure> (for determining priority) 
            and the actions taken by the <azure>ECUs</azure> that lose the <azure>arbitration</azure> (waiting for a <red>random</red> time before retransmitting).
            <br/><br/>
            <green>Detecting a collision:</green>
            <br/><br/>
            Let's say, we are transmitting a <purple>bit</purple> 0, the other <azure>ECU</azure> transmits a <purple>bit</purple> 0 as <red>Most</red> <red>Significant</red> <red>Bit</red> (<red>MSB</red>) 
            from its <red>CAN</red> <red>ID</red>. We won't detect a collision. Then our <azure>ECU</azure> sends a <purple>bit</purple> 1, 
            but we are <azure>reading</azure> on the <red>bus</red> a <purple>bit</purple> 0, which overwritten what we sent. 
            Now we know there's a collision in progress. 
            But we lost the first <purple>bit</purple> from the <red>CAN</red> <red>ID</red> of the other <azure>ECU</azure> colliding to our transmission.
            <br/><br/>
            The <azure>arbitration</azure> <azure>process</azure> continues with the next <purple>bit</purple>. 
            Our <azure>ECU</azure> will now enter a listening mode, <azure>comparing</azure> its remaining <red>CAN</red> <red>ID</red> <purple>bits</purple> 
            with the <purple>bits</purple> being transmitted on the <red>bus</red>.
            <br/><br/>
            If the other <azure>ECU's</azure> remaining <red>CAN</red> <red>ID</red> <purple>bits</purple> are all recessive states (<purple>bit</purple> 1), 
            our <azure>ECU</azure> will win the <azure>arbitration</azure> for the remaining <purple>bits</purple> and be able to continue transmitting its message.
            <br/><br/>
            If the other <azure>ECU's</azure> remaining <red>CAN</red> <red>ID</red> <purple>bits</purple> contain any dominant states (<purple>bit</purple> 0), 
            our <azure>ECU</azure> will lose the <azure>arbitration</azure>, and the other <azure>ECU</azure> will take on the <red>bus</red> to transmit its message.
            <br/><br/>
            So, even though you lost the first <purple>bit</purple> of the other <azure>ECU's</azure> <red>CAN</red> <red>ID</red>, the <azure>arbitration</azure> <azure>process</azure> 
            continues, and the outcome depends on the remaining <purple>bits</purple> of both <red>CAN</red> <red>IDs</red>.
            <br/><br/>
            <brown>Edge Case:</brown>
            <br/><br/>
            <code>Our ECU's CANID:         </code><red>0</red>001001<azure>0</azure><br/>
            <code>Other ECU's CANID:      </code><purple>0</purple><red>0</red>001001<br/>
            <code>OUR Transmitted data:   </code><purple>0</purple><red>1</red>011110<br/>
            <br/>
            <indigo>Legend of bit comparison:</indigo><br/>
            <purple>Purple</purple> - is where masking of <purple>Other</purple> <purple>ECU's</purple> <purple>CANID</purple> happens because of <azure>Our</azure> <azure>Transmitted</azure> <azure>data</azure>.<br/>
            <red>Red</red> - is where the collision is detected because the 2nd <purple>bit</purple> from the <purple>Other</purple> <purple>ECU's</purple> <purple>CANID</purple> overwrote 
            the <purple>value</purple> of the <purple>data</purple> we were transmitting
            <br/>
            <azure>Azure</azure> - is <red>Our</red> <red>ECU's</red> <red>CANID</red> <azure>LSB</azure> (<azure>Least</azure> <azure>Significant</azure> <azure>Bit</azure>) which will NOT be <azure>compared</azure> as part of 
            <azure>Arbitration</azure> <azure>Phase</azure>.
            <br/>
            <br/>
            <indigo>Scenario:</indigo><br/>
            Taking under consideration the <red>CANID</red> and Transmitted <purple>data</purple> from above, we notice that the collision will
            be detected stating with second <purple>bit</purple> from the left. While we were transmitting <purple>bit</purple> 0, we couldn't detect 
            a collision because the <purple>Other</purple> <purple>ECU's</purple> <purple>CANID</purple> is also 0, so no <purple>value</purple> will be overwriten on the <red>bus</red>. 
            <br/><br/>
            When the collision is detected we begin to <azure>compare</azure> the <purple>bits</purple> <azure>read</azure> from the <red>bus</red> with <red>Our</red> <red>ECU's</red> <red>CANID</red>.
            This <azure>process</azure> is known as <azure>Arbitration</azure> <azure>Phase</azure> or <azure>Arbitration</azure> <azure>Process</azure> and it happens at the beggining of a 
            CAN message transmission. 
            <red>Our</red> <red>ECU's</red> <red>CANID</red> will win the <azure>Arbitration</azure> <azure>Phase</azure> even though <red>Our</red> <red>ECU's</red> <red>CANID</red> is slightly bigger, 
            because we only get to 
            <azure>compare</azure> only a <red>partial</red> part of the <purple>other</purple> <purple>ECU's</purple> <purple>CANID</purple>.
            <br/><br/>
            This is a fascinating example of how the <purple>CAN</purple> <purple>protocol's</purple> design can lead to unexpected behaviors:
            like 1000100 <azure>compared</azure> to 10001000. We win but Our <red>CAN</red> <red>ID</red> is greater than the other <azure>ECU's</azure> <red>CAN</red> <red>ID</red>. 
            <br/><br/>
            While the <purple>data</purple> we're transmitting isn't directly <azure>compared</azure> during <azure>Arbitration</azure> <azure>Phase</azure>, it can indirectly 
            influence the outcome by masking parts of the other <azure>ECU's</azure> <red>CAN</red> <red>ID</red>.
            <br/><br/>
            <green>What if multiple ECUs transmit the same data?</green>
            <br/><br/>
            If multiple <azure>ECUs</azure> transmit the same date, the collision detection would still work <red>based</red> on the <azure>ECU</azure>-Id, 
            which will be unique. So when the <azure>ECUs</azure> are trying to send their ID's through the <red>bus</red>, they will most likely
            raise a conflict, and they will detect the collision because the <purple>values</purple> on the <red>bus</red> will be overwrite from 
            multiple <azure>sources</azure>.
            <br/><br/>
            <brown>What if multiple ECUs with same IDs would be connected to the same network?</brown>
            <br/><br/>
            This scenario would most like raises serious security concerns. A malicious actor could potentially exploit 
            this situation to inject <purple>false</purple> information into the network or disrupt the normal <purple>operation</purple> of the <red>system</red>.
            <br/><br/>
            While there might not be a collision in the strict sense if multiple <azure>ECUs</azure> are sending the same ID and same date, 
            the <red>bus</red> would become busier as all <azure>ECUs</azure> try to transmit their messages. This could lead to delays in other 
            messages being sent, as the <red>bus</red> becomes saturated.
            <br/><br/>
            If two <azure>ECUs</azure> have the same ID, it's like one is trying to impersonate the other. This could lead to confusion 
            and potentially disrupt the communication flow.
            <br/><br/>
            <brown>Detection of ECU replicas within the network:</brown>
            <br/><br/>
            A practical way to detect a duplicated <azure>ECU</azure> within the network would be by disconnecting 
            <azure>ECUs</azure> one by one and observing the Main <azure>ECU's</azure> <red>reaction</red>.
            
            
                <enum><indigo>Baseline:</indigo> First, we would establish a baseline by monitoring the Main <azure>ECU's</azure> 
                behavior with all <azure>ECUs</azure> connected. This would provide a <purple>reference</purple> <purple>point</purple> for <azure>comparison</azure>.</enum>
                <enum><indigo>Disconnect and Observe:</indigo> We would then disconnect each <azure>ECU</azure> individually and observe the Main <azure>ECU's</azure> behavior.</enum>
                <enum><indigo>Duplicate Detection:</indigo> If the Main <azure>ECU</azure> doesn't <purple>register</purple> the absence of a specific <azure>ECU</azure> (i.e., 
                its behavior remains unchanged), it indicates that there might be a duplicate ID.</enum>
                <enum><indigo>Isolate and Verify:</indigo> We could then disconnect the suspect <azure>ECU</azure> and reconnect 
                the previously disconnected one to confirm the duplicate ID.</enum>
            
            <br/>
            By leveraging <red>network</red> <red>management</red> capabilities we would have a new <purple>set</purple> of possibilities for detecting 
            duplicate <azure>ECU</azure> IDs.
            
                <enum><indigo>Wake-up Cycle:</indigo> The Main <azure>ECU</azure> could initiate a wake-up cycle, bringing each 
                <azure>ECU</azure> online one by one. This would <azure>allow</azure> for a controlled and isolated test environment.</enum>
                <enum><indigo>Message Exchange:</indigo> During the wake-up cycle, the Main <azure>ECU</azure> could send a series of test 
                messages to each <azure>ECU</azure>. These messages could be specifically designed to test communication 
                latency and <red>bus</red> load.</enum>
                <enum><indigo>Data Analysis:</indigo> The Main <azure>ECU</azure> would carefully analyze the time it takes for messages to 
                reach their destination and the overall <red>bus</red> load during each test.</enum>
                <enum><indigo>Duplicate Detection:</indigo> If the Main <azure>ECU</azure> detects a significant increase in <red>bus</red> load or 
                communication latency when a particular <azure>ECU</azure> is woken up, it could indicate a duplicate 
                ID situation. The duplicate <azure>ECU</azure> might be interfering with message transmission, causing 
                delays and increased <red>bus</red> traffic.</enum></can-collision-detection>
        <can-tp-module><red>CAN</red> <red>Transport</red> <red>Protocol</red> (<red>CanTp</red>) <red>Module</red> is essential for <azure>efficient</azure> communication in automotive <red>systems</red>, especially 
            when dealing 
            with larger <purple>data</purple> packets. It has the ability to segment, reassemble, and manage flow control of <purple>PDUs</purple> / Messages.
            <br/><br/>
            The <red>CanTp</red> <red>module</red> is designed to handle the transport of larger <purple>data</purple> packets over the <red>CAN</red> <red>bus</red>, 
            which has a maximum <red>payload</red> <purple>size</purple> of 8 <purple>bytes</purple>. When <purple>data</purple> exceeds this limit, <red>CanTp</red> comes into play to 
            ensure that the <purple>data</purple> is transmitted <azure>efficiently</azure> and reliably.
            <br/><br/>
            <green>Key Functions of CanTp:</green>
            <br/><br/>
            <indigo>Segmentation:</indigo>
            <br/>
            <red>CanTp</red> segments larger <purple>data</purple> packets into smaller <red>frames</red> that fit within the 8-<purple>byte</purple> limit of CAN messages.
            This <azure>process</azure> ensures that <purple>data</purple> can be transmitted without loss or corruption.
            <br/><br/>
            <indigo>Reassembly:</indigo>
            <br/>
            Once the segmented <red>frames</red> are received by the destination, <red>CanTp</red> is responsible for reassembling them 
            into the original <purple>data</purple> packet.
            This is crucial for <azure>maintaining</azure> <purple>data</purple> integrity.
            <br/><br/>
            <indigo>Flow Control:</indigo>
            <br/>
            <red>CanTp</red> manages flow control to prevent <purple>data</purple> <azure>overflow</azure>. It ensures that the sender does not overwhelm the 
            receiver with too many messages at once.
            This is particularly important in scenarios where the receiver may take time to <azure>process</azure> incoming <purple>data</purple>.
            <br/><br/>
            It uses a "<red>Flow</red> <red>Control</red> <red>Frame</red>" to <purple>signal</purple> the sender to pause or continue sending <purple>data</purple> <red>based</red> on the receiver's 
            readiness.
            <br/><br/>
            <indigo>State Management:</indigo>
            <br/>
            The <red>CanTp</red> <red>module</red> <purple>operates</purple> in different states (e.g., <red>CANTP_ON</red>), and it performs segmentation and reassembly 
            <azure>tasks</azure> only when in the appropriate state.
            This state management helps <azure>maintain</azure> the protocol's integrity and functionality.
            <br/><br/>
            <indigo>Error Handling:</indigo>
            <br/>
            <red>CanTp</red> includes mechanisms for error detection and handling. If a transmission error occurs, it can initiate 
            retransmission of the affected <red>frames</red>, ensuring reliable communication.
            <br/><br/>
            <indigo>Configuration Parameters:</indigo>
            <br/>
            The <red>CanTp</red> <red>module</red> can be configured with various <red>parameters</red>, such as maximum transmission unit 
            (MTU) <purple>size</purple>, timeout <purple>values</purple>, and flow control settings. These configurations can be tailored to meet 
            the specific needs of the application.
            <br/><br/>
            <indigo>Integration with Other Modules:</indigo>
            <br/>
            <red>CanTp</red> sits between the <red>PDU</red> <red>Router</red> (<red>PDUR</red>) and the rest of the CAN <purple>stack</purple>, facilitating communication between 
            different <red>software</red> <red>components</red>.
            It interacts with other <red>modules</red> to ensure smooth <purple>data</purple> transmission across the <red>system</red>.
            <br/><br/>
            <indigo>Use Cases:</indigo>
            <br/>
            <red>CanTp</red> is widely used in diagnostic communication, where larger <purple>data</purple> <purple>sets</purple> need to be 
            transmitted for vehicle diagnostics and maintenance.
            <br/><br/>
            <red>CanTp</red> ensures that all <purple>data</purple> is transmitted 
            without loss, <azure>maintaining</azure> the integrity of the information which is particulary important in applications 
            requiring extensive <purple>data</purple> logging.</can-tp-module>
        <pdur-module>The <red>PduR</red> <red>module</red> is primarily responsible for routing <purple>Protocol</purple> <purple>Data</purple> <purple>Units</purple> (<purple>PDUs</purple>) to the appropriate 
            <red>bus</red>-specific <red>interface</red> <red>modules</red>. This ensures that <purple>data</purple> is transmitted correctly between different 
            components of the vehicle's electronic <red>systems</red>.
            <br/><br/>
            The <red>PduR</red> <red>module</red> manages the transmission of <purple>data</purple> from the <purple>PDU</purple> transmit buffer to the designated <red>interface</red> 
            <red>module</red>.<br/>
            The <red>PduR</red> <red>module</red> handles the reception of <purple>PDUs</purple> and routes them to the correct destination <red>based</red> on the 
            configuration.
            <br/><br/>
            <red>PduR</red> <purple>operates</purple> above the lower <purple>layers</purple> of the <azure>communication</azure> <azure>stack</azure>, <azure>allowing</azure> it to interact with various 
            communication protocols and services.
            <br/><br/>
            <img class="database_image" src="./website_resources/local/database/pictures/communication_stack.png" alt="autosar_comstack"/>
            <br/><br/>
            The <red>PduR</red> <red>module</red> is also responsible for reporting errors related to <purple>PDU</purple> transmission, ensuring that any 
            issues are communicated to the Diagnostic Event Tracker (DET) <red>module</red>.
            <br/><br/>
            The behavior of the <red>PduR</red> can be configured <red>based</red> on the specific requirements of the vehicle's architecture, 
            making it flexible for different applications. This means <red>PduR</red> can be configured to route specific messages, 
            or messages within specified range of Message Ids to a specific <red>bus</red>.
            <br/><br/>
            Via <red>PduR</red> the <azure>ECU</azure> can redirect messages within the network. <azure>Allowing</azure> for <red>bus</red> traffic management over 
            Network Segments. This <red>function</red> is also known as gatewaying.
            <br/><br/>
            <img class="database_image" src="./website_resources/local/database/pictures/routing_ecus.png" alt="routing_pdus_through_gateway"/>
            <br/><br/>
            <green>Use Case for PduR:</green>
            <br/><br/>
            <azure>ECUs</azure> within the network might be split into sectors, this would enable <azure>parallel</azure> trafic on the <red>bus</red>, meaning that <azure>ECUs</azure> within
            a sector could only monitor the traffic on their sector, and only communicate to their neighbors. With this approach, when there
            is traffic within the network but not in their sectors the <azure>ECUs</azure> could still communicate. This is reffer to as <indigo>network 
            segmentation</indigo>.
            <br/><br/>
            <brown>Network Segmentation:</brown>
            <br/><br/>
            Within the picture above, there is a basic representation of a segmented network, with 2 sectors: Sector A and Sector B. 
            The sender <azure>ECU</azure> from sector A cannot monitor the traffic within sector B, and in order to avoid jamming other <azure>ECUs</azure> 
            communicating through sector B, it will communicate with it's neighbor the Gateway <azure>ECU</azure>, which will receive the Message
            from the sender <azure>ECU</azure>, it will <azure>store</azure> it, and once the <red>bus</red> within sector B become available it will redirect the message to 
            receiver <azure>ECU</azure> from sector B.
            <br/><br/>
            This workflow involves <red>PduR</red>, as <red>PduR</red> is the main responsible for routing messages within the network. 
            The <red>PduR</red> has access to all <red>buses</red> through which an node (<azure>ECU</azure>) is connected. Meaning we could receive a message 
            through <red>LIN</red> and route it further through CAN.
            <br/><br/>
            <img class="database_image" src="./website_resources/local/database/pictures/routing_pdu_lin_can.png" alt="routing_pdus_from_lin_to_can"/>
            <br/><br/>
            The <red>PduR</red> can handle <red>payload</red>-dependent routing. This means that the routing decisions can be influenced by the content 
            of the <purple>PDU</purple> <red>payload</red>, <azure>allowing</azure> for more intelligent <purple>data</purple> handling <red>based</red> on the actual <purple>data</purple> being transmitted.
            <br/><br/>
            In many cases, the <red>PduR</red> simply acts as a <purple>data</purple> forwarder. It receives a <purple>PDU</purple> on one <red>bus</red>, translates it to the 
            format required by the target <red>bus</red> (if necessary), and forwards it without any modification to the <purple>data</purple> 
            content. In such scenarios, the Application SW doesn't need to be involved.
            <br/><br/>
            But, if the gatewaying <azure>process</azure> involves specific application <purple>logic</purple> (e.g., filtering, validation, or encryption),
            the Application 
            SW will be responsible for <red>implementing</red> this <purple>logic</purple>.
            <br/><br/>
            The goal of a gateway is often to make communication between different <red>bus</red> segments appear seamless to the <purple>application</purple> <purple>layer</purple>. 
            The <red>PduR</red> handles the technical details of the <red>bus</red> protocol translation and routing, <azure>allowing</azure> the Application SW to focus on 
            its specific <azure>tasks</azure>.
            <br/><br/>
            <brown>PDU Processing:</brown>
            <br/><br/>
            When a <purple>PDU</purple> is received from an external <azure>ECU</azure>, the <azure>processing</azure> flow proceeds as follows:
            <br/><br/>
            <indigo>Bus Driver:</indigo> The physical reception of the <purple>PDU</purple> happens at the lowest level, the <red>Bus</red> <red>Driver</red>. 
            This <purple>layer</purple> handles the <azure>low</azure>-<azure>level</azure> details of the communication <red>bus</red> (CAN, <red>LIN</red>, etc.).
            <br/><br/>
            <indigo>Bus Interface (Bus IF):</indigo> The <red>Bus</red> IF <purple>layer</purple> receives the raw <purple>data</purple> from the <red>Bus</red> <red>Driver</red> 
            and performs any necessary initial <azure>processing</azure>, such as error detection and <red>frame</red> extraction.
            <br/><br/>
            <indigo>Bus TP (Transport Protocol):</indigo> If a transport protocol is used (e.g., <red>CAN</red> <red>TP</red> for segmented 
            messages), 
            the <red>Bus</red> <red>TP</red> <purple>layer</purple> reassembles the <purple>PDU</purple> from potentially fragmented parts.
            <br/><br/>
            <indigo>PDU Router (PduR):</indigo> The <red>PduR</red> is the next <purple>layer</purple>. It receives the complete <purple>PDU</purple> and determines the 
            destination <red>based</red> on its routing table. This is where routing decisions are made.
            <br/><br/>
            <indigo>Communication Manager (ComM):</indigo> If the <purple>PDU</purple> is destined for an internal SWC, ComM handles the 
            internal transfer of the <purple>PDU</purple>.
            <br/><br/>
            <indigo>RTE (Runtime Environment):</indigo> Finally, the <purple>PDU</purple> is passed to the <red>RTE</red>, which acts as an intermediary 
            between the <purple>AUTOSAR</purple> <purple>basic</purple> <purple>software</purple> <red>modules</red> and the application <red>software</red> <red>components</red> (SWCs). 
            The <red>RTE</red> delivers the <purple>PDU</purple> to the appropriate SWC <red>based</red> on the configured communication <red>interfaces</red>. 
            The SWC then <azure>processes</azure> the received <purple>data</purple>.
            <br/><br/>
            <indigo>Application Software:</indigo> Applies specific application <purple>logic</purple> (e.g., filtering, validation, or 
            encryption) <red>based</red> on the requirements.
            <br/><br/>
            <brown>PduR as PDU Collector</brown>
            <br/><br/>
            The <red>PduR</red> is important even if routing/gatewaying would not be <red>implemented</red> because <red>PduR</red> acts as a <purple>PDU</purple> <purple>collector</purple>.
            This means all the <purple>PDUs</purple> received by our <azure>ECU</azure> regardless of the network (CAN, <red>LIN</red>, <red>Ethernet</red>, Flexray) get <purple>collected</purple> by 
            <red>PduR</red> and passed to the <red>COM</red> <red>module</red> where they are unpacked into <azure>Signals</azure> and SignalGroups. 
            <br/><br/>
            Similarly, all the <azure>signals</azure> <purple>collected</purple> by <red>COM</red> <red>module</red> are packed into <purple>PDUs</purple> and passed to the <red>PduR</red>, and the <red>PduR</red> <red>based</red> on
            its configuration it decides on which network to sent them.
            <br/><br/>
            <img class="database_image" src="./website_resources/local/database/pictures/pdur_as_collector.png" alt="pdur_as_collector"/>
            <br/><br/>
            <brown>PduR in error detection/handling:</brown>
            <br/><br/>
             The <red>PduR</red> can detect and/or handle errors related to <purple>PDU</purple> transmission. For <red>instance</red>: if there's an issue at the 
             <red>interface</red> level, the <red>PduR</red> simply forwards the error to the upper <purple>layer</purple> without intervention.
             <br/><br/>
             The <red>PduR</red> focuses on routing and managing <purple>PDUs</purple> without getting involved in the error correction <azure>process</azure>.
             <br/>
             While the <red>PduR</red> does not handle errors directly, it does pass along the <purple>return</purple> <purple>values</purple> from lower <purple>layers</purple>. This means 
             that any status or error <azure>codes</azure> generated by the lower <purple>layers</purple> are communicated to the upper <purple>layers</purple> through the <red>PduR</red>.
             <br/><br/>
             <brown>PduR data validation:</brown>
             <br/><br/>
             The <red>PduR</red> primarily validates the format and <purple>structure</purple> of the <purple>PDUs</purple> it receives. This means it checks that:
            <enum>The <purple>PDU</purple> conforms to the expected layout and <purple>data</purple> <purple>types</purple> defined in the <purple>AUTOSAR</purple> configuration.</enum>
            <enum>The <purple>PDU</purple> contains the correct number of <purple>bytes</purple> and <purple>fields</purple>. (No missing or invalid <purple>fields</purple> and no out-of-bounds <purple>values</purple>).</enum>
            <enum>The <purple>data</purple> <purple>types</purple> within the <purple>PDU</purple> are consistent with the defined specifications. (No incorrect <purple>data</purple> <purple>types</purple>).</enum>
            <br/>
            The <red>PduR</red> can also perform validation <red>based</red> on the content of the <purple>PDU</purple> <red>payload</red>. This means that it can:
            <enum>Check if the <purple>PDU</purple> <red>payload</red> <azure>matches</azure> certain predefined patterns or <azure>conditions</azure>.</enum>
            <enum>Use the <red>payload</red> to determine the appropriate routing path for the <purple>PDU</purple>.</enum>
            <br/><br/>
            <indigo>Example of data validation:</indigo>
            <br/>
            Imagine a <purple>PDU</purple> that carries information about a vehicle's speed. The <red>PduR</red> would check that:
            <br/>
            <enum>The <purple>PDU</purple> is formatted correctly and contains the expected <purple>fields</purple> for speed <purple>data</purple>.</enum>
            <enum>The <purple>data</purple> <purple>type</purple> for speed is defined as an <purple>integer</purple>.</enum>
            <enum>The speed <purple>value</purple> falls within a reasonable range (e.g., not exceeding the maximum speed limit).</enum>
            <br/></pdur-module>
        <com-module>The <red>Communication</red> <red>Module</red> (COM) in <purple>AUTOSAR</purple> is a fundamental component responsible for packing and unpacking <azure>signals</azure> 
            into or from <purple>Protocol</purple> <purple>Data</purple> <purple>Units</purple> (<purple>PDUs</purple>) during transmission and reception. This ensures that <purple>data</purple> is formatted 
            correctly for communication.
            <br/><br/>
            A <purple>PDU</purple> is a <purple>collection</purple>/group of <azure>signals</azure> of different <purple>values</purple> and different <purple>data</purple> <purple>types</purple>. These <purple>PDUs</purple> are also reffered 
            to as Messages. They act as an <azure>abstraction</azure> <purple>layer</purple> that facilitates the transfer of <purple>data</purple> 
            between different <red>software</red> <red>components</red>. 
            <br/><br/>
            <purple>PDUs</purple> are used to <red>encapsulate</red> <purple>data</purple> for transmission, <azure>allowing</azure> for <azure>efficient</azure> 
            routing and handling of information across various communication protocols.
            <br/><br/>
            <indigo>Communication Services:</indigo>
            <br/>
            The <red>COM</red> <red>module</red> provides essential communication services to other <red>modules</red>, facilitating the exchange of information 
            between different <red>software</red> <red>components</red> within the vehicle. 
            <br/><br/>
            <indigo>Filtering Algorithms:</indigo>
            <br/>
            The <red>COM</red> <red>module</red> supports various ComFilterAlgorithms, which help in filtering messages <red>based</red> on specific criteria, 
            enhancing the <azure>efficiency</azure> of <purple>data</purple> transmission.
            <br/><br/>
             The <red>COM</red> <red>module</red> is configured with specific filtering settings that define which <purple>PDUs</purple> are relevant for a 
             particular <azure>ECU</azure>. These settings can be <red>based</red> on various criteria, such as:
             <br/>
            <enum><purple>PDU</purple> <purple>Identifier</purple> (ID): The unique <purple>identifier</purple> of the <purple>PDU</purple>.</enum>
            <enum><purple>Signal</purple> IDs: The specific <azure>signals</azure> contained within the <purple>PDU</purple>.</enum>
            <enum><azure>ECU</azure> <purple>Addresses</purple>: The <azure>source</azure> or destination <purple>addresses</purple> of the <purple>PDU</purple>.</enum>
            <enum>Protocol <purple>Type</purple>: The communication protocol used for the <purple>PDU</purple>.</enum>
            <br/>
            When an <azure>ECU</azure> receives a <purple>PDU</purple>, the <red>COM</red> <red>module</red> checks its contents against the configured filtering settings.
            <br/><br/>
            If the <purple>PDU</purple> <azure>matches</azure> the filtering criteria, it is considered relevant and passed on to the appropriate 
            <purple>application</purple> <purple>layer</purple> <red>module</red>.
            <br/><br/>
            If the <purple>PDU</purple> does not <azure>match</azure> the filtering criteria, it is discarded, preventing unnecessary <azure>processing</azure> 
            and <azure>saving</azure> <purple>valuable</purple> resources.
             <br/><br/>
             This filtering mechanism ensures that only relevant <purple>PDUs</purple> are <azure>processed</azure> by the <azure>ECU</azure>, improving communication 
             <azure>efficiency</azure> and reducing the workload on the <red>system</red>. This is particularly important in automotive <red>systems</red> 
             where <red>real</red>-<red>time</red> performance and resource constraints are critical.
            <br/><br/>
            
            Example: Imagine a scenario where an <azure>ECU</azure> is responsible for controlling the engine. The <red>COM</red> <red>module</red> could be 
            configured to filter out all <purple>PDUs</purple> except those related to engine <red>parameters</red> like speed, temperature, and fuel 
            pressure. This ensures that the <azure>ECU</azure> only receives and <azure>processes</azure> <purple>data</purple> that is relevant to its specific <azure>task</azure>.
            <br/><br/>
            <indigo>Protocol Independence:</indigo>
            <br/>
            Similar to the <red>PDU</red> <red>Router</red>, the <red>COM</red> <red>module</red> <purple>operates</purple> in a <purple>protocol</purple>-<purple>independent</purple> manner, <azure>allowing</azure> it to work seamlessly with 
            different communication protocols like CAN, <red>LIN</red>, and <red>Ethernet</red>. This means, regardless of how many Transfer Protocols are
            used / <red>implemented</red> within an <azure>ECU</azure>, there should be only one <red>PduR</red> <red>module</red> and only one <red>COM</red> <red>module</red>.
            <br/><br/>
            <indigo>Configuration Flexibility:</indigo>
            <br/>
            The <red>COM</red> <red>module</red> can be configured to meet the specific needs of different vehicle architectures, making it adaptable to 
            various communication scenarios.
            <br/><br/>
            <indigo>Integration with Other Modules:</indigo>
            <br/>
            The <red>COM</red> <red>module</red> interacts <azure>closely</azure> with other <purple>AUTOSAR</purple> <red>modules</red>, such as the <red>PDU</red> <red>Router</red> and the <red>Network</red> <red>Management</red> <red>module</red>, 
            ensuring a cohesive communication framework.
            <br/><br/>
            <img class="database_image" src="./website_resources/local/database/pictures/com_module_operation.png" alt="com_module_operation"/></com-module>
        <error-detection>CAN communication relies on a combination of techniques to ensure reliable <purple>data</purple> transmission. 
                <red>Stuffing</red> <red>bits</red>, <red>CRC</red> <azure>codes</azure>, and timing considerations all work together to help the receiver interpret 
                the <purple>data</purple> accurately, even in challenging communication environments.
                <br/><br/>
                <green>Bit Stuffing</green>
                <br/><br/>
                <red>Bit</red> <red>Stuffing</red> <red>Process</red>: In CAN communication, if there are five consecutive <purple>bits</purple> of the same <purple>value</purple> 
                (either all 0s or all 1s), a stuff <purple>bit</purple> (the opposite <purple>value</purple>) is <azure>inserted</azure> to <purple>break</purple> the <azure>sequence</azure>.  
                <br/>
                This means the receiver does not expect more 5 <purple>bits</purple> of same <purple>value</purple> in a row. If it detects such a <azure>sequence</azure> 
                it will raise an <red>Stuff</red> <red>Error</red>.
                <br/><br/>
                Example: A <azure>sequence</azure> such as: 10111111000 will raise a <red>Stuff</red> <red>error</red>. Because there are 6 <purple>bits</purple> of 1 in a row.
                <br/><br/>
                Without this <red>Stuffing</red> <red>Bit</red> mechanism the receiver will not be sure if the number of <purple>bits</purple> it <azure>read</azure> 
                from the communication is exactly the same number of <purple>bits</purple> sent by the <azure>source</azure>.
                <br/><br/>
                The <red>stuffing</red> <red>bits</red> are part of the <red>Frames</red> but NOT part of the <purple>PDUs</purple>.
                <br/>
                
                    <enum><indigo>Frame:</indigo> Contains the raw <purple>data</purple>, including <red>stuffing</red> <red>bits</red>.<br/></enum>
                    <enum><indigo>PDU:</indigo> Contains the actual <purple>data</purple> intended for the receiver, without 
                    the <red>stuffing</red> <red>bits</red>.</enum>
                
                <br/>
                It's the <purple>CanIf's</purple> job to decode the information, and turn it back into a <purple>PDU</purple>, hence <purple>removing</purple> the 
                <red>stuffing</red> <red>bits</red>.
                <br/><br/>
                <brown>Why using Stuffing Bits: </brown>
                <br/><br/>
                By using <red>stuffing</red> <red>bits</red> the receiver will not get confused whether he <azure>read</azure> 5 <purple>bits</purple> of 1 or he <azure>read</azure> 4 
                <purple>bits</purple> of one but the reception was slow.
                <br/><br/>
                Let's imagine a sender sending 8 <purple>bits</purple>, but the communication is slow, and the receiver <azure>read</azure> the 11 <purple>bits</purple>. 
                Since the communication was slow, the receiver happened to <azure>read</azure> the same <purple>bit</purple> multiple times, because the 
                information was not <azure>updated</azure> on the <red>bus</red>. 
                <br/><br/>
                The receiver will have to figure out how many <purple>bits</purple> were actually transmitted,
                in order to properly interpret the information. This is done by calculating the variation of the 
                information on the <red>bus</red>. So internally the <azure>ECU</azure> is <azure>counting</azure> how many times the voltages have varried.</error-detection>
    </manifest>
    
</content>